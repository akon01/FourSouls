{"version":3,"sources":["core/decorators/Refs.ts"],"names":[],"mappings":";;AAAA,4CAA6D;AAE7D,uCAAgD;AA2ChD;;;;GAIG;AACU,QAAA,IAAI,GAAmB,2BAAe,CAAc,MAAM,EAAE,CAAC,CAAC,IAAkB,EAAE,EAAE;IAC7F,IAAI,CAAC,IAAI,CAAc;QACnB,KAAK,EAAE,GAAG,CAAC,EAAE,CAAC,eAAO,CAAC,GAAG,CAAC;QAC1B,WAAW,EAAE,CAAC,QAAQ,EAAE,GAAG,EAAE,EAAE;YAC3B,QAAQ,CAAC,IAAI,GAAG,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC;QACpC,CAAC;KACJ,CAAC,CAAC;IACH,IAAI,CAAC,IAAI,CAAc;QACnB,KAAK,EAAE,GAAG,CAAC,EAAE,CAAC,eAAO,CAAC,GAAG,CAAC;QAC1B,WAAW,EAAE,CAAC,QAAQ,EAAE,GAAG,EAAE,EAAE;YAC3B,QAAQ,CAAC,IAAI,CAAC,OAAO,GAAG,GAAG,CAAC;QAChC,CAAC;KACJ,CAAC,CAAC;IACH,IAAI,CAAC,IAAI,CAAc;QACnB,KAAK,EAAE,GAAG,CAAC,EAAE,CAAC,gBAAQ,CAAC,GAAG,CAAC;QAC3B,WAAW,EAAE,CAAC,QAAQ,EAAE,GAAG,EAAE,EAAE;YAC3B,QAAQ,CAAC,IAAI,CAAC,KAAK,GAAG,GAAG,CAAC;QAC9B,CAAC;KACJ,CAAC,CAAC;AACP,CAAC,CAAC,CAAmB,CAAC","file":"../../../core/decorators/Refs.js","sourcesContent":["import { createDecorator, ArgsIterator } from '../factories';\r\nimport { RefMetadata } from '../metadatas';\r\nimport { isToken, isString } from '../../utils';\r\nimport { Token } from '../../types';\r\n\r\n/**\r\n * Refs decorator, for class. use to define the class as service of target.\r\n *\r\n * @Refs\r\n *\r\n * @export\r\n * @interface IRefToDecorator\r\n * @extends {IClassDecorator<RefMetadata>}\r\n */\r\nexport interface IRefsDecorator {\r\n    /**\r\n     * Refs decorator, for class. use to define the class as service of target.\r\n     *\r\n     * @Refs\r\n     *\r\n     * @param {Token<any>} target reference to target token.\r\n     */\r\n    (target: Token<any>): ClassDecorator;\r\n\r\n    /**\r\n     * Refs decorator, for class. use to define the class as service of target.\r\n     *\r\n     * @Refs\r\n     *\r\n     * @param {Token<any>} target reference to target token.\r\n     * @param {Token<any>} provide define this class ref provider for provide.\r\n     * @param {string} [alias] define this class ref provider with alias for provide.\r\n    */\r\n    (target: Token<any>, provide: Token<any>, alias?: string): ClassDecorator;\r\n\r\n    /**\r\n     * Refs decorator, for class. use to define the class as service of target.\r\n     *\r\n     * @Refs\r\n     *\r\n     * @param {RefMetadata} [metadata] metadata map.\r\n     */\r\n    (metadata: RefMetadata): ClassDecorator;\r\n}\r\n\r\n/**\r\n * Refs decorator, for class. use to define the class as service of target.\r\n *\r\n * @Refs\r\n */\r\nexport const Refs: IRefsDecorator = createDecorator<RefMetadata>('Refs', ((args: ArgsIterator) => {\r\n    args.next<RefMetadata>({\r\n        match: arg => isToken(arg),\r\n        setMetadata: (metadata, arg) => {\r\n            metadata.refs = { target: arg };\r\n        }\r\n    });\r\n    args.next<RefMetadata>({\r\n        match: arg => isToken(arg),\r\n        setMetadata: (metadata, arg) => {\r\n            metadata.refs.provide = arg;\r\n        }\r\n    });\r\n    args.next<RefMetadata>({\r\n        match: arg => isString(arg),\r\n        setMetadata: (metadata, arg) => {\r\n            metadata.refs.alias = arg;\r\n        }\r\n    });\r\n})) as IRefsDecorator;\r\n\r\n"]}