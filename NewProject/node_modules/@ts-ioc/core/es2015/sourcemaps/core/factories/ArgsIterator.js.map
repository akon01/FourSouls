{"version":3,"sources":["core/factories/ArgsIterator.ts"],"names":[],"mappings":";;AACA,uCAAqD;AAqCrD;;;;;GAKG;AACH,MAAa,YAAY;IAGrB,YAAsB,IAAW;QAAX,SAAI,GAAJ,IAAI,CAAO;QAC7B,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;QACd,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;IACzB,CAAC;IAED,UAAU;QACN,OAAO,IAAI,CAAC,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;IACxC,CAAC;IAED,GAAG;QACC,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;IAChC,CAAC;IAED,IAAI,CAAI,OAAwB;QAC5B,IAAI,CAAC,GAAG,EAAE,CAAC;QACX,IAAI,IAAI,CAAC,UAAU,EAAE,EAAE;YACnB,OAAO,IAAI,CAAC;SACf;QAED,IAAI,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC9B,IAAI,OAAO,CAAC,UAAU,IAAI,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE;YAC/C,IAAI,CAAC,QAAQ,GAAG,YAAI,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,IAAI,EAAE,EAAE,GAAG,CAAC,CAAC;YACtD,IAAI,CAAC,GAAG,EAAE,CAAC;SACd;aAAM,IAAI,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE;YAC3B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,IAAI,EAAE,CAAC;YACpC,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,QAAa,EAAE,GAAG,CAAC,CAAC;SAChD;aAAM,IAAI,wBAAgB,CAAC,GAAG,CAAC,EAAE,EAAE,iDAAiD;YACjF,IAAI,CAAC,QAAQ,GAAG,YAAI,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,IAAI,EAAE,EAAE,GAAG,CAAC,CAAC;YACtD,IAAI,CAAC,GAAG,EAAE,CAAC;SACd;aAAM;YACH,IAAI,CAAC,GAAG,EAAE,CAAC;SACd;IACL,CAAC;IAED,OAAO;QACH,OAAO,IAAI,CAAC,IAAI,CAAC;IACrB,CAAC;IAED,WAAW;QACP,OAAO,IAAI,CAAC,QAAQ,CAAC;IACzB,CAAC;IAEmB,MAAM,CAAC,iBAAiB;QACpB,OAAO,EAAC,MAAM,EAAC,cAAc,EAAC,QAAQ,EAAC,EAAC,aAAa,EAAC,CAAC,MAAM,CAAC,EAAC,YAAY,EAAC,EAAE,EAAC,KAAK,EAAC,EAAE,EAAC,MAAM,EAAC,CAAC,SAAS,CAAC,EAAC,SAAS,EAAC,EAAE,EAAC,aAAa,EAAC,EAAE,EAAC,EAAC,CAAC;IAC/I,CAAC;CACL;AAhDpB,oCAgDoB","file":"../../../core/factories/ArgsIterator.js","sourcesContent":["import { Metadate } from '../metadatas';\r\nimport { lang, isMetadataObject } from '../../utils';\r\n\r\n\r\n/**\r\n * arg checker.\r\n *\r\n * @export\r\n * @interface CheckExpress\r\n * @template T\r\n */\r\nexport interface CheckExpress<T extends Metadate> {\r\n    /**\r\n     * arg matched or not.\r\n     *\r\n     * @param {*} arg\r\n     * @returns {boolean}\r\n     * @memberof CheckExpress\r\n     */\r\n    match(arg: any): boolean;\r\n    /**\r\n     * arg is meatdata or not.\r\n     *\r\n     * @param {*} arg\r\n     * @returns {boolean}\r\n     * @memberof CheckExpress\r\n     */\r\n    isMetadata?(arg: any): boolean;\r\n    /**\r\n     * set arg to metadata.\r\n     *\r\n     * @param {T} metadata\r\n     * @param {*} arg\r\n     * @memberof CheckExpress\r\n     */\r\n    setMetadata(metadata: T, arg: any): void\r\n}\r\n\r\n/**\r\n * args iterator.s\r\n *\r\n * @export\r\n * @class ArgsIterator\r\n */\r\nexport class ArgsIterator {\r\n    private idx: number;\r\n    private metadata: Metadate;\r\n    constructor(protected args: any[]) {\r\n        this.idx = -1;\r\n        this.metadata = null;\r\n    }\r\n\r\n    isCompeted(): boolean {\r\n        return this.idx >= this.args.length;\r\n    }\r\n\r\n    end() {\r\n        this.idx = this.args.length;\r\n    }\r\n\r\n    next<T>(express: CheckExpress<T>) {\r\n        this.idx++;\r\n        if (this.isCompeted()) {\r\n            return null;\r\n        }\r\n\r\n        let arg = this.args[this.idx];\r\n        if (express.isMetadata && express.isMetadata(arg)) {\r\n            this.metadata = lang.assign(this.metadata || {}, arg);\r\n            this.end();\r\n        } else if (express.match(arg)) {\r\n            this.metadata = this.metadata || {};\r\n            express.setMetadata(this.metadata as T, arg);\r\n        } else if (isMetadataObject(arg)) { // when match failed then check is base metadata.\r\n            this.metadata = lang.assign(this.metadata || {}, arg);\r\n            this.end();\r\n        } else {\r\n            this.end();\r\n        }\r\n    }\r\n\r\n    getArgs() {\r\n        return this.args;\r\n    }\r\n\r\n    getMetadata() {\r\n        return this.metadata;\r\n    }\r\n\n                        static getClassAnnations():any  {\n                            return {\"name\":\"ArgsIterator\",\"params\":{\"constructor\":[\"args\"],\"isCompeted\":[],\"end\":[],\"next\":[\"express\"],\"getArgs\":[],\"getMetadata\":[]}};\n                        }\n                   }\r\n\r\n"]}