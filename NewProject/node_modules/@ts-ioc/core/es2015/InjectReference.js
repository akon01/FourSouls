"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Registration_1 = require("./Registration");
const utils_1 = require("./utils");
/**
 * Reference registration.
 *
 * @export
 * @class RefRegistration
 * @extends {Registration<T>}
 * @template T
 */
class RefRegistration extends Registration_1.Registration {
    constructor(provideType, desc) {
        super(provideType, desc);
        this.type = 'Ref';
    }
    static getClassAnnations() {
        return { "name": "RefRegistration", "params": { "constructor": ["provideType", "desc"] } };
    }
}
exports.RefRegistration = RefRegistration;
/**
 * inject reference.
 *
 * @export
 * @class InjectReference
 * @extends {Registration<T>}
 * @template T
 */
class InjectReference extends Registration_1.Registration {
    constructor(provideType, target) {
        super(provideType, '');
        this.target = target;
    }
    init(provideType) {
        this.classType = this.format(provideType);
    }
    /**
     * to string.
     *
     * @returns {string}
     * @memberof Registration
     */
    toString() {
        let key = super.toString();
        let target = this.format(this.target);
        return `Ref ${key} for ${target}`;
    }
    static getClassAnnations() {
        return { "name": "InjectReference", "params": { "constructor": ["provideType", "target"], "init": ["provideType"], "toString": [] } };
    }
}
exports.InjectReference = InjectReference;
/**
 * is inject reference token or not.
 *
 * @export
 * @template T
 * @param {*} target
 * @returns {target is InjectReference<T>}
 */
function isInjectReference(target) {
    if (!target) {
        return false;
    }
    return target instanceof InjectReference || (utils_1.isString(target) && /^Ref\s+[\w\{\}]+\sfor/.test(target));
}
exports.isInjectReference = isInjectReference;
/**
 * inject class provides token.
 *
 * @export
 * @class InjectClassProvidesToken
 * @extends {RefRegistration<IClassProvides>}
 */
class InjectClassProvidesToken extends RefRegistration {
    constructor(provideType) {
        super(provideType, 'class_provides');
    }
    static getClassAnnations() {
        return { "name": "InjectClassProvidesToken", "params": { "constructor": ["provideType"] } };
    }
}
exports.InjectClassProvidesToken = InjectClassProvidesToken;

//# sourceMappingURL=sourcemaps/InjectReference.js.map
