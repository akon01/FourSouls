{"version":3,"sources":["core/decorators/basic.ts"],"names":[],"mappings":";;AAAA;;;;;;GAMG;AACH,SAAgB,UAAU,CAAC,KAAc;IACrC,OAAO,UAAU,MAAW,EAAE,WAAmB,EAAE,UAA+B;QAC9E,IAAI,UAAU,EAAE;YACZ,UAAU,CAAC,UAAU,GAAG,KAAK,CAAC;SACjC;aAAM;YACH,UAAU,GAAG,MAAM,CAAC,wBAAwB,CAAC,MAAM,EAAE,WAAW,CAAC,IAAI,EAAC,QAAQ,EAAE,IAAI,EAAC,CAAC;YACtF,UAAU,CAAC,UAAU,GAAG,KAAK,CAAC;YAC9B,MAAM,CAAC,cAAc,CAAC,MAAM,EAAE,WAAW,EAAE,UAAU,CAAC,CAAC;SAC1D;IACL,CAAC,CAAC;AACN,CAAC;AAVD,gCAUC;AAED,SAAgB,YAAY,CAAC,KAAc;IACvC,OAAO,UAAU,MAAW,EAAE,WAAmB,EAAE,UAA+B;QAC9E,IAAI,UAAU,EAAE;YACZ,UAAU,CAAC,YAAY,GAAG,KAAK,CAAC;SACnC;aAAM;YACH,UAAU,GAAG,MAAM,CAAC,wBAAwB,CAAC,MAAM,EAAE,WAAW,CAAC,IAAI,EAAC,QAAQ,EAAE,IAAI,EAAC,CAAC;YACtF,UAAU,CAAC,YAAY,GAAG,KAAK,CAAC;YAChC,MAAM,CAAC,cAAc,CAAC,MAAM,EAAE,WAAW,EAAE,UAAU,CAAC,CAAC;SAC1D;IACL,CAAC,CAAC;AACN,CAAC;AAVD,oCAUC;AAED;;;;GAIG;AACH,SAAgB,MAAM,CAAC,WAAqB;IACxC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IACzB,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;AACvC,CAAC;AAHD,wBAGC","file":"../../../core/decorators/basic.js","sourcesContent":["/**\r\n * define the property enumerable of not.\r\n *\r\n * @export\r\n * @param {boolean} value\r\n * @returns\r\n */\r\nexport function enumerable(value: boolean) {\r\n    return function (target: any, propertyKey: string, descriptor?: PropertyDescriptor) {\r\n        if (descriptor) {\r\n            descriptor.enumerable = value;\r\n        } else {\r\n            descriptor = Object.getOwnPropertyDescriptor(target, propertyKey) || {writable: true};\r\n            descriptor.enumerable = value;\r\n            Object.defineProperty(target, propertyKey, descriptor);\r\n        }\r\n    };\r\n}\r\n\r\nexport function configurable(value: boolean) {\r\n    return function (target: any, propertyKey: string, descriptor?: PropertyDescriptor) {\r\n        if (descriptor) {\r\n            descriptor.configurable = value;\r\n        } else {\r\n            descriptor = Object.getOwnPropertyDescriptor(target, propertyKey) || {writable: true};\r\n            descriptor.configurable = value;\r\n            Object.defineProperty(target, propertyKey, descriptor);\r\n        }\r\n    };\r\n}\r\n\r\n/**\r\n * define class is sealed.\r\n *\r\n * @param {Function} constructor\r\n */\r\nexport function sealed(constructor: Function) {\r\n    Object.seal(constructor);\r\n    Object.seal(constructor.prototype);\r\n}\r\n"]}