{"version":3,"sources":["core/actions/BindPropertyTypeAction.ts"],"names":[],"mappings":";;AAAA,uDAAoD;AAEpD,+CAA4C;AAC5C,4CAAmD;AAenD;;;;;;GAMG;AACH,MAAa,sBAAuB,SAAQ,iCAAe;IAEvD;QACI,KAAK,CAAC,yBAAW,CAAC,gBAAgB,CAAC,CAAA;IACvC,CAAC;IAES,OAAO,CAAC,SAAqB,EAAE,IAAgC;QACrE,IAAI,IAAI,CAAC,cAAc,IAAI,IAAI,CAAC,cAAc,KAAK,SAAS,EAAE;YAC1D,OAAO;SACV;QACD,IAAI,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC;QAC3B,IAAI,SAAS,GAAG,SAAS,CAAC,YAAY,EAAE,CAAC;QAEzC,IAAI,MAAM,GAAG,SAAS,CAAC,qBAAqB,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,yBAAW,CAAC,gBAAgB,CAAC,CAAC,CAAC;QAChH,IAAI,IAAI,GAAuB,EAAE,CAAC;QAClC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YAClB,IAAI,YAAY,GAAG,+BAAmB,CAAmB,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;YAE1E,KAAK,IAAI,CAAC,IAAI,YAAY,EAAE;gBACxB,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;aACvC;YACD,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAC7B,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;gBAChB,IAAI,SAAS,CAAC,iBAAiB,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE;oBAC5C,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,EAAE;wBAC3C,SAAS,CAAC,QAAQ,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;qBACrE;iBACJ;gBACD,IAAI,SAAS,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;oBACxC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;wBAC3B,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;qBACjC;iBACJ;YACL,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;IAC3B,CAAC;IAEmB,MAAM,CAAC,iBAAiB;QACpB,OAAO,EAAC,MAAM,EAAC,wBAAwB,EAAC,QAAQ,EAAC,EAAC,aAAa,EAAC,EAAE,EAAC,SAAS,EAAC,CAAC,WAAW,EAAC,MAAM,CAAC,EAAC,EAAC,CAAC;IACxG,CAAC;CACL;AA1CpB,wDA0CoB","file":"../../../core/actions/BindPropertyTypeAction.js","sourcesContent":["import { ActionComposite } from './ActionComposite';\r\nimport { ActionData } from '../ActionData';\r\nimport { CoreActions } from './CoreActions';\r\nimport { getPropertyMetadata } from '../factories';\r\nimport { PropertyMetadata } from '../metadatas';\r\nimport { IContainer } from '../../IContainer';\r\n\r\n/**\r\n * bind property type action data.\r\n *\r\n * @export\r\n * @interface BindPropertyTypeActionData\r\n * @extends {ActionData<PropertyMetadata[]>}\r\n */\r\nexport interface BindPropertyTypeActionData extends ActionData<PropertyMetadata[]> {\r\n\r\n}\r\n\r\n/**\r\n * bind property type action. to get the property autowride token of Type calss.\r\n *\r\n * @export\r\n * @class SetPropAction\r\n * @extends {ActionComposite}\r\n */\r\nexport class BindPropertyTypeAction extends ActionComposite {\r\n\r\n    constructor() {\r\n        super(CoreActions.bindPropertyType)\r\n    }\r\n\r\n    protected working(container: IContainer, data: BindPropertyTypeActionData) {\r\n        if (data.raiseContainer && data.raiseContainer !== container) {\r\n            return;\r\n        }\r\n        let type = data.targetType;\r\n        let lifeScope = container.getLifeScope();\r\n\r\n        let matchs = lifeScope.getPropertyDecorators(type, surm => surm.actions.includes(CoreActions.bindPropertyType));\r\n        let list: PropertyMetadata[] = [];\r\n        matchs.forEach(surm => {\r\n            let propMetadata = getPropertyMetadata<PropertyMetadata>(surm.name, type);\r\n\r\n            for (let n in propMetadata) {\r\n                list = list.concat(propMetadata[n]);\r\n            }\r\n            list = list.filter(n => !!n);\r\n            list.forEach(prop => {\r\n                if (lifeScope.isVaildDependence(prop.provider)) {\r\n                    if (!container.has(prop.provider, prop.alias)) {\r\n                        container.register(container.getToken(prop.provider, prop.alias));\r\n                    }\r\n                }\r\n                if (lifeScope.isVaildDependence(prop.type)) {\r\n                    if (!container.has(prop.type)) {\r\n                        container.register(prop.type);\r\n                    }\r\n                }\r\n            });\r\n        });\r\n\r\n        data.execResult = list;\r\n    }\r\n\n                        static getClassAnnations():any  {\n                            return {\"name\":\"BindPropertyTypeAction\",\"params\":{\"constructor\":[],\"working\":[\"container\",\"data\"]}};\n                        }\n                   }\r\n\r\n"]}