{"version":3,"sources":["IResolver.ts"],"names":[],"mappings":"","file":"../IResolver.js","sourcesContent":["import { Token, Type, InstanceFactory } from './types';\r\nimport { ParamProviders } from './providers';\r\nimport { ResoveWay } from './IContainer';\r\n\r\n/**\r\n * resolver.\r\n *\r\n * @export\r\n * @interface IResolver\r\n */\r\nexport interface IResolver {\r\n    /**\r\n     * has register.\r\n     *\r\n     * @template T\r\n     * @param {Token<T>} key\r\n     * @returns {boolean}\r\n     * @memberof IResolver\r\n     */\r\n    has<T>(key: Token<T>): boolean;\r\n\r\n    /**\r\n     *  has register.\r\n     *\r\n     * @template T\r\n     * @param {Token<T>} key\r\n     * @param {(string|ResoveWay)} aliasOrway\r\n     * @returns {boolean}\r\n     * @memberof IResolver\r\n     */\r\n    has<T>(key: Token<T>, aliasOrway: string | ResoveWay): boolean;\r\n\r\n    /**\r\n     * resolve type instance with token and param provider.\r\n     *\r\n     * @template T\r\n     * @param {Token<T>} token\r\n     * @param {...ParamProviders[]} providers\r\n     * @returns {T}\r\n     * @memberof IResolver\r\n     */\r\n    resolve<T>(token: Token<T>, ...providers: ParamProviders[]): T;\r\n\r\n    /**\r\n     * resolve type instance with token and param provider.\r\n     *\r\n     * @template T\r\n     * @param {Token<T>} token\r\n     * @param {(ResoveWay|ParamProviders)} resway\r\n     * @param {...ParamProviders[]} providers\r\n     * @returns {T}\r\n     * @memberof IResolver\r\n     */\r\n    resolve<T>(token: Token<T>, resway: ResoveWay | ParamProviders, ...providers: ParamProviders[]): T;\r\n}\r\n\r\n/**\r\n * resolver chain interface.\r\n *\r\n * @export\r\n * @interface IResolver\r\n */\r\nexport interface IResolverContainer extends IResolver {\r\n\r\n    readonly size: number;\r\n    /**\r\n     * get token implement class type.\r\n     *\r\n     * @template T\r\n     * @param {Token<T>} token\r\n     * @param {ResoveWay} [resway]\r\n     * @returns {Type<T>}\r\n     * @memberof IResolver\r\n     */\r\n    getTokenImpl<T>(token: Token<T>, resway?: ResoveWay): Type<T>;\r\n\r\n    /**\r\n     * unregister the token\r\n     *\r\n     * @template T\r\n     * @param {Token<T>} token\r\n     * @returns {this}\r\n     * @memberof IResolver\r\n     */\r\n    unregister<T>(token: Token<T>, resway?: ResoveWay): this;\r\n\r\n    /**\r\n     * iterator current resolver.\r\n     *\r\n     * @param {(tk: Token<any>, fac: InstanceFactory<any>, resolvor?: IResolver) => void | boolean} callbackfn if callbackfn return false will break iterator.\r\n     * @memberof IExports\r\n     */\r\n    forEach(callbackfn: (tk: Token<any>, fac: InstanceFactory<any>, resolvor?: IResolver) => void | boolean): void | boolean;\r\n\r\n}\r\n"]}