{"version":3,"sources":["providers/ProviderParser.ts"],"names":[],"mappings":"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","file":"../../providers/ProviderParser.js","sourcesContent":["import { ParamProviders } from './types';\r\nimport {\r\n    isClass, isArray, isFunction, isNumber, isString,\r\n    isUndefined, isNull, isToken, isBaseObject, lang\r\n} from '../utils';\r\nimport { IProviderParser } from './IProviderParser';\r\nimport { IContainer } from '../IContainer';\r\nimport { ProviderMap, isProviderMap, ProviderMapToken } from './ProviderMap';\r\nimport { Provider, ParamProvider } from './Provider';\r\n\r\n/**\r\n * provider matcher. use to find custome providers in resolve.\r\n *\r\n * note: object map provider can not resolve token.\r\n *\r\n * @export\r\n * @class ProviderMatcher\r\n * @implements {IProviderMatcher}\r\n */\r\nexport class ProviderParser implements IProviderParser {\r\n\r\n    constructor(private container: IContainer) {\r\n\r\n    }\r\n\r\n    parse(...providers: ParamProviders[]): ProviderMap {\r\n        if (providers.length === 1 && isProviderMap(providers[0])) {\r\n            return providers[0] as ProviderMap;\r\n        }\r\n        let map = this.container.resolve(ProviderMapToken);\r\n        providers.forEach((p, index) => {\r\n            if (isUndefined(p) || isNull(p)) {\r\n                return;\r\n            }\r\n            if (isProviderMap(p)) {\r\n                map.copy(p);\r\n            } else if (p instanceof Provider) {\r\n                if (p instanceof ParamProvider) {\r\n                    if (!p.type && isNumber(p.index)) {\r\n                        map.add(p.index, (...providers: ParamProviders[]) => p.resolve(this.container, ...providers));\r\n                    } else {\r\n                        map.add(p.type, (...providers: ParamProviders[]) => p.resolve(this.container, ...providers));\r\n                    }\r\n\r\n                } else {\r\n                    map.add(p.type, (...providers: ParamProviders[]) => p.resolve(this.container, ...providers));\r\n                }\r\n            } else if (isClass(p)) {\r\n                if (!this.container.has(p)) {\r\n                    this.container.register(p);\r\n                }\r\n                map.add(p, p);\r\n            } else if (isBaseObject(p)) {\r\n                let pr: any = p;\r\n                let isobjMap = false;\r\n                if (isToken(pr.provide)) {\r\n                    if (isArray(pr.deps) && pr.deps.length) {\r\n                        pr.deps.forEach(d => {\r\n                            if (isClass(d) && !this.container.has(d)) {\r\n                                this.container.register(d);\r\n                            }\r\n                        });\r\n                    }\r\n                    if (!isUndefined(pr.useValue)) {\r\n                        map.add(pr.provide, () => pr.useValue);\r\n                    } else if (isClass(pr.useClass)) {\r\n                        if (!this.container.has(pr.useClass)) {\r\n                            this.container.register(pr.useClass);\r\n                        }\r\n                        map.add(pr.provide, pr.useClass);\r\n                    } else if (isFunction(pr.useFactory)) {\r\n                        map.add(pr.provide, (...providers) => {\r\n                            let args = [];\r\n                            if (isArray(pr.deps) && pr.deps.length) {\r\n                                args = pr.deps.map(d => {\r\n                                    if (isToken(d)) {\r\n                                        return this.container.resolve(d, ...providers);\r\n                                    } else {\r\n                                        return d;\r\n                                    }\r\n                                });\r\n                            }\r\n                            return pr.useFactory.apply(pr, args);\r\n                        });\r\n                    } else if (isToken(pr.useExisting)) {\r\n                        map.add(pr.provide, (...providers) => this.container.resolve(pr.useExisting, ...providers));\r\n                    } else {\r\n                        isobjMap = true;\r\n                    }\r\n                } else {\r\n                    isobjMap = true;\r\n                }\r\n\r\n                if (isobjMap) {\r\n                    lang.forIn<any>(p, (val, name) => {\r\n                        if (name && isString(name)) {\r\n                            // object map can not resolve token. set all fileld as value factory.\r\n                            map.add(name, () => val);\r\n                        }\r\n                    });\r\n                }\r\n\r\n            } else if (isFunction(p)) {\r\n                map.add(name, () => p);\r\n            }\r\n        });\r\n\r\n        return map;\r\n    }\r\n\n                        static getClassAnnations():any  {\n                            return {\"name\":\"ProviderParser\",\"params\":{\"constructor\":[\"container\"],\"parse\":[\"providers\"]}};\n                        }\n                   }\r\n\r\nexport function isProvider(target: any): boolean {\r\n    return isProviderMap(target) || isBaseObject(target) || target instanceof Provider;\r\n}\r\n"]}