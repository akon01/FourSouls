{"version":3,"sources":["core/decorators/AutoRun.ts"],"names":[],"mappings":";;AAAA,4CAAuG;AAEvG,uCAAkE;AAoClE;;;;GAIG;AACU,QAAA,OAAO,GAAsB,sCAA0B,CAAkB,SAAS,EAAE,IAAI,CAAC,EAAE;IACpG,IAAI,CAAC,IAAI,CAAkB;QACvB,UAAU,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,uBAAe,CAAC,GAAG,EAAE,SAAS,CAAC;QACpD,KAAK,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,gBAAQ,CAAC,GAAG,CAAC,IAAI,gBAAQ,CAAC,GAAG,CAAC;QAC9C,WAAW,EAAE,CAAC,QAAQ,EAAE,GAAG,EAAE,EAAE;YAC3B,IAAI,gBAAQ,CAAC,GAAG,CAAC,EAAE;gBACf,QAAQ,CAAC,OAAO,GAAG,GAAG,CAAC;aAC1B;iBAAM;gBACH,QAAQ,CAAC,KAAK,GAAG,GAAG,CAAC;aACxB;QACL,CAAC;KACJ,CAAC,CAAC;AACP,CAAC,EAAE,CAAC,QAAQ,EAAE,EAAE;IACZ,QAAQ,CAAC,SAAS,GAAG,IAAI,CAAC;IAC1B,OAAO,QAAQ,CAAC;AACpB,CAAC,CAAsB,CAAC","file":"../../../core/decorators/AutoRun.js","sourcesContent":["import { IClassMethodDecorator, createClassMethodDecorator, ClassMethodDecorator } from '../factories';\r\nimport { AutorunMetadata } from '../metadatas';\r\nimport { isClassMetadata, isString, isNumber } from '../../utils';\r\n\r\n\r\n/**\r\n * autorun decorator inteface\r\n *\r\n * @export\r\n * @interface IAutorunDecorator\r\n * @extends {IClassMethodDecorator<AutorunMetadata>}\r\n */\r\nexport interface IAutorunDecorator extends IClassMethodDecorator<AutorunMetadata> {\r\n    /**\r\n     * Autorun decorator, for class.  use to define the class auto run (via a method or not) after registered.\r\n     * @Autorun\r\n     *\r\n     * @param {string} [autorun] the special method name when define to class.\r\n     */\r\n    (autorun: string): ClassDecorator;\r\n\r\n    /**\r\n     * Autorun decorator, for method.  use to define the method auto run (via a method or not) after registered.\r\n     * @Autorun\r\n     *\r\n     * @param {string} [autorun] the special method name when define to class.\r\n     */\r\n    (order: number): MethodDecorator;\r\n\r\n    /**\r\n     * Autorun decorator, for class or method. use to define the class auto run (via a method or not) after registered.\r\n     * @Autorun\r\n     *\r\n     * @param {AutorunMetadata} [metadata] metadata map.\r\n     */\r\n    (metadata?: AutorunMetadata): ClassMethodDecorator;\r\n}\r\n\r\n/**\r\n * Autorun decorator, for class or method.  use to define the class auto run (via a method or not) after registered.\r\n *\r\n * @Autorun\r\n */\r\nexport const Autorun: IAutorunDecorator = createClassMethodDecorator<AutorunMetadata>('Autorun', args => {\r\n    args.next<AutorunMetadata>({\r\n        isMetadata: (arg) => isClassMetadata(arg, 'autorun'),\r\n        match: (arg) => isString(arg) || isNumber(arg),\r\n        setMetadata: (metadata, arg) => {\r\n            if (isString(arg)) {\r\n                metadata.autorun = arg;\r\n            } else {\r\n                metadata.order = arg;\r\n            }\r\n        }\r\n    });\r\n}, (metadata) => {\r\n    metadata.singleton = true;\r\n    return metadata;\r\n}) as IAutorunDecorator;\r\n"]}