"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("../utils");
const IContainer_1 = require("../IContainer");
const InjectToken_1 = require("../InjectToken");
// use core-js in browser.
exports.ProviderMapToken = new InjectToken_1.InjectToken('DI_ProviderMap');
/**
 * Provider Map.
 *
 * note: object map provider can not resolve token.
 *
 * @export
 * @class Providers
 */
class ProviderMap extends utils_1.MapBase {
    constructor(container) {
        super();
        this.container = container;
    }
    /**
     * has provide or not.
     *
     * @param {(Token<any> | number)} provide
     * @returns {boolean}
     * @memberof ProviderMap
     */
    has(provide) {
        return this.map.has(this.getTokenKey(provide));
    }
    provides() {
        return this.keys().filter(k => utils_1.isToken(k));
    }
    /**
     * get token key.
     *
     * @param {(Token<any> | number)} token
     * @returns {(SymbolType<any> | number)}
     * @memberof ProviderMap
     */
    getTokenKey(token) {
        if (utils_1.isToken(token)) {
            return this.container.getTokenKey(token);
        }
        return token;
    }
    /**
     * get token factory.
     *
     * @template T
     * @param {(Token<T> | number)} provide
     * @returns {InstanceFactory<T>}
     * @memberof ProviderMap
     */
    get(provide) {
        return this.map.get(this.getTokenKey(provide));
    }
    getTokenImpl(token, resway) {
        return this.container.getTokenImpl(token, resway);
    }
    unregister(token, resway) {
        let key = this.getTokenKey(token);
        if (this.map.has(key)) {
            this.map.delete(key);
        }
        return this;
    }
    /**
     * add and bind token provider.
     *
     * @template T
     * @param {(Token<T> | number)} provide
     * @param {(Token<T> | Factory<T>)} provider
     * @returns {this}
     * @memberof ProviderMap
     */
    add(provide, provider) {
        let key = this.getTokenKey(provide);
        if (utils_1.isUndefined(key)) {
            return this;
        }
        let factory;
        if (utils_1.isToken(provider) && this.container.has(provider)) {
            factory = (...providers) => {
                return this.container.resolve(provider, ...providers);
            };
        }
        else {
            if (utils_1.isFunction(provider)) {
                factory = provider;
            }
            else {
                factory = () => {
                    return provider;
                };
            }
        }
        if (factory) {
            this.map.set(key, factory);
        }
        return this;
    }
    /**
     * resolve instance via provide token.
     *
     * @template T
     * @param {Token<T>} provide
     * @param {...ProviderTypes[]} providers
     * @returns {T}
     * @memberof ProviderMap
     */
    resolve(provide, resway, ...providers) {
        let key = this.getTokenKey(provide);
        let way;
        if (utils_1.isNumber(resway)) {
            way = resway;
        }
        else {
            if (resway) {
                providers.unshift(resway);
            }
            way = IContainer_1.ResoveWay.current;
        }
        if ((way & IContainer_1.ResoveWay.current) && this.map.has(key)) {
            let provider = this.map.get(key);
            return utils_1.isFunction(provider) ? provider(...providers) : null;
        }
        return null;
    }
    forEach(callbackfn) {
        this.map.forEach((fac, key) => {
            !utils_1.isNumber(key) && callbackfn(key, fac, this);
        });
    }
    /**
     * copy provider map.
     *
     * @param {ProviderMap} map
     * @returns
     * @memberof ProviderMap
     */
    copy(map) {
        if (!map) {
            return this;
        }
        this.map.forEach((fac, key) => {
            this.map.set(key, fac);
        });
        return this;
    }
    static getClassAnnations() {
        return { "name": "ProviderMap", "params": { "constructor": ["container"], "has": ["provide"], "provides": [], "getTokenKey": ["token"], "get": ["provide"], "getTokenImpl": ["token", "resway"], "unregister": ["token", "resway"], "add": ["provide", "provider"], "resolve": ["provide", "resway", "providers"], "forEach": ["callbackfn"], "copy": ["map"] } };
    }
}
exports.ProviderMap = ProviderMap;
/**
 * object is provider map or not.
 *
 * @export
 * @param {object} target
 * @returns {target is ProviderMap}
 */
function isProviderMap(target) {
    if (!utils_1.isObject(target)) {
        return false;
    }
    return target instanceof ProviderMap;
}
exports.isProviderMap = isProviderMap;

//# sourceMappingURL=../sourcemaps/providers/ProviderMap.js.map
