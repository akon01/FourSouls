import { Mode, Express } from '../types';
import { GComponent } from './GComponent';
/**
 * null component.
 *
 * @export
 * @class NullComponent
 * @implements {IComponent}
 */
export declare class NullComponent implements GComponent<any> {
    isEmpty(): boolean;
    name: string;
    parent?: any;
    add(action: any): this;
    remove(action: string | any): this;
    find(express: any | Express<any, boolean>, mode?: Mode): any;
    filter(express: Express<any, boolean | void>, mode?: Mode): any[];
    each(express: Express<any, boolean | void>, mode?: Mode): void;
    trans(express: Express<any, boolean | void>): void;
    transAfter(express: Express<any, boolean | void>): void;
    routeUp(express: Express<any, boolean | void>): void;
    equals(node: any): boolean;
    empty(): GComponent<any>;
    static getClassAnnations(): any;
}
/**
 * Null node
 */
export declare const NullNode: GComponent<any>;
