Start Log 

 Player 1 02:26:53 $MATCH:  

 Player 1 02:26:54 $START_GAME:  

 Player 2 02:26:54 $MOVE_TO_TABLE:  

 Player 1 02:26:54 $MOVE_TO_TABLE:  

 Player 1 02:27:01 $FINISH_LOAD:  
{"id":1,"turnPlayerId":2} 

 Player 2 02:27:02 $FINISH_LOAD:  
{"id":2,"turnPlayerId":2} 

 Player 2 02:27:02 $ASSIGN_CHAR_TO_PLAYER:  
{"playerId":1,"charCardId":291,"itemCardId":292} 

 Player 2 02:27:02 $CHOOSE_FOR_EDEN:  
{"playerId":2,"originPlayerId":2} 

 Player 1 02:27:02 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"PLAYER_ADD_ITEM","args":[{"type":0,"number":292}],"result":true,"preventMethod":false,"methodScopeId":291,"scopeIsPlayer":true,"index":1,"originStackId":-1},"isAfterActivation":true,"index":1} 

 Player 2 02:27:02 $DECK_ARRAGMENT:  
{"deckType":5,"arrangement":[176,164,161,155,216,186,184,219,206,181,159,165,212,157,169,192,160,209,150,187,172,215,196,204,208,185,183,147,173,180,207,182,220,151,195,148,218,156,168,203,158,179,177,149,201,162,174,191,175,210,217,167,194,199,202,166,152,190,197,153,211,178,154,171,198,163,214,145,189,146,170,200,193,213,188,205]} 

 Player 2 02:27:06 $EDEN_CHOSEN:  
{"cardId":176,"playerId":2} 

 Player 2 02:27:06 $DECK_ARRAGMENT:  
{"deckType":5,"arrangement":[164,161,155,216,186,184,219,206,181,159,165,212,157,169,192,160,209,150,187,172,215,196,204,208,185,183,147,173,180,207,182,220,151,195,148,218,156,168,203,158,179,177,149,201,162,174,191,175,210,217,167,194,199,202,166,152,190,197,153,211,178,154,171,198,163,214,145,189,146,170,200,193,213,188,205]} 

 Player 2 02:27:06 $FLIP_CARD:  
{"cardId":176} 

 Player 2 02:27:06 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"PLAYER_ADD_ITEM","args":[{"type":0,"number":176}],"result":true,"preventMethod":false,"methodScopeId":283,"scopeIsPlayer":true,"index":1,"originStackId":-1},"isAfterActivation":true,"index":1} 

 Player 2 02:27:06 $ASSIGN_CHAR_TO_PLAYER:  
{"playerId":2,"charCardId":283,"itemCardId":176} 

 Player 2 02:27:06 $DECK_ARRAGMENT:  
{"deckType":1,"arrangement":[37,48,12,14,80,136,81,121,107,62,23,36,18,35,78,90,106,131,75,53,32,94,72,120,66,24,46,114,56,125,98,141,8,16,115,96,59,108,101,128,63,10,13,111,28,93,26,52,58,110,76,38,44,124,82,11,64,7,109,65,91,87,39,139,130,99,132,129,43,73,104,95,45,134,69,29,84,97,79,51,60,138,74,112,25,117,34,71,142,133,105,140,22,21,17,100,55,42,83,77,15,41,20,123,119,31,50,9,54,137,30,61,135,33,70,103,126,88,47,118,40,116,86,92,127,113,67,49,102,27,122,85,57,68,19,89]} 

 Player 2 02:27:06 $DECK_ARRAGMENT:  
{"deckType":2,"arrangement":[224,229,253,247,238,256,235,260,257,228,272,267,263,241,242,258,223,237,261,266,251,268,264,259,230,232,244,255,246,265,276,239,271,231,245,274,273,233,254,250,252,269,226,270,275,240,234,243,249,227,236,248,262,225]} 

 Player 2 02:27:06 $DECK_ARRAGMENT:  
{"deckType":5,"arrangement":[204,193,211,187,180,218,156,199,148,216,162,165,214,206,195,188,192,171,168,146,213,170,186,194,153,182,210,197,205,145,208,196,183,179,209,185,190,215,191,151,184,166,177,163,158,155,212,202,219,172,169,173,152,150,217,207,160,147,149,189,159,181,200,174,198,157,154,201,203,175,164,167,178,161,220]} 

 Player 2 02:27:06 $DRAW_CARD:  
{"deckType":5} 

 Player 2 02:27:06 $FLIP_CARD:  
{"cardId":220} 

 Player 2 02:27:06 $ADD_STORE_CARD:  
{"cardId":220} 

 Player 2 02:27:06 $DRAW_CARD:  
{"deckType":5} 

 Player 2 02:27:06 $FLIP_CARD:  
{"cardId":161} 

 Player 2 02:27:06 $ADD_STORE_CARD:  
{"cardId":161} 

 Player 2 02:27:06 $DRAW_CARD:  
{"deckType":2} 

 Player 2 02:27:06 $FLIP_CARD:  
{"cardId":225} 

 Player 2 02:27:06 $ADD_MONSTER:  
{"monsterPlaceId":1,"monsterId":225} 

 Player 2 02:27:06 $NEW_MONSTER_ON_PLACE:  
{"cardId":225,"monsterPlaceId":1} 

 Player 2 02:27:06 $DRAW_CARD:  
{"deckType":2} 

 Player 2 02:27:06 $DECK_ADD_TO_BOTTOM:  
{"deckType":2,"cardId":262} 

 Player 2 02:27:06 $DRAW_CARD:  
{"deckType":2} 

 Player 2 02:27:07 $FLIP_CARD:  
{"cardId":248} 

 Player 2 02:27:07 $ADD_MONSTER:  
{"monsterPlaceId":2,"monsterId":248} 

 Player 2 02:27:07 $NEW_MONSTER_ON_PLACE:  
{"cardId":248,"monsterPlaceId":2} 

 Player 2 02:27:07 $SET_MONEY:  
{"playerId":1,"numOfCoins":3} 

 Player 2 02:27:07 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"PLAYER_CHANGE_MONEY","args":[{"type":2,"number":3}],"result":null,"preventMethod":false,"methodScopeId":291,"scopeIsPlayer":true,"index":2,"originStackId":-1},"isAfterActivation":true,"index":2} 

 Player 2 02:27:07 $DRAW_CARD:  
{"deckType":1} 

 Player 2 02:27:07 $MOVE_CARD:  
{"moveIndex":1,"cardId":89,"placeID":1,"flipIfFlipped":false,"firstPos":{"x":1,"y":-5,"z":0},"playerId":2,"placeType":"Hand"} 

 Player 1 02:27:07 $MOVE_CARD_END:  
{"moveIndex":1,"cardId":89,"flipIfFlipped":false,"playerId":2} 

 Player 2 02:27:07 $CARD_DRAWN:  
{"playerId":1,"deckType":1,"drawnCardId":89} 

 Player 2 02:27:07 $FLIP_CARD:  
{"cardId":89} 

 Player 2 02:27:07 $FLIP_CARD:  
{"cardId":89} 

 Player 2 02:27:07 $PLAYER_GET_LOOT:  
{"playerId":1,"cardId":89} 

 Player 2 02:27:07 $DRAW_CARD:  
{"deckType":1} 

 Player 2 02:27:07 $MOVE_CARD:  
{"moveIndex":2,"cardId":19,"placeID":1,"flipIfFlipped":false,"firstPos":{"x":1,"y":-5,"z":0},"playerId":2,"placeType":"Hand"} 

 Player 1 02:27:07 $MOVE_CARD_END:  
{"moveIndex":2,"cardId":19,"flipIfFlipped":false,"playerId":2} 

 Player 2 02:27:08 $CARD_DRAWN:  
{"playerId":1,"deckType":1,"drawnCardId":19} 

 Player 2 02:27:08 $FLIP_CARD:  
{"cardId":19} 

 Player 2 02:27:08 $FLIP_CARD:  
{"cardId":19} 

 Player 2 02:27:08 $PLAYER_GET_LOOT:  
{"playerId":1,"cardId":19} 

 Player 2 02:27:08 $DRAW_CARD:  
{"deckType":1} 

 Player 2 02:27:08 $MOVE_CARD:  
{"moveIndex":3,"cardId":68,"placeID":1,"flipIfFlipped":false,"firstPos":{"x":1,"y":-5,"z":0},"playerId":2,"placeType":"Hand"} 

 Player 1 02:27:08 $MOVE_CARD_END:  
{"moveIndex":3,"cardId":68,"flipIfFlipped":false,"playerId":2} 

 Player 2 02:27:08 $CARD_DRAWN:  
{"playerId":1,"deckType":1,"drawnCardId":68} 

 Player 2 02:27:08 $FLIP_CARD:  
{"cardId":68} 

 Player 2 02:27:08 $FLIP_CARD:  
{"cardId":68} 

 Player 2 02:27:08 $PLAYER_GET_LOOT:  
{"playerId":1,"cardId":68} 

 Player 2 02:27:08 $SET_MONEY:  
{"playerId":2,"numOfCoins":3} 

 Player 2 02:27:08 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"PLAYER_CHANGE_MONEY","args":[{"type":2,"number":3}],"result":null,"preventMethod":false,"methodScopeId":283,"scopeIsPlayer":true,"index":3,"originStackId":-1},"isAfterActivation":true,"index":3} 

 Player 2 02:27:08 $DRAW_CARD:  
{"deckType":1} 

 Player 2 02:27:08 $MOVE_CARD:  
{"moveIndex":4,"cardId":57,"placeID":2,"flipIfFlipped":false,"firstPos":{"x":1,"y":-5,"z":0},"playerId":2,"placeType":"Hand"} 

 Player 1 02:27:09 $MOVE_CARD_END:  
{"moveIndex":4,"cardId":57,"flipIfFlipped":false,"playerId":2} 

 Player 2 02:27:09 $CARD_DRAWN:  
{"playerId":2,"deckType":1,"drawnCardId":57} 

 Player 2 02:27:09 $FLIP_CARD:  
{"cardId":57} 

 Player 2 02:27:09 $PLAYER_GET_LOOT:  
{"playerId":2,"cardId":57} 

 Player 2 02:27:09 $DRAW_CARD:  
{"deckType":1} 

 Player 2 02:27:09 $MOVE_CARD:  
{"moveIndex":5,"cardId":85,"placeID":2,"flipIfFlipped":false,"firstPos":{"x":1,"y":-5,"z":0},"playerId":2,"placeType":"Hand"} 

 Player 1 02:27:09 $MOVE_CARD_END:  
{"moveIndex":5,"cardId":85,"flipIfFlipped":false,"playerId":2} 

 Player 2 02:27:09 $CARD_DRAWN:  
{"playerId":2,"deckType":1,"drawnCardId":85} 

 Player 2 02:27:09 $FLIP_CARD:  
{"cardId":85} 

 Player 2 02:27:09 $PLAYER_GET_LOOT:  
{"playerId":2,"cardId":85} 

 Player 2 02:27:09 $DRAW_CARD:  
{"deckType":1} 

 Player 2 02:27:09 $MOVE_CARD:  
{"moveIndex":6,"cardId":122,"placeID":2,"flipIfFlipped":false,"firstPos":{"x":1,"y":-5,"z":0},"playerId":2,"placeType":"Hand"} 

 Player 1 02:27:10 $MOVE_CARD_END:  
{"moveIndex":6,"cardId":122,"flipIfFlipped":false,"playerId":2} 

 Player 2 02:27:10 $CARD_DRAWN:  
{"playerId":2,"deckType":1,"drawnCardId":122} 

 Player 2 02:27:10 $FLIP_CARD:  
{"cardId":122} 

 Player 2 02:27:10 $PLAYER_GET_LOOT:  
{"playerId":2,"cardId":122} 

 Player 2 02:27:10 $GAME_HAS_STARTED:  

 Player 2 02:27:10 $SET_TURN:  
{"playerId":1} 

 Player 2 02:27:10 $START_TURN:  
{"playerId":1} 

 Player 2 02:27:10 $UPDATE_ACTIONS:  

 Player 1 02:27:10 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 02:27:10 $NEXT_STACK_ID:  

 Player 1 02:27:10 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 02:27:10 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 start turn loot"} 

 Player 1 02:27:10 $ADD_TO_STACK:  
{"stackEffect":{"entityId":1,"creatorCardId":291,"turnPlayerCardId":291,"stackEffectType":13}} 

 Player 1 02:27:10 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 start turn loot"} 

 Player 1 02:27:10 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":1,"creatorCardId":291,"turnPlayerCardId":291,"stackEffectType":13}} 

 Player 1 02:27:10 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":0,"_text":"Add StartTurnLoot 1 "}} 

 Player 1 02:27:10 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 02:27:10 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 start turn loot"} 

 Player 1 02:27:10 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":1,"creatorCardId":291,"turnPlayerCardId":291,"stackEffectType":13}} 

 Player 1 02:27:10 $ACTION_MASSAGE_REMOVE:  
{"id":0} 

 Player 1 02:27:10 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":1,"_text":"Response Adding StartTurnLoot 1"},"childOfId":0} 

 Player 1 02:27:10 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":2,"_text":"Wait For Response From Player 1 "},"childOfId":0} 

 Player 1 02:27:10 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 02:27:10 $ACTION_MASSAGE_REMOVE:  
{"id":2} 

 Player 1 02:27:10 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":3,"_text":"Wait For Response From Player 2 "},"childOfId":0} 

 Player 1 02:27:10 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 02:27:10 $GET_REACTION:  
{"playerId":2,"activePlayerId":1} 

 Player 2 02:27:10 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 02:27:10 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 02:27:10 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 start turn loot"} 

 Player 2 02:27:10 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 start turn loot"} 

 Player 2 02:27:10 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 start turn loot"} 

 Player 2 02:27:10 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 start turn loot"} 

 Player 2 02:27:10 $RESPOND_TO:  
{"playerId":1,"stackEffectResponse":false} 

 Player 1 02:27:10 $ACTION_MASSAGE_REMOVE:  
{"id":3} 

 Player 1 02:27:10 $ACTION_MASSAGE_REMOVE:  
{"id":1} 

 Player 1 02:27:10 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":4,"_text":"Resolve StartTurnLoot 1 "}} 

 Player 1 02:27:10 $DRAW_CARD:  
{"deckType":1} 

 Player 1 02:27:11 $MOVE_CARD:  
{"moveIndex":7,"cardId":27,"placeID":1,"flipIfFlipped":false,"firstPos":{"x":1,"y":-5,"z":0},"playerId":1,"placeType":"Hand"} 

 Player 2 02:27:11 $MOVE_CARD_END:  
{"moveIndex":7,"cardId":27,"flipIfFlipped":false,"playerId":1} 

 Player 1 02:27:11 $CARD_DRAWN:  
{"playerId":1,"deckType":1,"drawnCardId":27} 

 Player 1 02:27:11 $FLIP_CARD:  
{"cardId":27} 

 Player 1 02:27:11 $PLAYER_GET_LOOT:  
{"playerId":1,"cardId":27} 

 Player 1 02:27:11 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 start turn loot"} 

 Player 1 02:27:11 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":1,"creatorCardId":291,"turnPlayerCardId":291,"stackEffectType":13}} 

 Player 1 02:27:11 $ACTION_MASSAGE_REMOVE:  
{"id":4} 

 Player 1 02:27:11 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 02:27:11 $REMOVE_SE_VIS_PREV:  
{"stackEffect":{"entityId":1,"creatorCardId":291,"turnPlayerCardId":291,"stackEffectType":13}} 

 Player 1 02:27:11 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":5,"_text":"Remove After Resolve StartTurnLoot 1  "}} 

 Player 1 02:27:11 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 02:27:11 $REMOVE_FROM_STACK:  
{"stackEffect":{"entityId":1,"creatorCardId":291,"turnPlayerCardId":291,"stackEffectType":13}} 

 Player 1 02:27:11 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":6,"_text":"Response Remove After Resolve StartTurnLoot 1"},"childOfId":5} 

 Player 1 02:27:11 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":7,"_text":"Wait For Response From Player 2 "},"childOfId":5} 

 Player 1 02:27:12 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 02:27:12 $GET_REACTION:  
{"playerId":2,"activePlayerId":1} 

 Player 2 02:27:12 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 start turn loot"} 

 Player 2 02:27:12 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 start turn loot"} 

 Player 2 02:27:12 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 start turn loot"} 

 Player 2 02:27:12 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 start turn loot"} 

 Player 2 02:27:12 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 start turn loot"} 

 Player 2 02:27:12 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 start turn loot"} 

 Player 2 02:27:12 $RESPOND_TO:  
{"playerId":1,"stackEffectResponse":false} 

 Player 2 02:27:12 $MOVE_CARD:  
{"moveIndex":8,"cardId":161,"placeID":2,"flipIfFlipped":true,"playerId":2,"placeType":"Hand"} 

 Player 1 02:27:12 $ACTION_MASSAGE_REMOVE:  
{"id":7} 

 Player 1 02:27:12 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":8,"_text":"Wait For Response From Player 1 "},"childOfId":5} 

 Player 1 02:27:12 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 02:27:12 $ACTION_MASSAGE_REMOVE:  
{"id":8} 

 Player 1 02:27:12 $ACTION_MASSAGE_REMOVE:  
{"id":6} 

 Player 1 02:27:12 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":9,"_text":"Stack Was Emptied "}} 

 Player 1 02:27:12 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 02:27:12 $ACTION_MASSAGE_REMOVE:  
{"id":0} 

 Player 1 02:27:12 $ACTION_MASSAGE_REMOVE:  
{"id":1} 

 Player 1 02:27:12 $ACTION_MASSAGE_REMOVE:  
{"id":2} 

 Player 1 02:27:12 $ACTION_MASSAGE_REMOVE:  
{"id":3} 

 Player 1 02:27:12 $ACTION_MASSAGE_REMOVE:  
{"id":4} 

 Player 1 02:27:12 $ACTION_MASSAGE_REMOVE:  
{"id":5} 

 Player 1 02:27:12 $ACTION_MASSAGE_REMOVE:  
{"id":9} 

 Player 1 02:27:12 $MOVE_CARD_END:  
{"moveIndex":8,"cardId":161,"flipIfFlipped":true,"playerId":2} 

 Player 2 02:27:12 $REGISTER_PASSIVE_ITEM:  
{"cardId":161} 

 Player 2 02:27:12 $MOVE_CARD:  
{"moveIndex":9,"cardId":161,"placeID":2,"flipIfFlipped":true,"playerId":2,"placeType":"Desk"} 

 Player 1 02:27:13 $MOVE_CARD_END:  
{"moveIndex":9,"cardId":161,"flipIfFlipped":true,"playerId":2} 

 Player 2 02:27:13 $ADD_AN_ITEM:  
{"playerId":2,"cardId":161,"isReward":true} 

 Player 2 02:27:13 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"PLAYER_ADD_ITEM","args":[{"type":0,"number":161}],"result":true,"preventMethod":false,"methodScopeId":283,"scopeIsPlayer":true,"index":4,"originStackId":-1},"isAfterActivation":true,"index":4} 

 Player 1 02:27:13 $ACTION_MASSAGE_REMOVE:  
{"id":9} 

 Player 1 02:27:14 $ACTION_MASSAGE_REMOVE:  
{"id":5} 

 Player 1 02:27:18 $SHOW_DECISION:  
{"startCardId":291,"endCardId":248} 

 Player 1 02:27:21 $NEXT_STACK_ID:  

 Player 1 02:27:21 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 02:27:21 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1  declared attack on Holy Dinga"} 

 Player 1 02:27:21 $ADD_TO_STACK:  
{"stackEffect":{"entityId":2,"creatorCardId":291,"attackingPlayerCardId":291,"idOfCardBeingAttacked":248,"stackEffectType":4}} 

 Player 1 02:27:21 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1  declared attack on Holy Dinga"} 

 Player 1 02:27:21 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":2,"creatorCardId":291,"attackingPlayerCardId":291,"idOfCardBeingAttacked":248,"stackEffectType":4}} 

 Player 1 02:27:21 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":10,"_text":"Add DeclareAttack 2 "}} 

 Player 1 02:27:21 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 02:27:21 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1  declared attack on Holy Dinga"} 

 Player 1 02:27:21 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":2,"creatorCardId":291,"attackingPlayerCardId":291,"idOfCardBeingAttacked":248,"stackEffectType":4}} 

 Player 1 02:27:21 $ACTION_MASSAGE_REMOVE:  
{"id":10} 

 Player 1 02:27:21 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":11,"_text":"Response Adding DeclareAttack 2"},"childOfId":10} 

 Player 1 02:27:21 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":12,"_text":"Wait For Response From Player 1 "},"childOfId":10} 

 Player 1 02:27:21 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 02:27:21 $ACTION_MASSAGE_REMOVE:  
{"id":12} 

 Player 1 02:27:21 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":13,"_text":"Wait For Response From Player 2 "},"childOfId":10} 

 Player 1 02:27:21 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 02:27:21 $GET_REACTION:  
{"playerId":2,"activePlayerId":1} 

 Player 2 02:27:21 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 02:27:21 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 02:27:22 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1  declared attack on Holy Dinga"} 

 Player 2 02:27:22 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1  declared attack on Holy Dinga"} 

 Player 2 02:27:22 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1  declared attack on Holy Dinga"} 

 Player 2 02:27:22 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1  declared attack on Holy Dinga"} 

 Player 2 02:27:22 $RESPOND_TO:  
{"playerId":1,"stackEffectResponse":false} 

 Player 1 02:27:22 $ACTION_MASSAGE_REMOVE:  
{"id":13} 

 Player 1 02:27:22 $ACTION_MASSAGE_REMOVE:  
{"id":11} 

 Player 1 02:27:22 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":14,"_text":"Resolve DeclareAttack 2 "}} 

 Player 1 02:27:22 $ACTIVATE_PARTICLE_EFFECT:  
{"cardId":248,"particleType":5} 

 Player 1 02:27:22 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"PLAYER_DECLARE_ATTACK","args":[],"result":null,"preventMethod":false,"methodScopeId":291,"scopeIsPlayer":true,"index":2,"originStackId":2},"isAfterActivation":true,"index":2} 

 Player 1 02:27:22 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1  declared attack on Holy Dinga"} 

 Player 1 02:27:22 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":2,"creatorCardId":291,"attackingPlayerCardId":291,"idOfCardBeingAttacked":248,"stackEffectType":4}} 

 Player 1 02:27:22 $ACTION_MASSAGE_REMOVE:  
{"id":14} 

 Player 1 02:27:22 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 02:27:22 $REMOVE_SE_VIS_PREV:  
{"stackEffect":{"entityId":2,"creatorCardId":291,"attackingPlayerCardId":291,"idOfCardBeingAttacked":248,"stackEffectType":4}} 

 Player 1 02:27:22 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":15,"_text":"Remove After Resolve DeclareAttack 2  "}} 

 Player 1 02:27:22 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 02:27:22 $REMOVE_FROM_STACK:  
{"stackEffect":{"entityId":2,"creatorCardId":291,"attackingPlayerCardId":291,"idOfCardBeingAttacked":248,"stackEffectType":4}} 

 Player 1 02:27:22 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":16,"_text":"Response Remove After Resolve DeclareAttack 2"},"childOfId":15} 

 Player 1 02:27:22 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":17,"_text":"Wait For Response From Player 2 "},"childOfId":15} 

 Player 1 02:27:22 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 02:27:22 $GET_REACTION:  
{"playerId":2,"activePlayerId":1} 

 Player 2 02:27:22 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1  declared attack on Holy Dinga"} 

 Player 2 02:27:22 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1  declared attack on Holy Dinga"} 

 Player 2 02:27:22 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1  declared attack on Holy Dinga"} 

 Player 2 02:27:22 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1  declared attack on Holy Dinga"} 

 Player 2 02:27:22 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1  declared attack on Holy Dinga"} 

 Player 2 02:27:22 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1  declared attack on Holy Dinga"} 

 Player 2 02:27:22 $RESPOND_TO:  
{"playerId":1,"stackEffectResponse":false} 

 Player 1 02:27:22 $ACTION_MASSAGE_REMOVE:  
{"id":17} 

 Player 1 02:27:22 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":18,"_text":"Wait For Response From Player 1 "},"childOfId":15} 

 Player 1 02:27:22 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 02:27:22 $ACTION_MASSAGE_REMOVE:  
{"id":18} 

 Player 1 02:27:22 $ACTION_MASSAGE_REMOVE:  
{"id":16} 

 Player 1 02:27:23 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":19,"_text":"Stack Was Emptied "}} 

 Player 1 02:27:23 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 02:27:23 $ACTION_MASSAGE_REMOVE:  
{"id":0} 

 Player 1 02:27:23 $ACTION_MASSAGE_REMOVE:  
{"id":1} 

 Player 1 02:27:23 $ACTION_MASSAGE_REMOVE:  
{"id":2} 

 Player 1 02:27:23 $ACTION_MASSAGE_REMOVE:  
{"id":3} 

 Player 1 02:27:23 $ACTION_MASSAGE_REMOVE:  
{"id":4} 

 Player 1 02:27:23 $ACTION_MASSAGE_REMOVE:  
{"id":5} 

 Player 1 02:27:23 $ACTION_MASSAGE_REMOVE:  
{"id":9} 

 Player 1 02:27:23 $ACTION_MASSAGE_REMOVE:  
{"id":10} 

 Player 1 02:27:23 $ACTION_MASSAGE_REMOVE:  
{"id":14} 

 Player 1 02:27:23 $ACTION_MASSAGE_REMOVE:  
{"id":15} 

 Player 1 02:27:23 $ACTION_MASSAGE_REMOVE:  
{"id":19} 

 Player 1 02:27:24 $ACTION_MASSAGE_REMOVE:  
{"id":19} 

 Player 1 02:27:25 $ACTION_MASSAGE_REMOVE:  
{"id":15} 

 Player 1 02:27:28 $NEXT_STACK_ID:  

 Player 1 02:27:28 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 02:27:28 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against Holy Dinga<Monster>"} 

 Player 1 02:27:28 $ADD_TO_STACK:  
{"stackEffect":{"entityId":3,"creatorCardId":291,"rollingPlayerCardId":291,"stackEffectType":2,"attackedMonsterCardId":248}} 

 Player 1 02:27:28 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against Holy Dinga<Monster>"} 

 Player 1 02:27:28 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":3,"creatorCardId":291,"rollingPlayerCardId":291,"stackEffectType":2,"attackedMonsterCardId":248}} 

 Player 1 02:27:28 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":20,"_text":"Add AttackRoll 3 "}} 

 Player 1 02:27:28 $ROLL_DICE:  
{"playerId":1} 

 Player 2 02:27:28 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 02:27:28 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 02:27:28 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against Holy Dinga<Monster>"} 

 Player 2 02:27:28 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against Holy Dinga<Monster>"} 

 Player 1 02:27:29 $ROLL_DICE_ENDED:  
{"playerId":1,"numberRolled":6} 

 Player 1 02:27:29 $UPDATE_STACK_VIS:  
{"stackId":3,"text":"player rolled 6 vs Holy Dinga<Monster>"} 

 Player 1 02:27:30 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 rolled 6 vs Holy Dinga<Monster>"} 

 Player 1 02:27:30 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 02:27:30 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 rolled 6 vs Holy Dinga<Monster>"} 

 Player 1 02:27:30 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":3,"creatorCardId":291,"numberRolled":6,"rollingPlayerCardId":291,"stackEffectType":2,"attackedMonsterCardId":248}} 

 Player 1 02:27:30 $ACTION_MASSAGE_REMOVE:  
{"id":20} 

 Player 1 02:27:30 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":21,"_text":"Response Adding AttackRoll 3"},"childOfId":20} 

 Player 1 02:27:30 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":22,"_text":"Wait For Response From Player 1 "},"childOfId":20} 

 Player 1 02:27:30 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 02:27:30 $ACTION_MASSAGE_REMOVE:  
{"id":22} 

 Player 1 02:27:30 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":23,"_text":"Wait For Response From Player 2 "},"childOfId":20} 

 Player 1 02:27:30 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 02:27:30 $GET_REACTION:  
{"playerId":2,"activePlayerId":1} 

 Player 2 02:27:30 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against Holy Dinga<Monster>"} 

 Player 2 02:27:30 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against Holy Dinga<Monster>"} 

 Player 2 02:27:30 $RESPOND_TO:  
{"playerId":1,"stackEffectResponse":false} 

 Player 1 02:27:30 $ACTION_MASSAGE_REMOVE:  
{"id":23} 

 Player 1 02:27:30 $ACTION_MASSAGE_REMOVE:  
{"id":21} 

 Player 1 02:27:30 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":24,"_text":"Resolve AttackRoll 3 "}} 

 Player 1 02:27:30 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":25,"_text":"Added 0 to original roll"}} 

 Player 1 02:27:30 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"PLAYER_ROLL_DICE","args":[{"type":2,"number":3},{"type":2,"number":2},{"type":2,"number":3}],"result":null,"preventMethod":false,"methodScopeId":291,"scopeIsPlayer":true,"index":1,"originStackId":3},"isAfterActivation":false,"index":1} 

 Player 1 02:27:30 $NEXT_STACK_ID:  

 Player 1 02:27:30 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 rolled 6 vs Holy Dinga<Monster>"} 

 Player 1 02:27:30 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 rolled 6 vs Holy Dinga<Monster> \n2:Activate Dead Bird effect LookAtPlayerHand<LookAtPlayerHand>"} 

 Player 1 02:27:30 $ADD_TO_STACK:  
{"stackEffect":{"effectCollectedData":null,"entityId":4,"creatorCardId":283,"hasLockingStackEffect":false,"cardActivatorId":2,"cardWithEffectId":161,"effectToDo":{"effectName":"LookAtPlayerHand","cardEffectNum":0,"cardPlayerId":2,"cardId":161,"effctType":0},"isAfterActivation":false,"index":1,"hasDataBeenCollectedYet":false,"stackEffectType":14}} 

 Player 1 02:27:30 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 rolled 6 vs Holy Dinga<Monster> \n2:Activate Dead Bird effect LookAtPlayerHand<LookAtPlayerHand>"} 

 Player 1 02:27:30 $ADD_SE_VIS_PREV:  
{"stackEffect":{"effectCollectedData":null,"entityId":4,"creatorCardId":283,"hasLockingStackEffect":false,"cardActivatorId":2,"cardWithEffectId":161,"effectToDo":{"effectName":"LookAtPlayerHand","cardEffectNum":0,"cardPlayerId":2,"cardId":161,"effctType":0},"isAfterActivation":false,"index":1,"hasDataBeenCollectedYet":false,"stackEffectType":14}} 

 Player 1 02:27:30 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":26,"_text":"Add ActivatePassiveEffect 4 "}} 

 Player 1 02:27:30 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 rolled 6 vs Holy Dinga<Monster> \n2:Activate Dead Bird effect LookAtPlayerHand<LookAtPlayerHand>"} 

 Player 1 02:27:30 $PUT_ON_STACK:  
{"stackEffect":{"effectCollectedData":null,"entityId":4,"creatorCardId":283,"hasLockingStackEffect":false,"cardActivatorId":2,"cardWithEffectId":161,"effectToDo":{"effectName":"LookAtPlayerHand","cardEffectNum":0,"cardPlayerId":2,"cardId":161,"effctType":0},"isAfterActivation":false,"index":1,"hasDataBeenCollectedYet":false,"stackEffectType":14},"playerId":2,"originPlayerId":1} 

 Player 2 02:27:30 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against Holy Dinga<Monster>"} 

 Player 2 02:27:30 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against Holy Dinga<Monster>"} 

 Player 2 02:27:30 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against Holy Dinga<Monster> \n2:Activate Dead Bird "} 

 Player 2 02:27:30 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against Holy Dinga<Monster> \n2:Activate Dead Bird "} 

 Player 2 02:27:30 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against Holy Dinga<Monster> \n2:Activate Dead Bird "} 

 Player 2 02:27:30 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against Holy Dinga<Monster> \n2:Activate Dead Bird "} 

 Player 2 02:27:30 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against Holy Dinga<Monster> \n2:Activate Dead Bird "} 

 Player 2 02:27:30 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against Holy Dinga<Monster> \n2:Activate Dead Bird "} 

 Player 2 02:27:31 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"effectCollectedData":{"effectTargets":[291],"chainEffectsData":[],"methodArgs":[],"isPassive":true,"terminateOriginal":false,"effectCardOwner":283,"effectCardPlayer":283},"entityId":4,"creatorCardId":283,"hasLockingStackEffect":false,"cardActivatorId":2,"cardWithEffectId":161,"effectToDo":{"effectName":"LookAtPlayerHand","cardEffectNum":0,"cardPlayerId":2,"cardId":161,"effctType":0},"isAfterActivation":false,"index":1,"hasDataBeenCollectedYet":true,"stackEffectType":14}} 

 Player 2 02:27:31 $END_PUT_ON_STACK:  
{"playerId":1} 

 Player 1 02:27:31 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 rolled 6 vs Holy Dinga<Monster> \n2:Activate Dead Bird effect LookAtPlayerHand<LookAtPlayerHand>"} 

 Player 1 02:27:31 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 rolled 6 vs Holy Dinga<Monster> \n2:Activate Dead Bird effect LookAtPlayerHand<LookAtPlayerHand>"} 

 Player 1 02:27:31 $ACTION_MASSAGE_REMOVE:  
{"id":26} 

 Player 1 02:27:31 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":27,"_text":"Response Adding ActivatePassiveEffect 4"},"childOfId":26} 

 Player 1 02:27:31 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":28,"_text":"Wait For Response From Player 2 "},"childOfId":26} 

 Player 1 02:27:31 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 02:27:31 $GET_REACTION:  
{"playerId":2,"activePlayerId":1} 

 Player 2 02:27:31 $RESPOND_TO:  
{"playerId":1,"stackEffectResponse":false} 

 Player 1 02:27:31 $ACTION_MASSAGE_REMOVE:  
{"id":28} 

 Player 1 02:27:31 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":29,"_text":"Wait For Response From Player 1 "},"childOfId":26} 

 Player 1 02:27:31 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 02:27:31 $ACTION_MASSAGE_REMOVE:  
{"id":29} 

 Player 1 02:27:31 $ACTION_MASSAGE_REMOVE:  
{"id":27} 

 Player 1 02:27:31 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":30,"_text":"Resolve ActivatePassiveEffect 4 "}} 

 Player 1 02:27:31 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 rolled 6 vs Holy Dinga<Monster> \n2:Activate Dead Bird "} 

 Player 1 02:27:31 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 rolled 6 vs Holy Dinga<Monster> \n2:Activate Dead Bird "} 

 Player 1 02:27:31 $DO_STACK_EFFECT:  
{"originPlayerId":1,"playerId":2,"currentStack":[{"entityId":3,"creatorCardId":291,"numberRolled":6,"rollingPlayerCardId":291,"stackEffectType":2,"attackedMonsterCardId":248},{"effectCollectedData":{"effectTargets":[291],"chainEffectsData":[],"methodArgs":[],"isPassive":true,"terminateOriginal":false,"effectCardOwner":283,"effectCardPlayer":283},"entityId":4,"creatorCardId":283,"hasLockingStackEffect":false,"cardActivatorId":2,"cardWithEffectId":161,"effectToDo":{"effectName":"LookAtPlayerHand","cardEffectNum":0,"cardPlayerId":2,"cardId":161,"effctType":0},"isAfterActivation":false,"index":1,"hasDataBeenCollectedYet":true,"stackEffectType":14}]} 

 Player 2 02:27:31 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against Holy Dinga<Monster> \n2:Activate Dead Bird "} 

 Player 2 02:27:31 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against Holy Dinga<Monster> \n2:Activate Dead Bird "} 

 Player 2 02:27:31 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against Holy Dinga<Monster> \n2:Activate Dead Bird "} 

 Player 2 02:27:31 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against Holy Dinga<Monster> \n2:Activate Dead Bird "} 

 Player 2 02:27:31 $ACTIVATE_PARTICLE_EFFECT:  
{"cardId":161,"particleType":6} 

 Player 1 02:27:33 $ACTION_MASSAGE_REMOVE:  
{"id":25} 

 Player 2 02:27:33 $DISABLE_PARTICLE_EFFECT:  
{"cardId":161,"particleType":6} 

 Player 2 02:27:42 $PLAYER_LOSE_LOOT:  
{"playerId":2,"cardId":283} 

 Player 2 02:27:42 $MOVE_CARD:  
{"moveIndex":10,"cardId":283,"placeID":1,"flipIfFlipped":false,"playerId":2,"placeType":"Hand"} 

 Player 1 02:27:42 $MOVE_CARD_END:  
{"moveIndex":10,"cardId":283,"flipIfFlipped":false,"playerId":2} 

 Player 2 02:27:42 $FLIP_CARD:  
{"cardId":283} 

 Player 2 02:27:42 $PLAYER_GET_LOOT:  
{"playerId":1,"cardId":283} 

 Player 2 02:27:42 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"PLAYER_ROLL_DICE","args":[{"type":2,"number":{"type":2,"number":3}},{"type":2,"number":{"type":2,"number":2}},{"type":2,"number":{"type":2,"number":3}}],"result":null,"preventMethod":false,"methodScopeId":291,"scopeIsPlayer":false,"index":1},"isAfterActivation":false,"index":1} 

 Player 2 02:27:43 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against Holy Dinga<Monster> \n2:Activate Dead Bird "} 

 Player 2 02:27:43 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"effectCollectedData":{"effectTargets":[291],"chainEffectsData":[],"methodArgs":[],"isPassive":true,"terminateOriginal":false,"effectCardOwner":283,"effectCardPlayer":283},"entityId":4,"creatorCardId":283,"hasLockingStackEffect":false,"cardActivatorId":2,"cardWithEffectId":161,"isAfterActivation":false,"index":1,"hasDataBeenCollectedYet":true,"stackEffectType":14}} 

 Player 2 02:27:43 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against Holy Dinga<Monster> \n2:Activate Dead Bird "} 

 Player 2 02:27:43 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against Holy Dinga<Monster> \n2:Activate Dead Bird "} 

 Player 2 02:27:43 $FINISH_DO_STACK_EFFECT:  
{"playerId":1,"newStack":[{"entityId":3,"creatorCardId":291,"numberRolled":6,"rollingPlayerCardId":291,"stackEffectType":2,"attackedMonsterCardId":248},{"effectCollectedData":{"effectTargets":[291],"chainEffectsData":[],"methodArgs":[],"isPassive":true,"terminateOriginal":false,"effectCardOwner":283,"effectCardPlayer":283},"entityId":4,"creatorCardId":283,"hasLockingStackEffect":false,"cardActivatorId":2,"cardWithEffectId":161,"isAfterActivation":false,"index":1,"hasDataBeenCollectedYet":true,"stackEffectType":14}]} 

 Player 1 02:27:43 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 rolled 6 vs Holy Dinga<Monster> \n2:Activate Dead Bird "} 

 Player 1 02:27:43 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 rolled 6 vs Holy Dinga<Monster> \n2:Activate Dead Bird "} 

 Player 1 02:27:43 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 rolled 6 vs Holy Dinga<Monster> \n2:Activate Dead Bird "} 

 Player 1 02:27:43 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 rolled 6 vs Holy Dinga<Monster> \n2:Activate Dead Bird "} 

 Player 1 02:27:43 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 rolled 6 vs Holy Dinga<Monster> \n2:Activate Dead Bird "} 

 Player 1 02:27:43 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 rolled 6 vs Holy Dinga<Monster> \n2:Activate Dead Bird "} 

 Player 1 02:27:43 $ACTION_MASSAGE_REMOVE:  
{"id":30} 

 Player 1 02:27:43 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against Holy Dinga<Monster> \n2:Activate Dead Bird "} 

 Player 1 02:27:43 $REMOVE_SE_VIS_PREV:  
{"stackEffect":{"entityId":3,"creatorCardId":291,"numberRolled":6,"rollingPlayerCardId":291,"stackEffectType":2,"attackedMonsterCardId":248}} 

 Player 1 02:27:43 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against Holy Dinga<Monster> \n2:Activate Dead Bird "} 

 Player 1 02:27:43 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":3,"creatorCardId":291,"numberRolled":6,"rollingPlayerCardId":291,"stackEffectType":2,"attackedMonsterCardId":248}} 

 Player 1 02:27:43 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against Holy Dinga<Monster> \n2:Activate Dead Bird "} 

 Player 1 02:27:43 $ADD_SE_VIS_PREV:  
{"stackEffect":{"effectCollectedData":null,"entityId":4,"creatorCardId":283,"hasLockingStackEffect":false,"cardActivatorId":2,"cardWithEffectId":161,"isAfterActivation":false,"index":1,"hasDataBeenCollectedYet":true,"stackEffectType":14}} 

 Player 1 02:27:43 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against Holy Dinga<Monster> \n2:Activate Dead Bird "} 

 Player 1 02:27:43 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against Holy Dinga<Monster> \n2:Activate Dead Bird "} 

 Player 1 02:27:43 $REPLACE_STACK:  
{"currentStack":[{"entityId":3,"creatorCardId":291,"numberRolled":6,"rollingPlayerCardId":291,"stackEffectType":2,"attackedMonsterCardId":248},{"effectCollectedData":null,"entityId":4,"creatorCardId":283,"hasLockingStackEffect":false,"cardActivatorId":2,"cardWithEffectId":161,"isAfterActivation":false,"index":1,"hasDataBeenCollectedYet":true,"stackEffectType":14}]} 

 Player 1 02:27:43 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against Holy Dinga<Monster>"} 

 Player 1 02:27:43 $REMOVE_SE_VIS_PREV:  
{"stackEffect":{"effectCollectedData":null,"entityId":4,"creatorCardId":283,"hasLockingStackEffect":false,"cardActivatorId":2,"cardWithEffectId":161,"isAfterActivation":false,"index":1,"hasDataBeenCollectedYet":true,"stackEffectType":14}} 

 Player 1 02:27:43 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":31,"_text":"Remove After Resolve ActivatePassiveEffect 4  "}} 

 Player 1 02:27:43 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against Holy Dinga<Monster>"} 

 Player 1 02:27:43 $REMOVE_FROM_STACK:  
{"stackEffect":{"effectCollectedData":null,"entityId":4,"creatorCardId":283,"hasLockingStackEffect":false,"cardActivatorId":2,"cardWithEffectId":161,"isAfterActivation":false,"index":1,"hasDataBeenCollectedYet":true,"stackEffectType":14}} 

 Player 1 02:27:43 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":32,"_text":"Response Remove After Resolve ActivatePassiveEffect 4"},"childOfId":31} 

 Player 1 02:27:43 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":33,"_text":"Wait For Response From Player 1 "},"childOfId":31} 

 Player 1 02:27:43 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 02:27:43 $ACTION_MASSAGE_REMOVE:  
{"id":33} 

 Player 1 02:27:43 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":34,"_text":"Wait For Response From Player 2 "},"childOfId":31} 

 Player 1 02:27:43 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 02:27:43 $GET_REACTION:  
{"playerId":2,"activePlayerId":1} 

 Player 2 02:27:43 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against Holy Dinga<Monster> \n2:Activate Dead Bird "} 

 Player 2 02:27:43 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against Holy Dinga<Monster> \n2:Activate Dead Bird "} 

 Player 2 02:27:43 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against Holy Dinga<Monster> \n2:Activate Dead Bird "} 

 Player 2 02:27:43 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against Holy Dinga<Monster> \n2:Activate Dead Bird "} 

 Player 2 02:27:44 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against Holy Dinga<Monster> \n2:Activate Dead Bird "} 

 Player 2 02:27:44 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against Holy Dinga<Monster> \n2:Activate Dead Bird "} 

 Player 2 02:27:44 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against Holy Dinga<Monster> \n2:Activate Dead Bird "} 

 Player 2 02:27:44 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against Holy Dinga<Monster> \n2:Activate Dead Bird "} 

 Player 2 02:27:44 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against Holy Dinga<Monster> \n2:Activate Dead Bird "} 

 Player 2 02:27:44 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against Holy Dinga<Monster> \n2:Activate Dead Bird "} 

 Player 2 02:27:44 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against Holy Dinga<Monster> \n2:Activate Dead Bird "} 

 Player 2 02:27:44 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against Holy Dinga<Monster> \n2:Activate Dead Bird "} 

 Player 2 02:27:44 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against Holy Dinga<Monster> \n2:Activate Dead Bird "} 

 Player 2 02:27:44 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against Holy Dinga<Monster> \n2:Activate Dead Bird "} 

 Player 2 02:27:44 $RESPOND_TO:  
{"playerId":1,"stackEffectResponse":false} 

 Player 1 02:27:44 $ACTION_MASSAGE_REMOVE:  
{"id":34} 

 Player 1 02:27:44 $ACTION_MASSAGE_REMOVE:  
{"id":32} 

 Player 1 02:27:44 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":35,"_text":"Resolve AttackRoll 3 "}} 

 Player 1 02:27:44 $NEXT_STACK_ID:  

 Player 1 02:27:44 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against Holy Dinga<Monster>"} 

 Player 1 02:27:44 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 02:27:44 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Samson combat damage to Holy Dinga \n2:Player 1 is rolling against Holy Dinga<Monster>"} 

 Player 1 02:27:44 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":5,"creatorCardId":291,"entityToDoDamageCardId":291,"entityToTakeDamageCardId":248,"isMonsterDoDamage":false,"isMonsterTakeDamage":true,"isPlayerDoDamage":false,"stackEffectType":3}} 

 Player 1 02:27:44 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Samson combat damage to Holy Dinga \n2:Player 1 is rolling against Holy Dinga<Monster>"} 

 Player 1 02:27:44 $REMOVE_SE_VIS_PREV:  
{"stackEffect":{"entityId":3,"creatorCardId":291,"numberRolled":6,"rollingPlayerCardId":291,"stackEffectType":2,"attackedMonsterCardId":248}} 

 Player 1 02:27:44 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Samson combat damage to Holy Dinga \n2:Player 1 is rolling against Holy Dinga<Monster>"} 

 Player 1 02:27:44 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":5,"creatorCardId":291,"entityToDoDamageCardId":291,"entityToTakeDamageCardId":248,"isMonsterDoDamage":false,"isMonsterTakeDamage":true,"isPlayerDoDamage":false,"stackEffectType":3}} 

 Player 1 02:27:44 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Samson combat damage to Holy Dinga \n2:Player 1 is rolling against Holy Dinga<Monster>"} 

 Player 1 02:27:44 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":3,"creatorCardId":291,"numberRolled":6,"rollingPlayerCardId":291,"stackEffectType":2,"attackedMonsterCardId":248}} 

 Player 1 02:27:44 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Samson combat damage to Holy Dinga \n2:Player 1 is rolling against Holy Dinga<Monster>"} 

 Player 1 02:27:44 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Samson combat damage to Holy Dinga \n2:Player 1 is rolling against Holy Dinga<Monster>"} 

 Player 1 02:27:44 $REPLACE_STACK:  
{"currentStack":[{"entityId":5,"creatorCardId":291,"entityToDoDamageCardId":291,"entityToTakeDamageCardId":248,"isMonsterDoDamage":false,"isMonsterTakeDamage":true,"isPlayerDoDamage":false,"stackEffectType":3},{"entityId":3,"creatorCardId":291,"numberRolled":6,"rollingPlayerCardId":291,"stackEffectType":2,"attackedMonsterCardId":248}]} 

 Player 1 02:27:44 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"PLAYER_ROLL_DICE","args":[{"type":2,"number":{"type":2,"number":{"type":2,"number":3}}},{"type":2,"number":2},{"type":2,"number":{"type":2,"number":{"type":2,"number":3}}}],"result":null,"preventMethod":false,"methodScopeId":291,"scopeIsPlayer":true,"index":1,"originStackId":3},"isAfterActivation":true,"index":1} 

 Player 1 02:27:44 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Samson combat damage to Holy Dinga \n2:Player 1 is rolling against Holy Dinga<Monster>"} 

 Player 1 02:27:44 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":3,"creatorCardId":291,"numberRolled":6,"rollingPlayerCardId":291,"stackEffectType":2,"attackedMonsterCardId":248}} 

 Player 1 02:27:44 $ACTION_MASSAGE_REMOVE:  
{"id":24} 

 Player 1 02:27:44 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Samson combat damage to Holy Dinga"} 

 Player 1 02:27:44 $REMOVE_SE_VIS_PREV:  
{"stackEffect":{"entityId":3,"creatorCardId":291,"numberRolled":6,"rollingPlayerCardId":291,"stackEffectType":2,"attackedMonsterCardId":248}} 

 Player 1 02:27:44 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":36,"_text":"Remove After Resolve AttackRoll 3  "}} 

 Player 1 02:27:44 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Samson combat damage to Holy Dinga"} 

 Player 1 02:27:44 $REMOVE_FROM_STACK:  
{"stackEffect":{"entityId":3,"creatorCardId":291,"numberRolled":6,"rollingPlayerCardId":291,"stackEffectType":2,"attackedMonsterCardId":248}} 

 Player 1 02:27:45 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":37,"_text":"Response Remove After Resolve AttackRoll 3"},"childOfId":36} 

 Player 1 02:27:45 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":38,"_text":"Wait For Response From Player 1 "},"childOfId":36} 

 Player 1 02:27:45 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 02:27:45 $ACTION_MASSAGE_REMOVE:  
{"id":38} 

 Player 1 02:27:45 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":39,"_text":"Wait For Response From Player 2 "},"childOfId":36} 

 Player 1 02:27:45 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 02:27:45 $GET_REACTION:  
{"playerId":2,"activePlayerId":1} 

 Player 2 02:27:45 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against Holy Dinga<Monster>"} 

 Player 2 02:27:45 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against Holy Dinga<Monster>"} 

 Player 2 02:27:45 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Samson combat damage to Holy Dinga"} 

 Player 2 02:27:45 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Samson combat damage to Holy Dinga"} 

 Player 2 02:27:45 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Samson combat damage to Holy Dinga"} 

 Player 2 02:27:45 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Samson combat damage to Holy Dinga"} 

 Player 2 02:27:45 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Samson combat damage to Holy Dinga"} 

 Player 2 02:27:45 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Samson combat damage to Holy Dinga"} 

 Player 2 02:27:45 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Samson combat damage to Holy Dinga"} 

 Player 2 02:27:45 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Samson combat damage to Holy Dinga"} 

 Player 2 02:27:45 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Samson combat damage to Holy Dinga"} 

 Player 2 02:27:45 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Samson combat damage to Holy Dinga"} 

 Player 2 02:27:45 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Samson combat damage to Holy Dinga \n2:Player 1 is rolling against Holy Dinga<Monster>"} 

 Player 2 02:27:45 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Samson combat damage to Holy Dinga \n2:Player 1 is rolling against Holy Dinga<Monster>"} 

 Player 2 02:27:45 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Samson combat damage to Holy Dinga \n2:Player 1 is rolling against Holy Dinga<Monster>"} 

 Player 2 02:27:45 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Samson combat damage to Holy Dinga \n2:Player 1 is rolling against Holy Dinga<Monster>"} 

 Player 2 02:27:45 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Samson combat damage to Holy Dinga \n2:Player 1 is rolling against Holy Dinga<Monster>"} 

 Player 2 02:27:45 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Samson combat damage to Holy Dinga \n2:Player 1 is rolling against Holy Dinga<Monster>"} 

 Player 2 02:27:45 $RESPOND_TO:  
{"playerId":1,"stackEffectResponse":false} 

 Player 1 02:27:45 $ACTION_MASSAGE_REMOVE:  
{"id":39} 

 Player 1 02:27:45 $ACTION_MASSAGE_REMOVE:  
{"id":37} 

 Player 1 02:27:45 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":40,"_text":"Resolve CombatDamage 5 "}} 

 Player 1 02:27:45 $UPDATE_STACK_VIS:  
{"stackId":5,"text":"Samson will deal 1 combat damage to Holy Dinga"} 

 Player 1 02:27:45 $MONSTER_GET_DAMAGED:  
{"cardId":248,"hpLeft":2,"damageDealerId":291} 

 Player 1 02:27:45 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"MONSTER_GET_HIT","args":[{"type":2,"number":1},{"type":0,"number":291}],"result":null,"preventMethod":false,"methodScopeId":248,"scopeIsPlayer":false,"index":3,"originStackId":-1},"isAfterActivation":true,"index":3} 

 Player 1 02:27:45 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"PLAYER_COMBAT_DAMAGE_GIVEN","args":[{"type":2,"number":1},{"type":2,"number":{"type":2,"number":{"type":2,"number":3}}},{"type":0,"number":291},{"type":0,"number":248}],"result":null,"preventMethod":false,"methodScopeId":291,"scopeIsPlayer":true,"index":4,"originStackId":5},"isAfterActivation":true,"index":4} 

 Player 1 02:27:45 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Samson combat damage to Holy Dinga"} 

 Player 1 02:27:45 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":5,"creatorCardId":291,"entityToDoDamageCardId":291,"entityToTakeDamageCardId":248,"isMonsterDoDamage":false,"isMonsterTakeDamage":true,"isPlayerDoDamage":false,"stackEffectType":3}} 

 Player 1 02:27:46 $ACTION_MASSAGE_REMOVE:  
{"id":40} 

 Player 1 02:27:46 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 02:27:46 $REMOVE_SE_VIS_PREV:  
{"stackEffect":{"entityId":5,"creatorCardId":291,"entityToDoDamageCardId":291,"entityToTakeDamageCardId":248,"isMonsterDoDamage":false,"isMonsterTakeDamage":true,"isPlayerDoDamage":false,"stackEffectType":3}} 

 Player 1 02:27:46 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":41,"_text":"Remove After Resolve CombatDamage 5  "}} 

 Player 1 02:27:46 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 02:27:46 $REMOVE_FROM_STACK:  
{"stackEffect":{"entityId":5,"creatorCardId":291,"entityToDoDamageCardId":291,"entityToTakeDamageCardId":248,"isMonsterDoDamage":false,"isMonsterTakeDamage":true,"isPlayerDoDamage":false,"stackEffectType":3}} 

 Player 1 02:27:46 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":42,"_text":"Response Remove After Resolve CombatDamage 5"},"childOfId":41} 

 Player 1 02:27:46 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":43,"_text":"Wait For Response From Player 2 "},"childOfId":41} 

 Player 1 02:27:46 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 02:27:46 $GET_REACTION:  
{"playerId":2,"activePlayerId":1} 

 Player 1 02:27:46 $ACTION_MASSAGE_REMOVE:  
{"id":31} 

 Player 2 02:27:46 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Samson combat damage to Holy Dinga"} 

 Player 2 02:27:46 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Samson combat damage to Holy Dinga"} 

 Player 2 02:27:46 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Samson combat damage to Holy Dinga"} 

 Player 2 02:27:46 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Samson combat damage to Holy Dinga"} 

 Player 2 02:27:46 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Samson combat damage to Holy Dinga"} 

 Player 2 02:27:46 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Samson combat damage to Holy Dinga"} 

 Player 2 02:27:46 $RESPOND_TO:  
{"playerId":1,"stackEffectResponse":false} 

 Player 1 02:27:46 $ACTION_MASSAGE_REMOVE:  
{"id":43} 

 Player 1 02:27:46 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":44,"_text":"Wait For Response From Player 1 "},"childOfId":41} 

 Player 1 02:27:46 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 02:27:46 $ACTION_MASSAGE_REMOVE:  
{"id":44} 

 Player 1 02:27:46 $ACTION_MASSAGE_REMOVE:  
{"id":42} 

 Player 1 02:27:46 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":45,"_text":"Stack Was Emptied "}} 

 Player 1 02:27:46 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 02:27:46 $ACTION_MASSAGE_REMOVE:  
{"id":0} 

 Player 1 02:27:46 $ACTION_MASSAGE_REMOVE:  
{"id":1} 

 Player 1 02:27:46 $ACTION_MASSAGE_REMOVE:  
{"id":2} 

 Player 1 02:27:46 $ACTION_MASSAGE_REMOVE:  
{"id":3} 

 Player 1 02:27:46 $ACTION_MASSAGE_REMOVE:  
{"id":4} 

 Player 1 02:27:46 $ACTION_MASSAGE_REMOVE:  
{"id":5} 

 Player 1 02:27:46 $ACTION_MASSAGE_REMOVE:  
{"id":9} 

 Player 1 02:27:47 $ACTION_MASSAGE_REMOVE:  
{"id":10} 

 Player 1 02:27:47 $ACTION_MASSAGE_REMOVE:  
{"id":14} 

 Player 1 02:27:47 $ACTION_MASSAGE_REMOVE:  
{"id":15} 

 Player 1 02:27:47 $ACTION_MASSAGE_REMOVE:  
{"id":19} 

 Player 1 02:27:47 $ACTION_MASSAGE_REMOVE:  
{"id":20} 

 Player 1 02:27:47 $ACTION_MASSAGE_REMOVE:  
{"id":24} 

 Player 1 02:27:47 $ACTION_MASSAGE_REMOVE:  
{"id":25} 

 Player 1 02:27:47 $ACTION_MASSAGE_REMOVE:  
{"id":26} 

 Player 1 02:27:47 $ACTION_MASSAGE_REMOVE:  
{"id":30} 

 Player 1 02:27:47 $ACTION_MASSAGE_REMOVE:  
{"id":31} 

 Player 1 02:27:47 $ACTION_MASSAGE_REMOVE:  
{"id":35} 

 Player 1 02:27:47 $ACTION_MASSAGE_REMOVE:  
{"id":36} 

 Player 1 02:27:47 $ACTION_MASSAGE_REMOVE:  
{"id":40} 

 Player 1 02:27:47 $ACTION_MASSAGE_REMOVE:  
{"id":41} 

 Player 1 02:27:47 $ACTION_MASSAGE_REMOVE:  
{"id":45} 

 Player 1 02:27:47 $ACTION_MASSAGE_REMOVE:  
{"id":36} 

 Player 1 02:27:48 $ACTION_MASSAGE_REMOVE:  
{"id":45} 

 Player 1 02:27:48 $ACTION_MASSAGE_REMOVE:  
{"id":41} 

 Player 2 02:28:49 $MATCH: 