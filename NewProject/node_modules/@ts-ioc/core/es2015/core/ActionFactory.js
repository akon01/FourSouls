"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const actions_1 = require("./actions");
const MethodAutorun_1 = require("./actions/MethodAutorun");
/**
 * action factory.
 *
 * @export
 * @class ActionFactory
 */
class ActionFactory {
    /**
     * create action by action type. type in 'CoreActions'
     *
     * @param {string} type
     * @returns {ActionComponent}
     * @memberof ActionFactory
     */
    create(type) {
        let action;
        switch (type) {
            case actions_1.CoreActions.bindParameterType:
                action = new actions_1.BindParameterTypeAction();
                break;
            case actions_1.CoreActions.bindPropertyType:
                action = new actions_1.BindPropertyTypeAction();
                break;
            case actions_1.CoreActions.injectProperty:
                action = new actions_1.InjectPropertyAction();
                break;
            case actions_1.CoreActions.bindProvider:
                action = new actions_1.BindProviderAction();
                break;
            case actions_1.CoreActions.bindParameterProviders:
                action = new actions_1.BindParameterProviderAction();
                break;
            case actions_1.CoreActions.componentInit:
                action = new actions_1.ComponentInitAction();
                break;
            case actions_1.CoreActions.componentBeforeInit:
                action = new actions_1.ComponentBeforeInitAction();
                break;
            case actions_1.CoreActions.componentAfterInit:
                action = new actions_1.ComponentAfterInitAction();
                break;
            case actions_1.CoreActions.cache:
                action = new actions_1.CacheAction();
                break;
            case actions_1.CoreActions.singletion:
                action = new actions_1.SingletionAction();
                break;
            case actions_1.CoreActions.autorun:
                action = new actions_1.AutorunAction();
                break;
            case actions_1.CoreActions.methodAutorun:
                action = new MethodAutorun_1.MethodAutorun();
                break;
            default:
                action = new actions_1.ActionComposite(type);
                break;
        }
        return action;
    }
    static getClassAnnations() {
        return { "name": "ActionFactory", "params": { "create": ["type"] } };
    }
}
exports.ActionFactory = ActionFactory;

//# sourceMappingURL=../sourcemaps/core/ActionFactory.js.map
