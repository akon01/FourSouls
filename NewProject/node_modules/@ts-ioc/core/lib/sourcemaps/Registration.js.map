{"version":3,"sources":["Registration.ts"],"names":[],"mappings":"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","file":"../Registration.js","sourcesContent":["import { Type, AbstractType, Token, SymbolType } from './types';\r\nimport { isClass, isFunction, lang } from './utils';\r\n\r\n\r\n/**\r\n * is registration class or not.\r\n *\r\n * @export\r\n * @param {*} target\r\n * @returns\r\n */\r\nexport function isRegistrationClass(target: any): target is Type<Registration<any>> {\r\n    if (isClass(target)) {\r\n        return (<any>target).isIocRegClass === true;\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * inject token.\r\n * @export\r\n * @class Registration\r\n * @template T\r\n */\r\nexport class Registration<T> {\r\n    static readonly isIocRegClass = true;\r\n    protected type = '';\r\n    protected classType: SymbolType<any>;\r\n    protected desc: string;\r\n    /**\r\n     * Creates an instance of Registration.\r\n     * @param {(Token<T> | Token<any>)} provideType\r\n     * @param {string} desc\r\n     * @memberof Registration\r\n     */\r\n    constructor(provideType: Token<T> | Token<any>, desc: string) {\r\n        this.init(provideType, desc);\r\n    }\r\n\r\n    protected init(provideType: Token<T> | Token<any>, desc?: string) {\r\n        if (provideType instanceof Registration) {\r\n            if (desc) {\r\n                this.classType = provideType.toString();\r\n                this.desc = desc;\r\n            } else {\r\n                this.classType = provideType.getProvide();\r\n                this.desc = provideType.getDesc();\r\n            }\r\n        } else {\r\n            this.classType = provideType;\r\n            this.desc = desc;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * get provide.\r\n     *\r\n     * @returns {SymbolType<any>}\r\n     * @memberof Registration\r\n     */\r\n    getProvide(): SymbolType<any> {\r\n        return this.classType;\r\n    }\r\n\r\n    /**\r\n     * get class.\r\n     *\r\n     * @returns\r\n     * @memberof Registration\r\n     */\r\n    getClass(): Type<T> | AbstractType<T> {\r\n        if (isClass(this.classType)) {\r\n            return this.classType;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * get desc.\r\n     *\r\n     * @returns\r\n     * @memberof Registration\r\n     */\r\n    getDesc() {\r\n        return this.desc;\r\n    }\r\n\r\n    /**\r\n     * to string.\r\n     *\r\n     * @returns {string}\r\n     * @memberof Registration\r\n     */\r\n    toString(): string {\r\n        return this.format(this);\r\n    }\r\n\r\n    protected format(reg: Token<T>): string {\r\n        if (reg instanceof Registration) {\r\n            let name = '';\r\n            if (isFunction(reg.classType)) {\r\n                name = `{${lang.getClassName(reg.classType)}}`;\r\n            }  else if (reg.classType) {\r\n                name = reg.classType.toString();\r\n            }\r\n            return [reg.type, name, reg.desc].filter(n => n).join('_');\r\n        } else if (isFunction(reg)) {\r\n            return `{${lang.getClassName(reg)}}`;\r\n        } else if (reg) {\r\n            return reg.toString();\r\n        }\r\n        return '';\r\n    }\r\n\n                        static getClassAnnations():any  {\n                            return {\"name\":\"Registration\",\"params\":{\"constructor\":[\"provideType\",\"desc\"],\"init\":[\"provideType\",\"desc\"],\"getProvide\":[],\"getClass\":[],\"getDesc\":[],\"toString\":[],\"format\":[\"reg\"]}};\n                        }\n                   }\r\n"]}