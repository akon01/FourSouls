{"version":3,"sources":["core/actions/InjectPropertyAction.ts"],"names":[],"mappings":";;AACA,iDAA8D;AAC9D,+CAA4C;AAC5C,uDAAoD;AACpD,2DAAwD;AACxD,+CAA8C;AAe9C;;;;;;GAMG;AACH,MAAa,oBAAqB,SAAQ,iCAAe;IAErD;QACI,KAAK,CAAC,yBAAW,CAAC,cAAc,CAAC,CAAA;IACrC,CAAC;IAES,OAAO,CAAC,SAAqB,EAAE,IAA8B;QACnE,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;YAClB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,KAAK,yBAAW,CAAC,gBAAgB,CAAC,CAAC,OAAO,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;SAC/F;QAED,IAAI,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE;YAC1D,IAAI,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;YACnC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,IAAI,EAAE,CAAC;YACtC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,GAAG,EAAE,EAAE;gBAClC,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE;oBAC3C,IAAI,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;oBACtF,IAAI,MAAM,GAAG,SAAS,CAAC,GAAG,CAAC,IAAI,iCAAe,CAAC,uBAAW,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;oBAC9E,IAAI,KAAK,KAAK,2BAAc,EAAE;wBAC1B,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,WAAW,EAAE,EAAE,UAAU,EAAE,KAAK,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC;qBAC/F;oBACD,IAAI,MAAM,IAAI,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;wBAC7B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,MAAM,CAAC,OAAO,CAAC,KAAK,EAAE,WAAW,CAAC,CAAC;wBACnE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,IAAI,CAAC;qBAC3C;yBAAM,IAAI,WAAW,IAAI,WAAW,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;wBAC9C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,WAAW,CAAC,OAAO,CAAC,KAAK,EAAE,WAAW,CAAC,CAAC;wBACxE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,IAAI,CAAC;qBAC3C;yBAAM,IAAI,SAAS,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;wBAC7B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,SAAS,CAAC,OAAO,CAAC,KAAK,EAAE,WAAW,CAAC,CAAC;wBACtE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,IAAI,CAAC;qBAC3C;iBACJ;YACL,CAAC,CAAC,CAAC;SACN;IACL,CAAC;IAEmB,MAAM,CAAC,iBAAiB;QACpB,OAAO,EAAC,MAAM,EAAC,sBAAsB,EAAC,QAAQ,EAAC,EAAC,aAAa,EAAC,EAAE,EAAC,SAAS,EAAC,CAAC,WAAW,EAAC,MAAM,CAAC,EAAC,EAAC,CAAC;IACtG,CAAC;CACL;AAvCpB,oDAuCoB","file":"../../../core/actions/InjectPropertyAction.js","sourcesContent":["import { BindPropertyTypeActionData } from './BindPropertyTypeAction';\r\nimport { IContainer, ContainerToken } from '../../IContainer';\r\nimport { CoreActions } from './CoreActions';\r\nimport { ActionComposite } from './ActionComposite';\r\nimport { InjectReference } from '../../InjectReference';\r\nimport { ProviderMap } from '../../providers';\r\nimport { ObjectMap } from '../../types';\r\n\r\n\r\n/**\r\n * inject property action data.\r\n *\r\n * @export\r\n * @interface InjectPropertyActionData\r\n * @extends {BindPropertyTypeActionData}\r\n */\r\nexport interface InjectPropertyActionData extends BindPropertyTypeActionData {\r\n    injecteds?: ObjectMap<boolean>;\r\n}\r\n\r\n/**\r\n * inject property value action, to inject property value for resolve instance.\r\n *\r\n * @export\r\n * @class SetPropAction\r\n * @extends {ActionComposite}\r\n */\r\nexport class InjectPropertyAction extends ActionComposite {\r\n\r\n    constructor() {\r\n        super(CoreActions.injectProperty)\r\n    }\r\n\r\n    protected working(container: IContainer, data: InjectPropertyActionData) {\r\n        if (!data.execResult) {\r\n            this.parent.find(act => act.name === CoreActions.bindPropertyType).execute(container, data);\r\n        }\r\n\r\n        if (data.target && data.execResult && data.execResult.length) {\r\n            let providerMap = data.providerMap;\r\n            data.injecteds = data.injecteds || {};\r\n            data.execResult.forEach((prop, idx) => {\r\n                if (prop && !data.injecteds[prop.propertyKey]) {\r\n                    let token = prop.provider ? container.getToken(prop.provider, prop.alias) : prop.type;\r\n                    let pdrMap = container.get(new InjectReference(ProviderMap, data.targetType));\r\n                    if (token === ContainerToken) {\r\n                        Object.defineProperty(data.target, prop.propertyKey, { enumerable: false, writable: true });\r\n                    }\r\n                    if (pdrMap && pdrMap.has(token)) {\r\n                        data.target[prop.propertyKey] = pdrMap.resolve(token, providerMap);\r\n                        data.injecteds[prop.propertyKey] = true;\r\n                    } else if (providerMap && providerMap.has(token)) {\r\n                        data.target[prop.propertyKey] = providerMap.resolve(token, providerMap);\r\n                        data.injecteds[prop.propertyKey] = true;\r\n                    } else if (container.has(token)) {\r\n                        data.target[prop.propertyKey] = container.resolve(token, providerMap);\r\n                        data.injecteds[prop.propertyKey] = true;\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n\n                        static getClassAnnations():any  {\n                            return {\"name\":\"InjectPropertyAction\",\"params\":{\"constructor\":[],\"working\":[\"container\",\"data\"]}};\n                        }\n                   }\r\n\r\n"]}