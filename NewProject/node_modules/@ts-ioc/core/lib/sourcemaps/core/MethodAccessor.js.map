{"version":3,"sources":["core/MethodAccessor.ts"],"names":[],"mappings":"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","file":"../../core/MethodAccessor.js","sourcesContent":["import { IContainer } from '../IContainer';\r\nimport { IMethodAccessor } from '../IMethodAccessor';\r\nimport { BindParameterProviderActionData, CoreActions, LifeState } from './actions';\r\nimport { isToken, isFunction, lang, isNullOrUndefined } from '../utils';\r\nimport { Type } from '../types';\r\nimport { IParameter } from '../IParameter';\r\nimport { ParamProviders, isProvider } from '../providers';\r\n\r\n/**\r\n * method accessor\r\n *\r\n * @export\r\n * @class MethodAccessor\r\n * @implements {IMethodAccessor}\r\n */\r\nexport class MethodAccessor implements IMethodAccessor {\r\n\r\n    constructor(private container: IContainer) {\r\n\r\n    }\r\n\r\n    async invoke<T>(target: any, propertyKey: string, instance?: any, ...providers: ParamProviders[]): Promise<T> {\r\n\r\n        let targetClass: Type<any>;\r\n        if (isProvider(instance)) {\r\n            providers.unshift(instance);\r\n            instance = undefined;\r\n        }\r\n        if (isToken(target)) {\r\n            if (isNullOrUndefined(instance)) {\r\n                targetClass = this.container.getTokenImpl(target);\r\n                instance = this.container.resolve(target, ...providers);\r\n            } else {\r\n                targetClass = lang.getClass(instance) || this.container.getTokenImpl(target);\r\n            }\r\n            lang.assert(targetClass, target.toString() + ' is not implements by any class.');\r\n        } else {\r\n            targetClass = lang.getClass(target);\r\n            instance = target;\r\n        }\r\n\r\n        lang.assertExp(instance && isFunction(instance[propertyKey]), `type: ${targetClass} has no method ${propertyKey.toString()}.`);\r\n        let actionData = {\r\n            target: instance,\r\n            targetType: targetClass,\r\n            propertyKey: propertyKey,\r\n        } as BindParameterProviderActionData;\r\n        let lifeScope = this.container.getLifeScope();\r\n        lifeScope.execute(actionData, LifeState.onInit, CoreActions.bindParameterProviders);\r\n        providers = providers.concat(actionData.execResult);\r\n\r\n        let parameters = lifeScope.getMethodParameters(targetClass, instance, propertyKey);\r\n\r\n        let paramInstances = await this.createParams(parameters, ...providers);\r\n\r\n        return instance[propertyKey](...paramInstances) as T;\r\n\r\n    }\r\n\r\n    syncInvoke<T>(target: any, propertyKey: string, instance?: any, ...providers: ParamProviders[]): T {\r\n        let targetClass: Type<any>;\r\n        if (isProvider(instance)) {\r\n            providers.unshift(instance);\r\n            instance = undefined;\r\n        }\r\n        if (isToken(target)) {\r\n            targetClass = this.container.getTokenImpl(target);\r\n            lang.assert(targetClass, target.toString() + ' is not implements by any class.');\r\n            if (isNullOrUndefined(instance)) {\r\n                instance = this.container.resolve(target, ...providers);\r\n            }\r\n        } else {\r\n            targetClass = lang.getClass(target);\r\n            instance = target;\r\n        }\r\n        lang.assertExp(instance && isFunction(instance[propertyKey]), `type: ${targetClass} has no method ${propertyKey.toString()}.`);\r\n\r\n        let actionData = {\r\n            target: instance,\r\n            targetType: targetClass,\r\n            propertyKey: propertyKey,\r\n        } as BindParameterProviderActionData;\r\n        let lifeScope = this.container.getLifeScope();\r\n        lifeScope.execute(actionData, LifeState.onInit, CoreActions.bindParameterProviders);\r\n\r\n        providers = providers.concat(actionData.execResult);\r\n        let parameters = lifeScope.getMethodParameters(targetClass, instance, propertyKey);\r\n        let paramInstances = this.createSyncParams(parameters, ...providers);\r\n\r\n        return instance[propertyKey](...paramInstances) as T;\r\n    }\r\n\r\n    createSyncParams(params: IParameter[], ...providers: ParamProviders[]): any[] {\r\n        let providerMap = this.container.getProviderParser().parse(...providers);\r\n        return params.map((param, index) => {\r\n            if (param.name && providerMap.has(param.name)) {\r\n                return providerMap.resolve(param.name);\r\n            } else if (isToken(param.type)) {\r\n                if (providerMap.has(param.type)) {\r\n                    return providerMap.resolve(param.type);\r\n                }\r\n                return this.container.resolve(param.type, providerMap);\r\n            } else {\r\n                return undefined;\r\n            }\r\n        });\r\n    }\r\n\r\n    createParams(params: IParameter[], ...providers: ParamProviders[]): Promise<any[]> {\r\n        let providerMap = this.container.getProviderParser().parse(...providers);\r\n        return Promise.all(params.map((param, index) => {\r\n            if (param.name && providerMap.has(param.name)) {\r\n                return providerMap.resolve(param.name);\r\n            } else if (isToken(param.type)) {\r\n                if (providerMap.has(param.type)) {\r\n                    return providerMap.resolve(param.type);\r\n                }\r\n                return this.container.resolve(param.type, providerMap);\r\n            } else {\r\n                return undefined;\r\n            }\r\n        }));\r\n    }\r\n\n                        static getClassAnnations():any  {\n                            return {\"name\":\"MethodAccessor\",\"params\":{\"constructor\":[\"container\"],\"invoke\":[\"target\",\"propertyKey\",\"instance\",\"providers\"],\"syncInvoke\":[\"target\",\"propertyKey\",\"instance\",\"providers\"],\"createSyncParams\":[\"params\",\"providers\"],\"createParams\":[\"params\",\"providers\"]}};\n                        }\n                   }\r\n"]}