"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("./utils");
/**
 * is registration class or not.
 *
 * @export
 * @param {*} target
 * @returns
 */
function isRegistrationClass(target) {
    if (utils_1.isClass(target)) {
        return target.isIocRegClass === true;
    }
    return false;
}
exports.isRegistrationClass = isRegistrationClass;
/**
 * inject token.
 * @export
 * @class Registration
 * @template T
 */
var Registration = /** @class */ (function () {
    /**
     * Creates an instance of Registration.
     * @param {(Token<T> | Token<any>)} provideType
     * @param {string} desc
     * @memberof Registration
     */
    function Registration(provideType, desc) {
        this.type = '';
        this.init(provideType, desc);
    }
    Registration.prototype.init = function (provideType, desc) {
        if (provideType instanceof Registration) {
            if (desc) {
                this.classType = provideType.toString();
                this.desc = desc;
            }
            else {
                this.classType = provideType.getProvide();
                this.desc = provideType.getDesc();
            }
        }
        else {
            this.classType = provideType;
            this.desc = desc;
        }
    };
    /**
     * get provide.
     *
     * @returns {SymbolType<any>}
     * @memberof Registration
     */
    Registration.prototype.getProvide = function () {
        return this.classType;
    };
    /**
     * get class.
     *
     * @returns
     * @memberof Registration
     */
    Registration.prototype.getClass = function () {
        if (utils_1.isClass(this.classType)) {
            return this.classType;
        }
        return null;
    };
    /**
     * get desc.
     *
     * @returns
     * @memberof Registration
     */
    Registration.prototype.getDesc = function () {
        return this.desc;
    };
    /**
     * to string.
     *
     * @returns {string}
     * @memberof Registration
     */
    Registration.prototype.toString = function () {
        return this.format(this);
    };
    Registration.prototype.format = function (reg) {
        if (reg instanceof Registration) {
            var name_1 = '';
            if (utils_1.isFunction(reg.classType)) {
                name_1 = "{" + utils_1.lang.getClassName(reg.classType) + "}";
            }
            else if (reg.classType) {
                name_1 = reg.classType.toString();
            }
            return [reg.type, name_1, reg.desc].filter(function (n) { return n; }).join('_');
        }
        else if (utils_1.isFunction(reg)) {
            return "{" + utils_1.lang.getClassName(reg) + "}";
        }
        else if (reg) {
            return reg.toString();
        }
        return '';
    };
    Registration.getClassAnnations = function () {
        return { "name": "Registration", "params": { "constructor": ["provideType", "desc"], "init": ["provideType", "desc"], "getProvide": [], "getClass": [], "getDesc": [], "toString": [], "format": ["reg"] } };
    };
    Registration.isIocRegClass = true;
    return Registration;
}());
exports.Registration = Registration;

//# sourceMappingURL=sourcemaps/Registration.js.map
