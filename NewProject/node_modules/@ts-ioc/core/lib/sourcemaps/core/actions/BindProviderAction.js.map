{"version":3,"sources":["core/actions/BindProviderAction.ts"],"names":[],"mappings":"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","file":"../../../core/actions/BindProviderAction.js","sourcesContent":["import { ActionComposite } from './ActionComposite';\r\nimport { ActionData } from '../ActionData';\r\nimport { CoreActions } from './CoreActions';\r\nimport { getOwnTypeMetadata } from '../factories';\r\nimport { IContainer } from '../../IContainer';\r\nimport { Token } from '../../types';\r\nimport { ClassMetadata } from '../metadatas';\r\nimport { InjectClassProvidesToken } from '../../InjectReference';\r\n\r\n/**\r\n * bind provider action data.\r\n *\r\n * @export\r\n * @interface BindProviderActionData\r\n * @extends {ActionData<Token<any>[]>}\r\n */\r\nexport interface BindProviderActionData extends ActionData<Token<any>[]> {\r\n\r\n}\r\n\r\n/**\r\n * bind provider action. for binding a factory to an token.\r\n *\r\n * @export\r\n * @class BindProviderAction\r\n * @extends {ActionComposite}\r\n */\r\nexport class BindProviderAction extends ActionComposite {\r\n\r\n    constructor() {\r\n        super(CoreActions.bindProvider)\r\n    }\r\n\r\n    protected working(container: IContainer, data: BindProviderActionData) {\r\n        let type = data.targetType;\r\n        let raiseContainer = data.raiseContainer;\r\n        let lifeScope = container.getLifeScope();\r\n        let matchs = lifeScope.getClassDecorators(type, surm => surm.actions.includes(CoreActions.bindProvider));\r\n        let clpds = new InjectClassProvidesToken(type);\r\n        // has binding.\r\n        let classPds = raiseContainer.resolveValue(clpds) || { provides: [clpds.toString()], decors: [] };\r\n        if (classPds.decors.length) {\r\n            matchs = matchs.filter(d => classPds.decors.indexOf(d.name) < 0);\r\n        }\r\n\r\n        if (matchs.length < 1) {\r\n            data.execResult = classPds.provides;\r\n            return;\r\n        }\r\n\r\n        matchs.forEach(surm => {\r\n            let metadata = getOwnTypeMetadata<ClassMetadata>(surm.name, type);\r\n            classPds.decors.push(surm.name);\r\n            if (Array.isArray(metadata) && metadata.length > 0) {\r\n                // bind all provider.\r\n                metadata.forEach(c => {\r\n                    if (!c) {\r\n                        return;\r\n                    }\r\n                    if (c.provide) {\r\n                        let provide = raiseContainer.getToken(c.provide, c.alias);\r\n                        classPds.provides.push(provide);\r\n                        raiseContainer.bindProvider(provide, c.type);\r\n                    }\r\n                    if (c.refs && c.refs.target) {\r\n                        raiseContainer.bindRefProvider(c.refs.target,\r\n                            c.refs.provide ? c.refs.provide : c.type,\r\n                            c.type,\r\n                            c.refs.provide ? c.refs.alias : '',\r\n                            tk => classPds.provides.push(tk));\r\n                    }\r\n                    // class private provider.\r\n                    if (c.providers && c.providers.length) {\r\n                        raiseContainer.bindProviders(\r\n                            c.type,\r\n                            refKey => classPds.provides.push(refKey),\r\n                            ...c.providers);\r\n                    }\r\n                });\r\n            }\r\n        });\r\n        raiseContainer.bindProvider(clpds, classPds);\r\n        data.execResult = classPds.provides;\r\n    }\r\n\n                        static getClassAnnations():any  {\n                            return {\"name\":\"BindProviderAction\",\"params\":{\"constructor\":[],\"working\":[\"container\",\"data\"]}};\n                        }\n                   }\r\n\r\n"]}