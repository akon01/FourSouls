{"version":3,"sources":["InjectReference.ts"],"names":[],"mappings":";;;AAAA,+CAA8C;AAE9C,iCAAmC;AAEnC;;;;;;;GAOG;AACH;IAAwC,2CAAe;IACnD,yBAAY,WAAkC,EAAE,IAAY;QAA5D,YACI,kBAAM,WAAW,EAAE,IAAI,CAAC,SAE3B;QADG,KAAI,CAAC,IAAI,GAAG,KAAK,CAAC;;IACtB,CAAC;IAE0B,iCAAiB,GAAxB;QACI,OAAO,EAAC,MAAM,EAAC,iBAAiB,EAAC,QAAQ,EAAC,EAAC,aAAa,EAAC,CAAC,aAAa,EAAC,MAAM,CAAC,EAAC,EAAC,CAAC;IACtF,CAAC;IACN,sBAAC;AAAD,CATnB,AASoB,CAToB,2BAAY,GAShC;AATP,0CAAe;AAW5B;;;;;;;GAOG;AACH;IAAwC,2CAAe;IACnD,yBAAY,WAAqB,EAAU,MAAkB;QAA7D,YACI,kBAAM,WAAW,EAAE,EAAE,CAAC,SACzB;QAF0C,YAAM,GAAN,MAAM,CAAY;;IAE7D,CAAC;IAES,8BAAI,GAAd,UAAe,WAAqB;QAChC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;IAC9C,CAAC;IAED;;;;;OAKG;IACH,kCAAQ,GAAR;QACI,IAAI,GAAG,GAAG,iBAAM,QAAQ,WAAE,CAAC;QAC3B,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;QACrC,OAAO,SAAO,GAAG,aAAQ,MAAQ,CAAC;IACtC,CAAC;IAE0B,iCAAiB,GAAxB;QACI,OAAO,EAAC,MAAM,EAAC,iBAAiB,EAAC,QAAQ,EAAC,EAAC,aAAa,EAAC,CAAC,aAAa,EAAC,QAAQ,CAAC,EAAC,MAAM,EAAC,CAAC,aAAa,CAAC,EAAC,UAAU,EAAC,EAAE,EAAC,EAAC,CAAC;IAC7H,CAAC;IACN,sBAAC;AAAD,CAxBnB,AAwBoB,CAxBoB,2BAAY,GAwBhC;AAxBP,0CAAe;AA0B5B;;;;;;;GAOG;AACH,SAAgB,iBAAiB,CAAI,MAAW;IAC5C,IAAI,CAAC,MAAM,EAAE;QACT,OAAO,KAAK,CAAC;KAChB;IACD,OAAO,MAAM,YAAY,eAAe,IAAI,CAAC,gBAAQ,CAAC,MAAM,CAAC,IAAI,uBAAuB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;AAC3G,CAAC;AALD,8CAKC;AAyBD;;;;;;GAMG;AACH;IAA8C,oDAA+B;IACzE,kCAAY,WAAuB;eAC/B,kBAAM,WAAW,EAAE,gBAAgB,CAAC;IACxC,CAAC;IAE0B,0CAAiB,GAAxB;QACI,OAAO,EAAC,MAAM,EAAC,0BAA0B,EAAC,QAAQ,EAAC,EAAC,aAAa,EAAC,CAAC,aAAa,CAAC,EAAC,EAAC,CAAC;IACxF,CAAC;IACN,+BAAC;AAAD,CARnB,AAQoB,CAR0B,eAAe,GAQzC;AARP,4DAAwB","file":"../InjectReference.js","sourcesContent":["import { Registration } from './Registration';\r\nimport { Token } from './types';\r\nimport { isString } from './utils';\r\n\r\n/**\r\n * Reference registration.\r\n *\r\n * @export\r\n * @class RefRegistration\r\n * @extends {Registration<T>}\r\n * @template T\r\n */\r\nexport class RefRegistration<T> extends Registration<T> {\r\n    constructor(provideType: Token<T> | Token<any>, desc: string) {\r\n        super(provideType, desc);\r\n        this.type = 'Ref';\r\n    }\r\n\n                        static getClassAnnations():any  {\n                            return {\"name\":\"RefRegistration\",\"params\":{\"constructor\":[\"provideType\",\"desc\"]}};\n                        }\n                   }\r\n\r\n/**\r\n * inject reference.\r\n *\r\n * @export\r\n * @class InjectReference\r\n * @extends {Registration<T>}\r\n * @template T\r\n */\r\nexport class InjectReference<T> extends Registration<T> {\r\n    constructor(provideType: Token<T>, private target: Token<any>) {\r\n        super(provideType, '');\r\n    }\r\n\r\n    protected init(provideType: Token<T>) {\r\n        this.classType = this.format(provideType);\r\n    }\r\n\r\n    /**\r\n     * to string.\r\n     *\r\n     * @returns {string}\r\n     * @memberof Registration\r\n     */\r\n    toString(): string {\r\n        let key = super.toString();\r\n        let target = this.format(this.target)\r\n        return `Ref ${key} for ${target}`;\r\n    }\r\n\n                        static getClassAnnations():any  {\n                            return {\"name\":\"InjectReference\",\"params\":{\"constructor\":[\"provideType\",\"target\"],\"init\":[\"provideType\"],\"toString\":[]}};\n                        }\n                   }\r\n\r\n/**\r\n * is inject reference token or not.\r\n *\r\n * @export\r\n * @template T\r\n * @param {*} target\r\n * @returns {target is InjectReference<T>}\r\n */\r\nexport function isInjectReference<T>(target: any): target is InjectReference<T> {\r\n    if (!target) {\r\n        return false;\r\n    }\r\n    return target instanceof InjectReference || (isString(target) && /^Ref\\s+[\\w\\{\\}]+\\sfor/.test(target));\r\n}\r\n\r\n/**\r\n * class provides.\r\n *\r\n * @export\r\n * @interface IClassProvides\r\n */\r\nexport interface IClassProvides {\r\n    /**\r\n     * decorators of class\r\n     *\r\n     * @type {string[]}\r\n     * @memberof IClassProvides\r\n     */\r\n    decors: string[];\r\n    /**\r\n     * provides of class\r\n     *\r\n     * @type {Token<any>[]}\r\n     * @memberof IClassProvides\r\n     */\r\n    provides: Token<any>[];\r\n}\r\n\r\n/**\r\n * inject class provides token.\r\n *\r\n * @export\r\n * @class InjectClassProvidesToken\r\n * @extends {RefRegistration<IClassProvides>}\r\n */\r\nexport class InjectClassProvidesToken extends RefRegistration<IClassProvides> {\r\n    constructor(provideType: Token<any>) {\r\n        super(provideType, 'class_provides')\r\n    }\r\n\n                        static getClassAnnations():any  {\n                            return {\"name\":\"InjectClassProvidesToken\",\"params\":{\"constructor\":[\"provideType\"]}};\n                        }\n                   }\r\n"]}