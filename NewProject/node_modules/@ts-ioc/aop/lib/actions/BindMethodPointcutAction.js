"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var core_1 = require("@ts-ioc/core");
var AopActions_1 = require("./AopActions");
var isValideAspectTarget_1 = require("../isValideAspectTarget");
var access_1 = require("../access");
/**
 * bind method pointcut action.
 *
 * @export
 * @class BindMethodPointcutAction
 * @extends {ActionComposite}
 */
var BindMethodPointcutAction = /** @class */ (function (_super) {
    tslib_1.__extends(BindMethodPointcutAction, _super);
    function BindMethodPointcutAction() {
        return _super.call(this, AopActions_1.AopActions.bindMethodPointcut) || this;
    }
    BindMethodPointcutAction.prototype.working = function (container, data) {
        // aspect class do nothing.
        if (!data.target || !isValideAspectTarget_1.isValideAspectTarget(data.targetType)) {
            return;
        }
        if (!container.hasRegister(access_1.ProxyMethodToken)) {
            return;
        }
        var proxy = container.get(access_1.ProxyMethodToken);
        var target = data.target;
        var targetType = data.targetType;
        var className = core_1.lang.getClassName(targetType);
        var methods = [];
        var decorators = Object.getOwnPropertyDescriptors(targetType.prototype);
        core_1.lang.forIn(decorators, function (item, name) {
            if (name === 'constructor') {
                return;
            }
            methods.push({
                name: name,
                fullName: className + "." + name,
                descriptor: item
            });
        });
        var allmethods = core_1.getParamerterNames(targetType);
        core_1.lang.forIn(allmethods, function (item, name) {
            if (name === 'constructor') {
                return;
            }
            if (core_1.isUndefined(decorators[name])) {
                methods.push({
                    name: name,
                    fullName: className + "." + name
                });
            }
        });
        methods.forEach(function (pointcut) {
            proxy.proceed(target, targetType, pointcut, target['_cache_JoinPoint']);
        });
    };
    BindMethodPointcutAction.getClassAnnations = function () {
        return { "name": "BindMethodPointcutAction", "params": { "constructor": [], "working": ["container", "data"] } };
    };
    return BindMethodPointcutAction;
}(core_1.ActionComposite));
exports.BindMethodPointcutAction = BindMethodPointcutAction;

//# sourceMappingURL=../sourcemaps/actions/BindMethodPointcutAction.js.map
