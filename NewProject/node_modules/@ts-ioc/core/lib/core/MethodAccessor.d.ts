import { IContainer } from '../IContainer';
import { IMethodAccessor } from '../IMethodAccessor';
import { IParameter } from '../IParameter';
import { ParamProviders } from '../providers';
/**
 * method accessor
 *
 * @export
 * @class MethodAccessor
 * @implements {IMethodAccessor}
 */
export declare class MethodAccessor implements IMethodAccessor {
    private container;
    constructor(container: IContainer);
    invoke<T>(target: any, propertyKey: string, instance?: any, ...providers: ParamProviders[]): Promise<T>;
    syncInvoke<T>(target: any, propertyKey: string, instance?: any, ...providers: ParamProviders[]): T;
    createSyncParams(params: IParameter[], ...providers: ParamProviders[]): any[];
    createParams(params: IParameter[], ...providers: ParamProviders[]): Promise<any[]>;
    static getClassAnnations(): any;
}
