{"version":3,"sources":["core/actions/BindParameterTypeAction.ts"],"names":[],"mappings":"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","file":"../../../core/actions/BindParameterTypeAction.js","sourcesContent":["import { ActionComposite } from './ActionComposite';\r\nimport { ActionData } from '../ActionData';\r\nimport { CoreActions } from './CoreActions';\r\nimport { getParamMetadata, getOwnParamMetadata } from '../factories';\r\nimport { ParameterMetadata } from '../metadatas';\r\nimport { IContainer } from '../../IContainer';\r\nimport { Token } from '../../types';\r\nimport { isArray } from '../../utils';\r\n\r\n/**\r\n * bind parameter type action data.\r\n *\r\n * @export\r\n * @interface BindParameterTypeActionData\r\n * @extends {ActionData<Token<any>[]>}\r\n */\r\nexport interface BindParameterTypeActionData extends ActionData<Token<any>[]> {\r\n}\r\n\r\n/**\r\n * bind parameter type action.\r\n *\r\n * @export\r\n * @class BindParameterTypeAction\r\n * @extends {ActionComposite}\r\n */\r\nexport class BindParameterTypeAction extends ActionComposite {\r\n\r\n    constructor() {\r\n        super(CoreActions.bindParameterType)\r\n    }\r\n\r\n    protected working(container: IContainer, data: ActionData<Token<any>[]>) {\r\n        if (data.raiseContainer && data.raiseContainer !== container) {\r\n            return;\r\n        }\r\n        let target = data.target\r\n        let type = data.targetType;\r\n        let propertyKey = data.propertyKey;\r\n        let lifeScope = container.getLifeScope();\r\n        let designParams: Token<any>[];\r\n\r\n        if (target && propertyKey) {\r\n            designParams = Reflect.getMetadata('design:paramtypes', target, propertyKey) || [];\r\n        } else {\r\n            designParams = Reflect.getMetadata('design:paramtypes', type) || [];\r\n        }\r\n\r\n        designParams = designParams.slice(0);\r\n        designParams.forEach(dtype => {\r\n            if (lifeScope.isVaildDependence(dtype)) {\r\n                if (!container.has(dtype)) {\r\n                    container.register(dtype);\r\n                }\r\n            }\r\n        });\r\n\r\n\r\n        let matchs = lifeScope.getParameterDecorators(target || type, propertyKey, surm => surm.actions.includes(CoreActions.bindParameterType));\r\n\r\n        matchs.forEach(surm => {\r\n            let parameters = (target || propertyKey !== 'constructor') ? getParamMetadata<ParameterMetadata>(surm.name, target, propertyKey) : getOwnParamMetadata<ParameterMetadata>(surm.name, type);\r\n            if (isArray(parameters) && parameters.length) {\r\n                parameters.forEach(params => {\r\n                    let parm = (isArray(params) && params.length > 0) ? params[0] : null;\r\n                    if (parm && parm.index >= 0) {\r\n                        if (lifeScope.isVaildDependence(parm.provider)) {\r\n                            if (!container.has(parm.provider, parm.alias)) {\r\n                                container.register(container.getToken(parm.provider, parm.alias));\r\n                            }\r\n                        }\r\n                        if (lifeScope.isVaildDependence(parm.type)) {\r\n                            if (!container.has(parm.type)) {\r\n                                container.register(parm.type);\r\n                            }\r\n                        }\r\n                        let token = parm.provider ? container.getTokenKey(parm.provider, parm.alias) : parm.type;\r\n                        if (token) {\r\n                            designParams[parm.index] = token;\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        });\r\n\r\n\r\n        data.execResult = designParams;\r\n    }\r\n\n                        static getClassAnnations():any  {\n                            return {\"name\":\"BindParameterTypeAction\",\"params\":{\"constructor\":[],\"working\":[\"container\",\"data\"]}};\n                        }\n                   }\r\n\r\n"]}