import { Registration } from './Registration';
import { Token } from './types';
/**
 * Reference registration.
 *
 * @export
 * @class RefRegistration
 * @extends {Registration<T>}
 * @template T
 */
export declare class RefRegistration<T> extends Registration<T> {
    constructor(provideType: Token<T> | Token<any>, desc: string);
    static getClassAnnations(): any;
}
/**
 * inject reference.
 *
 * @export
 * @class InjectReference
 * @extends {Registration<T>}
 * @template T
 */
export declare class InjectReference<T> extends Registration<T> {
    private target;
    constructor(provideType: Token<T>, target: Token<any>);
    protected init(provideType: Token<T>): void;
    /**
     * to string.
     *
     * @returns {string}
     * @memberof Registration
     */
    toString(): string;
    static getClassAnnations(): any;
}
/**
 * is inject reference token or not.
 *
 * @export
 * @template T
 * @param {*} target
 * @returns {target is InjectReference<T>}
 */
export declare function isInjectReference<T>(target: any): target is InjectReference<T>;
/**
 * class provides.
 *
 * @export
 * @interface IClassProvides
 */
export interface IClassProvides {
    /**
     * decorators of class
     *
     * @type {string[]}
     * @memberof IClassProvides
     */
    decors: string[];
    /**
     * provides of class
     *
     * @type {Token<any>[]}
     * @memberof IClassProvides
     */
    provides: Token<any>[];
}
/**
 * inject class provides token.
 *
 * @export
 * @class InjectClassProvidesToken
 * @extends {RefRegistration<IClassProvides>}
 */
export declare class InjectClassProvidesToken extends RefRegistration<IClassProvides> {
    constructor(provideType: Token<any>);
    static getClassAnnations(): any;
}
