Start Log 

 Player 1 01:32:28 $MATCH:  

 Player 1 01:32:29 $START_GAME:  

 Player 1 01:32:29 $MOVE_TO_TABLE:  

 Player 2 01:32:29 $MOVE_TO_TABLE:  

 Player 2 01:32:32 $FINISH_LOAD:  
{"id":2,"turnPlayerId":2} 

 Player 1 01:32:36 $FINISH_LOAD:  
{"id":1,"turnPlayerId":2} 

 Player 2 01:32:36 $CHOOSE_FOR_EDEN:  
{"playerId":1,"originPlayerId":2} 

 Player 1 01:32:36 $DECK_ARRAGMENT:  
{"deckType":5,"arrangement":[220,217,174,219,172,151,152,196,180,178,147,208,169,150,218,158,199,149,148,173,224,157,170,191,198,153,201,216,221,215,197,164,163,193,195,161,166,167,154,194,179,176,202,189,210,204,181,155,159,160,203,214,156,145,186,177,211,223,209,182,213,206,200,192,183,162,205,165,185,187,168,175,184,190,171,222,225,207,188,212,146]} 

 Player 1 01:32:43 $EDEN_CHOSEN:  
{"cardId":219,"playerId":2} 

 Player 2 01:32:43 $DECK_ARRAGMENT:  
{"deckType":5,"arrangement":[220,217,174,172,151,152,196,180,178,147,208,169,150,218,158,199,149,148,173,224,157,170,191,198,153,201,216,221,215,197,164,163,193,195,161,166,167,154,194,179,176,202,189,210,204,181,155,159,160,203,214,156,145,186,177,211,223,209,182,213,206,200,192,183,162,205,165,185,187,168,175,184,190,171,222,225,207,188,212,146]} 

 Player 2 01:32:43 $FLIP_CARD:  
{"cardId":219} 

 Player 2 01:32:43 $ASSIGN_CHAR_TO_PLAYER:  
{"playerId":1,"charCardId":288,"itemCardId":219} 

 Player 2 01:32:43 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"PLAYER_ADD_ITEM","args":[{"type":0,"number":283}],"result":true,"preventMethod":false,"methodScopeId":282,"scopeIsPlayer":true,"index":1,"originStackId":-1},"isAfterActivation":true,"index":1} 

 Player 2 01:32:43 $ASSIGN_CHAR_TO_PLAYER:  
{"playerId":2,"charCardId":282,"itemCardId":283} 

 Player 2 01:32:43 $DECK_ARRAGMENT:  
{"deckType":1,"arrangement":[75,80,104,41,67,133,37,130,140,28,74,109,93,53,136,135,132,51,113,87,91,83,33,62,47,121,97,16,117,124,116,18,27,40,81,111,103,63,118,79,44,90,134,110,8,68,22,29,39,26,58,120,141,100,31,122,137,119,55,49,95,14,131,61,32,129,70,30,10,105,98,78,73,35,115,17,99,23,85,64,46,57,89,59,88,71,52,114,126,34,101,36,76,138,106,15,42,102,48,108,12,13,66,7,21,43,65,24,112,96,82,54,107,86,9,142,69,20,60,56,128,92,139,45,11,77,125,127,94,123,50,25,38,84,19,72]} 

 Player 2 01:32:43 $DECK_ARRAGMENT:  
{"deckType":2,"arrangement":[259,251,232,248,262,234,239,230,236,246,273,258,247,266,277,231,267,272,233,264,250,280,240,235,268,253,255,276,249,281,256,229,265,238,241,263,260,252,243,269,270,278,271,242,228,274,257,244,279,245,275,254,237,261]} 

 Player 2 01:32:43 $DECK_ARRAGMENT:  
{"deckType":5,"arrangement":[153,145,163,193,199,206,155,220,167,157,156,203,211,210,204,161,200,223,190,164,188,149,170,165,158,212,183,216,169,180,189,215,218,196,217,221,186,184,171,205,191,177,174,154,162,159,151,213,181,224,185,225,166,208,182,207,160,152,222,195,173,197,175,150,192,147,201,209,214,148,194,168,146,172,178,179,198,176,202,187]} 

 Player 2 01:32:43 $DRAW_CARD:  
{"deckType":5} 

 Player 2 01:32:43 $FLIP_CARD:  
{"cardId":187} 

 Player 2 01:32:43 $ADD_STORE_CARD:  
{"cardId":187} 

 Player 2 01:32:43 $DRAW_CARD:  
{"deckType":5} 

 Player 2 01:32:43 $FLIP_CARD:  
{"cardId":202} 

 Player 2 01:32:43 $ADD_STORE_CARD:  
{"cardId":202} 

 Player 2 01:32:43 $DRAW_CARD:  
{"deckType":2} 

 Player 2 01:32:43 $FLIP_CARD:  
{"cardId":261} 

 Player 2 01:32:43 $ADD_MONSTER:  
{"monsterPlaceId":1,"monsterId":261} 

 Player 2 01:32:43 $NEW_MONSTER_ON_PLACE:  
{"cardId":261,"monsterPlaceId":1} 

 Player 2 01:32:43 $DRAW_CARD:  
{"deckType":2} 

 Player 2 01:32:43 $FLIP_CARD:  
{"cardId":237} 

 Player 2 01:32:43 $ADD_MONSTER:  
{"monsterPlaceId":2,"monsterId":237} 

 Player 2 01:32:43 $NEW_MONSTER_ON_PLACE:  
{"cardId":237,"monsterPlaceId":2} 

 Player 2 01:32:43 $SET_MONEY:  
{"playerId":1,"numOfCoins":3} 

 Player 2 01:32:43 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"PLAYER_CHANGE_MONEY","args":[{"type":2,"number":3}],"result":null,"preventMethod":false,"methodScopeId":288,"scopeIsPlayer":true,"index":2,"originStackId":-1},"isAfterActivation":true,"index":2} 

 Player 2 01:32:43 $DRAW_CARD:  
{"deckType":1} 

 Player 2 01:32:43 $MOVE_CARD:  
{"moveIndex":1,"cardId":72,"placeID":1,"flipIfFlipped":false,"firstPos":{"x":1,"y":-5,"z":0},"playerId":2,"placeType":"Hand"} 

 Player 1 01:32:43 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"PLAYER_ADD_ITEM","args":[{"type":0,"number":219}],"result":true,"preventMethod":false,"methodScopeId":288,"scopeIsPlayer":true,"index":1,"originStackId":-1},"isAfterActivation":true,"index":1} 

 Player 1 01:32:44 $MOVE_CARD_END:  
{"moveIndex":1,"cardId":72,"flipIfFlipped":false,"playerId":2} 

 Player 2 01:32:44 $CARD_DRAWN:  
{"playerId":1,"deckType":1,"drawnCardId":72} 

 Player 2 01:32:44 $FLIP_CARD:  
{"cardId":72} 

 Player 2 01:32:44 $FLIP_CARD:  
{"cardId":72} 

 Player 2 01:32:44 $PLAYER_GET_LOOT:  
{"playerId":1,"cardId":72} 

 Player 2 01:32:44 $DRAW_CARD:  
{"deckType":1} 

 Player 2 01:32:44 $MOVE_CARD:  
{"moveIndex":2,"cardId":19,"placeID":1,"flipIfFlipped":false,"firstPos":{"x":1,"y":-5,"z":0},"playerId":2,"placeType":"Hand"} 

 Player 1 01:32:44 $MOVE_CARD_END:  
{"moveIndex":2,"cardId":19,"flipIfFlipped":false,"playerId":2} 

 Player 2 01:32:44 $CARD_DRAWN:  
{"playerId":1,"deckType":1,"drawnCardId":19} 

 Player 2 01:32:44 $FLIP_CARD:  
{"cardId":19} 

 Player 2 01:32:44 $FLIP_CARD:  
{"cardId":19} 

 Player 2 01:32:44 $PLAYER_GET_LOOT:  
{"playerId":1,"cardId":19} 

 Player 2 01:32:44 $DRAW_CARD:  
{"deckType":1} 

 Player 2 01:32:44 $MOVE_CARD:  
{"moveIndex":3,"cardId":84,"placeID":1,"flipIfFlipped":false,"firstPos":{"x":1,"y":-5,"z":0},"playerId":2,"placeType":"Hand"} 

 Player 1 01:32:44 $MOVE_CARD_END:  
{"moveIndex":3,"cardId":84,"flipIfFlipped":false,"playerId":2} 

 Player 2 01:32:45 $CARD_DRAWN:  
{"playerId":1,"deckType":1,"drawnCardId":84} 

 Player 2 01:32:45 $FLIP_CARD:  
{"cardId":84} 

 Player 2 01:32:45 $FLIP_CARD:  
{"cardId":84} 

 Player 2 01:32:45 $PLAYER_GET_LOOT:  
{"playerId":1,"cardId":84} 

 Player 2 01:32:45 $SET_MONEY:  
{"playerId":2,"numOfCoins":3} 

 Player 2 01:32:45 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"PLAYER_CHANGE_MONEY","args":[{"type":2,"number":3}],"result":null,"preventMethod":false,"methodScopeId":282,"scopeIsPlayer":true,"index":3,"originStackId":-1},"isAfterActivation":true,"index":3} 

 Player 2 01:32:45 $DRAW_CARD:  
{"deckType":1} 

 Player 2 01:32:45 $MOVE_CARD:  
{"moveIndex":4,"cardId":38,"placeID":2,"flipIfFlipped":false,"firstPos":{"x":1,"y":-5,"z":0},"playerId":2,"placeType":"Hand"} 

 Player 1 01:32:45 $MOVE_CARD_END:  
{"moveIndex":4,"cardId":38,"flipIfFlipped":false,"playerId":2} 

 Player 2 01:32:45 $CARD_DRAWN:  
{"playerId":2,"deckType":1,"drawnCardId":38} 

 Player 2 01:32:45 $FLIP_CARD:  
{"cardId":38} 

 Player 2 01:32:45 $PLAYER_GET_LOOT:  
{"playerId":2,"cardId":38} 

 Player 2 01:32:45 $DRAW_CARD:  
{"deckType":1} 

 Player 2 01:32:45 $MOVE_CARD:  
{"moveIndex":5,"cardId":25,"placeID":2,"flipIfFlipped":false,"firstPos":{"x":1,"y":-5,"z":0},"playerId":2,"placeType":"Hand"} 

 Player 1 01:32:45 $MOVE_CARD_END:  
{"moveIndex":5,"cardId":25,"flipIfFlipped":false,"playerId":2} 

 Player 2 01:32:46 $CARD_DRAWN:  
{"playerId":2,"deckType":1,"drawnCardId":25} 

 Player 2 01:32:46 $FLIP_CARD:  
{"cardId":25} 

 Player 2 01:32:46 $PLAYER_GET_LOOT:  
{"playerId":2,"cardId":25} 

 Player 2 01:32:46 $DRAW_CARD:  
{"deckType":1} 

 Player 2 01:32:46 $MOVE_CARD:  
{"moveIndex":6,"cardId":50,"placeID":2,"flipIfFlipped":false,"firstPos":{"x":1,"y":-5,"z":0},"playerId":2,"placeType":"Hand"} 

 Player 1 01:32:46 $MOVE_CARD_END:  
{"moveIndex":6,"cardId":50,"flipIfFlipped":false,"playerId":2} 

 Player 2 01:32:46 $CARD_DRAWN:  
{"playerId":2,"deckType":1,"drawnCardId":50} 

 Player 2 01:32:46 $FLIP_CARD:  
{"cardId":50} 

 Player 2 01:32:46 $PLAYER_GET_LOOT:  
{"playerId":2,"cardId":50} 

 Player 2 01:32:46 $GAME_HAS_STARTED:  

 Player 2 01:32:46 $SET_TURN:  
{"playerId":2} 

 Player 2 01:32:46 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 2 01:32:46 $NEXT_STACK_ID:  

 Player 2 01:32:46 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 01:32:46 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 start turn loot"} 

 Player 2 01:32:46 $ADD_TO_STACK:  
{"stackEffect":{"entityId":1,"creatorCardId":282,"turnPlayerCardId":282,"stackEffectType":13}} 

 Player 2 01:32:46 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 start turn loot"} 

 Player 2 01:32:46 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":1,"creatorCardId":282,"turnPlayerCardId":282,"stackEffectType":13}} 

 Player 2 01:32:46 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":0,"_text":"Add StartTurnLoot 1 "}} 

 Player 2 01:32:46 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 2 01:32:46 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 start turn loot"} 

 Player 2 01:32:46 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":1,"creatorCardId":282,"turnPlayerCardId":282,"stackEffectType":13}} 

 Player 2 01:32:46 $ACTION_MASSAGE_REMOVE:  
{"id":0} 

 Player 2 01:32:46 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":1,"_text":"Response Adding StartTurnLoot 1"},"childOfId":0} 

 Player 2 01:32:46 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":2,"_text":"Wait For Response From Player 2 "},"childOfId":0} 

 Player 2 01:32:46 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 2 01:32:46 $ACTION_MASSAGE_REMOVE:  
{"id":2} 

 Player 2 01:32:46 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":3,"_text":"Wait For Response From Player 1 "},"childOfId":0} 

 Player 2 01:32:46 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 2 01:32:46 $GET_REACTION:  
{"playerId":1,"activePlayerId":2} 

 Player 1 01:32:46 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 01:32:47 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 01:32:47 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 start turn loot"} 

 Player 1 01:32:47 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 start turn loot"} 

 Player 1 01:32:47 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 start turn loot"} 

 Player 1 01:32:47 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 start turn loot"} 

 Player 1 01:32:47 $RESPOND_TO:  
{"playerId":2,"stackEffectResponse":false} 

 Player 2 01:32:47 $ACTION_MASSAGE_REMOVE:  
{"id":3} 

 Player 2 01:32:47 $ACTION_MASSAGE_REMOVE:  
{"id":1} 

 Player 2 01:32:47 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":4,"_text":"Resolve StartTurnLoot 1 "}} 

 Player 2 01:32:47 $DRAW_CARD:  
{"deckType":1} 

 Player 2 01:32:47 $MOVE_CARD:  
{"moveIndex":7,"cardId":123,"placeID":2,"flipIfFlipped":false,"firstPos":{"x":1,"y":-5,"z":0},"playerId":2,"placeType":"Hand"} 

 Player 1 01:32:47 $MOVE_CARD_END:  
{"moveIndex":7,"cardId":123,"flipIfFlipped":false,"playerId":2} 

 Player 2 01:32:47 $CARD_DRAWN:  
{"playerId":2,"deckType":1,"drawnCardId":123} 

 Player 2 01:32:47 $FLIP_CARD:  
{"cardId":123} 

 Player 2 01:32:47 $PLAYER_GET_LOOT:  
{"playerId":2,"cardId":123} 

 Player 2 01:32:47 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 start turn loot"} 

 Player 2 01:32:47 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":1,"creatorCardId":282,"turnPlayerCardId":282,"stackEffectType":13}} 

 Player 2 01:32:47 $ACTION_MASSAGE_REMOVE:  
{"id":4} 

 Player 2 01:32:47 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 01:32:47 $REMOVE_SE_VIS_PREV:  
{"stackEffect":{"entityId":1,"creatorCardId":282,"turnPlayerCardId":282,"stackEffectType":13}} 

 Player 2 01:32:47 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":5,"_text":"Remove After Resolve StartTurnLoot 1  "}} 

 Player 2 01:32:47 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 01:32:47 $REMOVE_FROM_STACK:  
{"stackEffect":{"entityId":1,"creatorCardId":282,"turnPlayerCardId":282,"stackEffectType":13}} 

 Player 2 01:32:47 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":6,"_text":"Response Remove After Resolve StartTurnLoot 1"},"childOfId":5} 

 Player 2 01:32:47 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":7,"_text":"Wait For Response From Player 1 "},"childOfId":5} 

 Player 2 01:32:47 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 2 01:32:47 $GET_REACTION:  
{"playerId":1,"activePlayerId":2} 

 Player 1 01:32:47 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 start turn loot"} 

 Player 1 01:32:47 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 start turn loot"} 

 Player 1 01:32:47 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 start turn loot"} 

 Player 1 01:32:48 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 start turn loot"} 

 Player 1 01:32:48 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 start turn loot"} 

 Player 1 01:32:48 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 start turn loot"} 

 Player 1 01:32:48 $RESPOND_TO:  
{"playerId":2,"stackEffectResponse":false} 

 Player 2 01:32:48 $ACTION_MASSAGE_REMOVE:  
{"id":7} 

 Player 2 01:32:48 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":8,"_text":"Wait For Response From Player 2 "},"childOfId":5} 

 Player 2 01:32:48 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 2 01:32:48 $ACTION_MASSAGE_REMOVE:  
{"id":8} 

 Player 2 01:32:48 $ACTION_MASSAGE_REMOVE:  
{"id":6} 

 Player 2 01:32:48 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":9,"_text":"Stack Was Emptied "}} 

 Player 2 01:32:48 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 01:32:48 $ACTION_MASSAGE_REMOVE:  
{"id":0} 

 Player 2 01:32:48 $ACTION_MASSAGE_REMOVE:  
{"id":1} 

 Player 2 01:32:48 $ACTION_MASSAGE_REMOVE:  
{"id":2} 

 Player 2 01:32:48 $ACTION_MASSAGE_REMOVE:  
{"id":3} 

 Player 2 01:32:48 $ACTION_MASSAGE_REMOVE:  
{"id":4} 

 Player 2 01:32:48 $ACTION_MASSAGE_REMOVE:  
{"id":5} 

 Player 2 01:32:48 $ACTION_MASSAGE_REMOVE:  
{"id":9} 

 Player 2 01:32:48 $UPDATE_ACTIONS:  

 Player 2 01:32:49 $ACTION_MASSAGE_REMOVE:  
{"id":9} 

 Player 2 01:32:50 $ACTION_MASSAGE_REMOVE:  
{"id":5} 

 Player 2 01:33:00 $SHOW_DECISION:  
{"startCardId":123,"endCardId":123,"flipEndCard":true} 

 Player 2 01:33:03 $NEXT_STACK_ID:  

 Player 2 01:33:03 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 01:33:03 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 play A Sack "} 

 Player 2 01:33:03 $ADD_TO_STACK:  
{"stackEffect":{"entityId":2,"creatorCardId":282,"hasLockingStackEffect":false,"hasLockingStackEffectResolved":false,"lootToPlayCardId":123,"lootPlayerId":2,"hasDataBeenCollectedYet":false,"stackEffectType":8}} 

 Player 2 01:33:03 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 play A Sack "} 

 Player 2 01:33:03 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":2,"creatorCardId":282,"hasLockingStackEffect":false,"hasLockingStackEffectResolved":false,"lootToPlayCardId":123,"lootPlayerId":2,"hasDataBeenCollectedYet":false,"stackEffectType":8}} 

 Player 2 01:33:03 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":10,"_text":"Add PlayLootCardStackEffect 2 "}} 

 Player 2 01:33:03 $PLAYER_LOSE_LOOT:  
{"playerId":2,"cardId":123} 

 Player 2 01:33:03 $MOVE_CARD:  
{"moveIndex":8,"cardId":123,"placeID":300,"flipIfFlipped":true,"playerId":2,"placeType":"Card"} 

 Player 1 01:33:03 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 01:33:03 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 01:33:03 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 play A Sack "} 

 Player 1 01:33:03 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 play A Sack "} 

 Player 1 01:33:03 $MOVE_CARD_END:  
{"moveIndex":8,"cardId":123,"flipIfFlipped":true,"playerId":2} 

 Player 2 01:33:03 $MOVE_CARD_TO_PILE:  
{"type":7,"cardId":123} 

 Player 2 01:33:03 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 play A Sack: GainLoot"} 

 Player 2 01:33:03 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 2 01:33:03 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 play A Sack: GainLoot"} 

 Player 2 01:33:03 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":2,"creatorCardId":282,"hasLockingStackEffect":false,"hasLockingStackEffectResolved":false,"lootToPlayCardId":123,"lootPlayerId":2,"effectToDo":{"effectName":"GainLoot","cardEffectNum":0,"cardPlayerId":2,"cardId":123,"effctType":1},"hasDataBeenCollectedYet":true,"stackEffectType":8}} 

 Player 2 01:33:03 $ACTION_MASSAGE_REMOVE:  
{"id":10} 

 Player 2 01:33:03 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":11,"_text":"Response Adding PlayLootCardStackEffect 2"},"childOfId":10} 

 Player 2 01:33:04 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":12,"_text":"Wait For Response From Player 2 "},"childOfId":10} 

 Player 2 01:33:04 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 2 01:33:04 $ACTION_MASSAGE_REMOVE:  
{"id":12} 

 Player 2 01:33:04 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":13,"_text":"Wait For Response From Player 1 "},"childOfId":10} 

 Player 2 01:33:04 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 2 01:33:04 $GET_REACTION:  
{"playerId":1,"activePlayerId":2} 

 Player 1 01:33:04 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 play A Sack "} 

 Player 1 01:33:04 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 play A Sack "} 

 Player 1 01:33:04 $RESPOND_TO:  
{"playerId":2,"stackEffectResponse":false} 

 Player 2 01:33:04 $ACTION_MASSAGE_REMOVE:  
{"id":13} 

 Player 2 01:33:04 $ACTION_MASSAGE_REMOVE:  
{"id":11} 

 Player 2 01:33:04 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":14,"_text":"Resolve PlayLootCardStackEffect 2 "}} 

 Player 2 01:33:04 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 play A Sack: GainLoot"} 

 Player 2 01:33:04 $ACTIVATE_PARTICLE_EFFECT:  
{"cardId":123,"particleType":6} 

 Player 2 01:33:06 $DISABLE_PARTICLE_EFFECT:  
{"cardId":123,"particleType":6} 

 Player 2 01:33:06 $DRAW_CARD:  
{"deckType":1} 

 Player 2 01:33:06 $MOVE_CARD:  
{"moveIndex":9,"cardId":94,"placeID":2,"flipIfFlipped":false,"firstPos":{"x":1,"y":-5,"z":0},"playerId":2,"placeType":"Hand"} 

 Player 1 01:33:06 $MOVE_CARD_END:  
{"moveIndex":9,"cardId":94,"flipIfFlipped":false,"playerId":2} 

 Player 2 01:33:06 $CARD_DRAWN:  
{"playerId":2,"deckType":1,"drawnCardId":94} 

 Player 2 01:33:06 $FLIP_CARD:  
{"cardId":94} 

 Player 2 01:33:06 $PLAYER_GET_LOOT:  
{"playerId":2,"cardId":94} 

 Player 2 01:33:06 $DRAW_CARD:  
{"deckType":1} 

 Player 2 01:33:06 $MOVE_CARD:  
{"moveIndex":10,"cardId":127,"placeID":2,"flipIfFlipped":false,"firstPos":{"x":1,"y":-5,"z":0},"playerId":2,"placeType":"Hand"} 

 Player 1 01:33:07 $MOVE_CARD_END:  
{"moveIndex":10,"cardId":127,"flipIfFlipped":false,"playerId":2} 

 Player 2 01:33:07 $CARD_DRAWN:  
{"playerId":2,"deckType":1,"drawnCardId":127} 

 Player 2 01:33:07 $FLIP_CARD:  
{"cardId":127} 

 Player 2 01:33:07 $PLAYER_GET_LOOT:  
{"playerId":2,"cardId":127} 

 Player 2 01:33:07 $DRAW_CARD:  
{"deckType":1} 

 Player 2 01:33:07 $MOVE_CARD:  
{"moveIndex":11,"cardId":125,"placeID":2,"flipIfFlipped":false,"firstPos":{"x":1,"y":-5,"z":0},"playerId":2,"placeType":"Hand"} 

 Player 1 01:33:07 $MOVE_CARD_END:  
{"moveIndex":11,"cardId":125,"flipIfFlipped":false,"playerId":2} 

 Player 2 01:33:07 $CARD_DRAWN:  
{"playerId":2,"deckType":1,"drawnCardId":125} 

 Player 2 01:33:07 $FLIP_CARD:  
{"cardId":125} 

 Player 2 01:33:07 $PLAYER_GET_LOOT:  
{"playerId":2,"cardId":125} 

 Player 2 01:33:07 $REMOVE_FROM_PILE:  
{"cardId":123} 

 Player 2 01:33:07 $MOVE_CARD:  
{"moveIndex":12,"cardId":123,"placeID":301,"flipIfFlipped":true,"playerId":2,"placeType":"Card"} 

 Player 1 01:33:08 $MOVE_CARD_END:  
{"moveIndex":12,"cardId":123,"flipIfFlipped":true,"playerId":2} 

 Player 2 01:33:08 $MOVE_CARD_TO_PILE:  
{"type":1,"cardId":123} 

 Player 2 01:33:08 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 play A Sack: GainLoot"} 

 Player 2 01:33:08 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":2,"creatorCardId":282,"hasLockingStackEffect":false,"hasLockingStackEffectResolved":false,"lootToPlayCardId":123,"lootPlayerId":2,"hasDataBeenCollectedYet":true,"stackEffectType":8}} 

 Player 2 01:33:08 $ACTION_MASSAGE_REMOVE:  
{"id":14} 

 Player 2 01:33:08 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 01:33:08 $REMOVE_SE_VIS_PREV:  
{"stackEffect":{"entityId":2,"creatorCardId":282,"hasLockingStackEffect":false,"hasLockingStackEffectResolved":false,"lootToPlayCardId":123,"lootPlayerId":2,"hasDataBeenCollectedYet":true,"stackEffectType":8}} 

 Player 2 01:33:08 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":15,"_text":"Remove After Resolve PlayLootCardStackEffect 2  "}} 

 Player 2 01:33:08 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 01:33:08 $REMOVE_FROM_STACK:  
{"stackEffect":{"entityId":2,"creatorCardId":282,"hasLockingStackEffect":false,"hasLockingStackEffectResolved":false,"lootToPlayCardId":123,"lootPlayerId":2,"hasDataBeenCollectedYet":true,"stackEffectType":8}} 

 Player 2 01:33:08 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":16,"_text":"Response Remove After Resolve PlayLootCardStackEffect 2"},"childOfId":15} 

 Player 2 01:33:08 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":17,"_text":"Wait For Response From Player 1 "},"childOfId":15} 

 Player 2 01:33:08 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 2 01:33:08 $GET_REACTION:  
{"playerId":1,"activePlayerId":2} 

 Player 1 01:33:08 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 play A Sack "} 

 Player 1 01:33:08 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 play A Sack "} 

 Player 1 01:33:08 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 play A Sack "} 

 Player 1 01:33:08 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 play A Sack "} 

 Player 1 01:33:08 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 play A Sack "} 

 Player 1 01:33:08 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 play A Sack "} 

 Player 1 01:33:08 $RESPOND_TO:  
{"playerId":2,"stackEffectResponse":false} 

 Player 2 01:33:08 $ACTION_MASSAGE_REMOVE:  
{"id":17} 

 Player 2 01:33:08 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":18,"_text":"Wait For Response From Player 2 "},"childOfId":15} 

 Player 2 01:33:08 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 2 01:33:08 $ACTION_MASSAGE_REMOVE:  
{"id":18} 

 Player 2 01:33:08 $ACTION_MASSAGE_REMOVE:  
{"id":16} 

 Player 2 01:33:08 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":19,"_text":"Stack Was Emptied "}} 

 Player 2 01:33:08 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 01:33:08 $ACTION_MASSAGE_REMOVE:  
{"id":0} 

 Player 2 01:33:08 $ACTION_MASSAGE_REMOVE:  
{"id":1} 

 Player 2 01:33:08 $ACTION_MASSAGE_REMOVE:  
{"id":2} 

 Player 2 01:33:08 $ACTION_MASSAGE_REMOVE:  
{"id":3} 

 Player 2 01:33:08 $ACTION_MASSAGE_REMOVE:  
{"id":4} 

 Player 2 01:33:08 $ACTION_MASSAGE_REMOVE:  
{"id":5} 

 Player 2 01:33:08 $ACTION_MASSAGE_REMOVE:  
{"id":9} 

 Player 2 01:33:08 $ACTION_MASSAGE_REMOVE:  
{"id":10} 

 Player 2 01:33:08 $ACTION_MASSAGE_REMOVE:  
{"id":14} 

 Player 2 01:33:08 $ACTION_MASSAGE_REMOVE:  
{"id":15} 

 Player 2 01:33:08 $ACTION_MASSAGE_REMOVE:  
{"id":19} 

 Player 2 01:33:10 $ACTION_MASSAGE_REMOVE:  
{"id":19} 

 Player 2 01:33:10 $SHOW_DECISION:  
{"startCardId":282,"endCardId":237} 

 Player 2 01:33:11 $ACTION_MASSAGE_REMOVE:  
{"id":15} 

 Player 2 01:33:13 $NEXT_STACK_ID:  

 Player 2 01:33:13 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 01:33:13 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2  declared attack on Conjoined Fatty"} 

 Player 2 01:33:13 $ADD_TO_STACK:  
{"stackEffect":{"entityId":3,"creatorCardId":282,"attackingPlayerCardId":282,"idOfCardBeingAttacked":237,"stackEffectType":4}} 

 Player 2 01:33:13 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2  declared attack on Conjoined Fatty"} 

 Player 2 01:33:13 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":3,"creatorCardId":282,"attackingPlayerCardId":282,"idOfCardBeingAttacked":237,"stackEffectType":4}} 

 Player 2 01:33:13 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":20,"_text":"Add DeclareAttack 3 "}} 

 Player 2 01:33:13 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 2 01:33:13 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2  declared attack on Conjoined Fatty"} 

 Player 2 01:33:13 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":3,"creatorCardId":282,"attackingPlayerCardId":282,"idOfCardBeingAttacked":237,"stackEffectType":4}} 

 Player 2 01:33:13 $ACTION_MASSAGE_REMOVE:  
{"id":20} 

 Player 2 01:33:13 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":21,"_text":"Response Adding DeclareAttack 3"},"childOfId":20} 

 Player 2 01:33:13 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":22,"_text":"Wait For Response From Player 2 "},"childOfId":20} 

 Player 2 01:33:13 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 2 01:33:13 $ACTION_MASSAGE_REMOVE:  
{"id":22} 

 Player 2 01:33:13 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":23,"_text":"Wait For Response From Player 1 "},"childOfId":20} 

 Player 2 01:33:13 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 2 01:33:13 $GET_REACTION:  
{"playerId":1,"activePlayerId":2} 

 Player 1 01:33:13 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 01:33:13 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 01:33:14 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2  declared attack on Conjoined Fatty"} 

 Player 1 01:33:14 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2  declared attack on Conjoined Fatty"} 

 Player 1 01:33:14 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2  declared attack on Conjoined Fatty"} 

 Player 1 01:33:14 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2  declared attack on Conjoined Fatty"} 

 Player 1 01:33:14 $RESPOND_TO:  
{"playerId":2,"stackEffectResponse":false} 

 Player 2 01:33:14 $ACTION_MASSAGE_REMOVE:  
{"id":23} 

 Player 2 01:33:14 $ACTION_MASSAGE_REMOVE:  
{"id":21} 

 Player 2 01:33:14 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":24,"_text":"Resolve DeclareAttack 3 "}} 

 Player 2 01:33:14 $ACTIVATE_PARTICLE_EFFECT:  
{"cardId":237,"particleType":5} 

 Player 2 01:33:14 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"PLAYER_DECLARE_ATTACK","args":[],"result":null,"preventMethod":false,"methodScopeId":282,"scopeIsPlayer":true,"index":4,"originStackId":3},"isAfterActivation":true,"index":4} 

 Player 2 01:33:14 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2  declared attack on Conjoined Fatty"} 

 Player 2 01:33:14 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":3,"creatorCardId":282,"attackingPlayerCardId":282,"idOfCardBeingAttacked":237,"stackEffectType":4}} 

 Player 2 01:33:14 $ACTION_MASSAGE_REMOVE:  
{"id":24} 

 Player 2 01:33:14 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 01:33:14 $REMOVE_SE_VIS_PREV:  
{"stackEffect":{"entityId":3,"creatorCardId":282,"attackingPlayerCardId":282,"idOfCardBeingAttacked":237,"stackEffectType":4}} 

 Player 2 01:33:14 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":25,"_text":"Remove After Resolve DeclareAttack 3  "}} 

 Player 2 01:33:14 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 01:33:14 $REMOVE_FROM_STACK:  
{"stackEffect":{"entityId":3,"creatorCardId":282,"attackingPlayerCardId":282,"idOfCardBeingAttacked":237,"stackEffectType":4}} 

 Player 2 01:33:14 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":26,"_text":"Response Remove After Resolve DeclareAttack 3"},"childOfId":25} 

 Player 2 01:33:14 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":27,"_text":"Wait For Response From Player 1 "},"childOfId":25} 

 Player 2 01:33:14 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 2 01:33:14 $GET_REACTION:  
{"playerId":1,"activePlayerId":2} 

 Player 1 01:33:14 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2  declared attack on Conjoined Fatty"} 

 Player 1 01:33:14 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2  declared attack on Conjoined Fatty"} 

 Player 1 01:33:14 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2  declared attack on Conjoined Fatty"} 

 Player 1 01:33:14 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2  declared attack on Conjoined Fatty"} 

 Player 1 01:33:14 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2  declared attack on Conjoined Fatty"} 

 Player 1 01:33:14 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2  declared attack on Conjoined Fatty"} 

 Player 1 01:33:14 $RESPOND_TO:  
{"playerId":2,"stackEffectResponse":false} 

 Player 2 01:33:14 $ACTION_MASSAGE_REMOVE:  
{"id":27} 

 Player 2 01:33:14 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":28,"_text":"Wait For Response From Player 2 "},"childOfId":25} 

 Player 2 01:33:14 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 2 01:33:14 $ACTION_MASSAGE_REMOVE:  
{"id":28} 

 Player 2 01:33:14 $ACTION_MASSAGE_REMOVE:  
{"id":26} 

 Player 2 01:33:14 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":29,"_text":"Stack Was Emptied "}} 

 Player 2 01:33:14 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 01:33:14 $ACTION_MASSAGE_REMOVE:  
{"id":0} 

 Player 2 01:33:14 $ACTION_MASSAGE_REMOVE:  
{"id":1} 

 Player 2 01:33:14 $ACTION_MASSAGE_REMOVE:  
{"id":2} 

 Player 2 01:33:15 $ACTION_MASSAGE_REMOVE:  
{"id":3} 

 Player 2 01:33:15 $ACTION_MASSAGE_REMOVE:  
{"id":4} 

 Player 2 01:33:15 $ACTION_MASSAGE_REMOVE:  
{"id":5} 

 Player 2 01:33:15 $ACTION_MASSAGE_REMOVE:  
{"id":9} 

 Player 2 01:33:15 $ACTION_MASSAGE_REMOVE:  
{"id":10} 

 Player 2 01:33:15 $ACTION_MASSAGE_REMOVE:  
{"id":14} 

 Player 2 01:33:15 $ACTION_MASSAGE_REMOVE:  
{"id":15} 

 Player 2 01:33:15 $ACTION_MASSAGE_REMOVE:  
{"id":19} 

 Player 2 01:33:15 $ACTION_MASSAGE_REMOVE:  
{"id":20} 

 Player 2 01:33:15 $ACTION_MASSAGE_REMOVE:  
{"id":24} 

 Player 2 01:33:15 $ACTION_MASSAGE_REMOVE:  
{"id":25} 

 Player 2 01:33:15 $ACTION_MASSAGE_REMOVE:  
{"id":29} 

 Player 2 01:33:15 $NEXT_STACK_ID:  

 Player 2 01:33:15 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 01:33:15 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is rolling against Conjoined Fatty<Monster>"} 

 Player 2 01:33:15 $ADD_TO_STACK:  
{"stackEffect":{"entityId":4,"creatorCardId":282,"rollingPlayerCardId":282,"stackEffectType":2,"attackedMonsterCardId":237}} 

 Player 2 01:33:15 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is rolling against Conjoined Fatty<Monster>"} 

 Player 2 01:33:15 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":4,"creatorCardId":282,"rollingPlayerCardId":282,"stackEffectType":2,"attackedMonsterCardId":237}} 

 Player 2 01:33:15 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":30,"_text":"Add AttackRoll 4 "}} 

 Player 2 01:33:15 $ROLL_DICE:  
{"playerId":2} 

 Player 1 01:33:15 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 01:33:15 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 01:33:15 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is rolling against Conjoined Fatty<Monster>"} 

 Player 1 01:33:15 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is rolling against Conjoined Fatty<Monster>"} 

 Player 2 01:33:16 $ACTION_MASSAGE_REMOVE:  
{"id":29} 

 Player 2 01:33:16 $ROLL_DICE_ENDED:  
{"playerId":2,"numberRolled":5} 

 Player 2 01:33:16 $UPDATE_STACK_VIS:  
{"stackId":4,"text":"player rolled 5 vs Conjoined Fatty<Monster>"} 

 Player 2 01:33:16 $SHOW_DICE_ROLL:  
{"stackId":4} 

 Player 2 01:33:17 $ACTION_MASSAGE_REMOVE:  
{"id":25} 

 Player 2 01:33:19 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 rolled 5 vs Conjoined Fatty<Monster>"} 

 Player 2 01:33:19 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 2 01:33:19 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 rolled 5 vs Conjoined Fatty<Monster>"} 

 Player 2 01:33:19 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":4,"creatorCardId":282,"numberRolled":5,"rollingPlayerCardId":282,"stackEffectType":2,"attackedMonsterCardId":237}} 

 Player 2 01:33:19 $ACTION_MASSAGE_REMOVE:  
{"id":30} 

 Player 2 01:33:20 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":31,"_text":"Response Adding AttackRoll 4"},"childOfId":30} 

 Player 2 01:33:20 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":32,"_text":"Wait For Response From Player 2 "},"childOfId":30} 

 Player 2 01:33:20 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 2 01:33:20 $ACTION_MASSAGE_REMOVE:  
{"id":32} 

 Player 2 01:33:20 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":33,"_text":"Wait For Response From Player 1 "},"childOfId":30} 

 Player 2 01:33:20 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 2 01:33:20 $GET_REACTION:  
{"playerId":1,"activePlayerId":2} 

 Player 1 01:33:20 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is rolling against Conjoined Fatty<Monster>"} 

 Player 1 01:33:20 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is rolling against Conjoined Fatty<Monster>"} 

 Player 1 01:33:20 $RESPOND_TO:  
{"playerId":2,"stackEffectResponse":false} 

 Player 2 01:33:20 $ACTION_MASSAGE_REMOVE:  
{"id":33} 

 Player 2 01:33:20 $ACTION_MASSAGE_REMOVE:  
{"id":31} 

 Player 2 01:33:20 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":34,"_text":"Resolve AttackRoll 4 "}} 

 Player 2 01:33:20 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":35,"_text":"Added 0 to original roll"}} 

 Player 2 01:33:20 $NEXT_STACK_ID:  

 Player 2 01:33:20 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 rolled 5 vs Conjoined Fatty<Monster>"} 

 Player 2 01:33:20 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 2 01:33:20 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Azazel combat damage to Conjoined Fatty \n2:Player 2 rolled 5 vs Conjoined Fatty<Monster>"} 

 Player 2 01:33:20 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":5,"creatorCardId":282,"entityToDoDamageCardId":282,"entityToTakeDamageCardId":237,"isMonsterDoDamage":false,"isMonsterTakeDamage":true,"isPlayerDoDamage":false,"stackEffectType":3}} 

 Player 2 01:33:20 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Azazel combat damage to Conjoined Fatty \n2:Player 2 rolled 5 vs Conjoined Fatty<Monster>"} 

 Player 2 01:33:20 $REMOVE_SE_VIS_PREV:  
{"stackEffect":{"entityId":4,"creatorCardId":282,"numberRolled":5,"rollingPlayerCardId":282,"stackEffectType":2,"attackedMonsterCardId":237}} 

 Player 2 01:33:20 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Azazel combat damage to Conjoined Fatty \n2:Player 2 rolled 5 vs Conjoined Fatty<Monster>"} 

 Player 2 01:33:20 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":5,"creatorCardId":282,"entityToDoDamageCardId":282,"entityToTakeDamageCardId":237,"isMonsterDoDamage":false,"isMonsterTakeDamage":true,"isPlayerDoDamage":false,"stackEffectType":3}} 

 Player 2 01:33:20 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Azazel combat damage to Conjoined Fatty \n2:Player 2 rolled 5 vs Conjoined Fatty<Monster>"} 

 Player 2 01:33:20 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":4,"creatorCardId":282,"numberRolled":5,"rollingPlayerCardId":282,"stackEffectType":2,"attackedMonsterCardId":237}} 

 Player 2 01:33:20 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Azazel combat damage to Conjoined Fatty \n2:Player 2 rolled 5 vs Conjoined Fatty<Monster>"} 

 Player 2 01:33:20 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Azazel combat damage to Conjoined Fatty \n2:Player 2 rolled 5 vs Conjoined Fatty<Monster>"} 

 Player 2 01:33:20 $REPLACE_STACK:  
{"currentStack":[{"entityId":5,"creatorCardId":282,"entityToDoDamageCardId":282,"entityToTakeDamageCardId":237,"isMonsterDoDamage":false,"isMonsterTakeDamage":true,"isPlayerDoDamage":false,"stackEffectType":3},{"entityId":4,"creatorCardId":282,"numberRolled":5,"rollingPlayerCardId":282,"stackEffectType":2,"attackedMonsterCardId":237}]} 

 Player 2 01:33:20 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"PLAYER_ROLL_DICE","args":[{"type":2,"number":5},{"type":2,"number":2},{"type":2,"number":3}],"result":null,"preventMethod":false,"methodScopeId":282,"scopeIsPlayer":true,"index":5,"originStackId":4},"isAfterActivation":true,"index":5} 

 Player 2 01:33:20 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Azazel combat damage to Conjoined Fatty \n2:Player 2 rolled 5 vs Conjoined Fatty<Monster>"} 

 Player 2 01:33:20 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":4,"creatorCardId":282,"numberRolled":5,"rollingPlayerCardId":282,"stackEffectType":2,"attackedMonsterCardId":237}} 

 Player 2 01:33:20 $ACTION_MASSAGE_REMOVE:  
{"id":34} 

 Player 2 01:33:20 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Azazel combat damage to Conjoined Fatty"} 

 Player 2 01:33:20 $REMOVE_SE_VIS_PREV:  
{"stackEffect":{"entityId":4,"creatorCardId":282,"numberRolled":5,"rollingPlayerCardId":282,"stackEffectType":2,"attackedMonsterCardId":237}} 

 Player 2 01:33:20 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":36,"_text":"Remove After Resolve AttackRoll 4  "}} 

 Player 2 01:33:20 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Azazel combat damage to Conjoined Fatty"} 

 Player 2 01:33:20 $REMOVE_FROM_STACK:  
{"stackEffect":{"entityId":4,"creatorCardId":282,"numberRolled":5,"rollingPlayerCardId":282,"stackEffectType":2,"attackedMonsterCardId":237}} 

 Player 2 01:33:20 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":37,"_text":"Response Remove After Resolve AttackRoll 4"},"childOfId":36} 

 Player 2 01:33:21 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":38,"_text":"Wait For Response From Player 2 "},"childOfId":36} 

 Player 2 01:33:21 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 2 01:33:21 $ACTION_MASSAGE_REMOVE:  
{"id":38} 

 Player 2 01:33:21 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":39,"_text":"Wait For Response From Player 1 "},"childOfId":36} 

 Player 2 01:33:21 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 2 01:33:21 $GET_REACTION:  
{"playerId":1,"activePlayerId":2} 

 Player 1 01:33:21 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is rolling against Conjoined Fatty<Monster>"} 

 Player 1 01:33:21 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is rolling against Conjoined Fatty<Monster>"} 

 Player 1 01:33:21 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Azazel combat damage to Conjoined Fatty"} 

 Player 1 01:33:21 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Azazel combat damage to Conjoined Fatty"} 

 Player 1 01:33:21 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Azazel combat damage to Conjoined Fatty"} 

 Player 1 01:33:21 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Azazel combat damage to Conjoined Fatty"} 

 Player 1 01:33:21 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Azazel combat damage to Conjoined Fatty"} 

 Player 1 01:33:21 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Azazel combat damage to Conjoined Fatty"} 

 Player 1 01:33:21 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Azazel combat damage to Conjoined Fatty"} 

 Player 1 01:33:21 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Azazel combat damage to Conjoined Fatty"} 

 Player 1 01:33:21 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Azazel combat damage to Conjoined Fatty"} 

 Player 1 01:33:21 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Azazel combat damage to Conjoined Fatty"} 

 Player 1 01:33:21 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Azazel combat damage to Conjoined Fatty \n2:Player 2 is rolling against Conjoined Fatty<Monster>"} 

 Player 1 01:33:21 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Azazel combat damage to Conjoined Fatty \n2:Player 2 is rolling against Conjoined Fatty<Monster>"} 

 Player 1 01:33:21 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Azazel combat damage to Conjoined Fatty \n2:Player 2 is rolling against Conjoined Fatty<Monster>"} 

 Player 1 01:33:21 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Azazel combat damage to Conjoined Fatty \n2:Player 2 is rolling against Conjoined Fatty<Monster>"} 

 Player 1 01:33:21 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Azazel combat damage to Conjoined Fatty \n2:Player 2 is rolling against Conjoined Fatty<Monster>"} 

 Player 1 01:33:21 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Azazel combat damage to Conjoined Fatty \n2:Player 2 is rolling against Conjoined Fatty<Monster>"} 

 Player 1 01:33:21 $RESPOND_TO:  
{"playerId":2,"stackEffectResponse":false} 

 Player 2 01:33:21 $ACTION_MASSAGE_REMOVE:  
{"id":39} 

 Player 2 01:33:21 $ACTION_MASSAGE_REMOVE:  
{"id":37} 

 Player 2 01:33:21 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":40,"_text":"Resolve CombatDamage 5 "}} 

 Player 2 01:33:21 $UPDATE_STACK_VIS:  
{"stackId":5,"text":"Azazel will deal 1 combat damage to Conjoined Fatty"} 

 Player 2 01:33:21 $MONSTER_GET_DAMAGED:  
{"cardId":237,"hpLeft":3,"damageDealerId":282} 

 Player 2 01:33:21 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"MONSTER_GET_HIT","args":[{"type":2,"number":1},{"type":0,"number":282}],"result":null,"preventMethod":false,"methodScopeId":237,"scopeIsPlayer":false,"index":6,"originStackId":-1},"isAfterActivation":true,"index":6} 

 Player 2 01:33:21 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"PLAYER_COMBAT_DAMAGE_GIVEN","args":[{"type":2,"number":1},{"type":2,"number":5},{"type":0,"number":282},{"type":0,"number":237}],"result":null,"preventMethod":false,"methodScopeId":282,"scopeIsPlayer":true,"index":7,"originStackId":5},"isAfterActivation":true,"index":7} 

 Player 2 01:33:21 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Azazel combat damage to Conjoined Fatty"} 

 Player 2 01:33:21 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":5,"creatorCardId":282,"entityToDoDamageCardId":282,"entityToTakeDamageCardId":237,"isMonsterDoDamage":false,"isMonsterTakeDamage":true,"isPlayerDoDamage":false,"stackEffectType":3}} 

 Player 2 01:33:21 $ACTION_MASSAGE_REMOVE:  
{"id":40} 

 Player 2 01:33:21 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 01:33:21 $REMOVE_SE_VIS_PREV:  
{"stackEffect":{"entityId":5,"creatorCardId":282,"entityToDoDamageCardId":282,"entityToTakeDamageCardId":237,"isMonsterDoDamage":false,"isMonsterTakeDamage":true,"isPlayerDoDamage":false,"stackEffectType":3}} 

 Player 2 01:33:21 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":41,"_text":"Remove After Resolve CombatDamage 5  "}} 

 Player 2 01:33:21 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 01:33:21 $REMOVE_FROM_STACK:  
{"stackEffect":{"entityId":5,"creatorCardId":282,"entityToDoDamageCardId":282,"entityToTakeDamageCardId":237,"isMonsterDoDamage":false,"isMonsterTakeDamage":true,"isPlayerDoDamage":false,"stackEffectType":3}} 

 Player 2 01:33:22 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":42,"_text":"Response Remove After Resolve CombatDamage 5"},"childOfId":41} 

 Player 2 01:33:22 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":43,"_text":"Wait For Response From Player 1 "},"childOfId":41} 

 Player 2 01:33:22 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 2 01:33:22 $GET_REACTION:  
{"playerId":1,"activePlayerId":2} 

 Player 1 01:33:22 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Azazel combat damage to Conjoined Fatty"} 

 Player 1 01:33:22 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Azazel combat damage to Conjoined Fatty"} 

 Player 1 01:33:22 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Azazel combat damage to Conjoined Fatty"} 

 Player 1 01:33:22 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Azazel combat damage to Conjoined Fatty"} 

 Player 1 01:33:22 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Azazel combat damage to Conjoined Fatty"} 

 Player 1 01:33:22 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Azazel combat damage to Conjoined Fatty"} 

 Player 1 01:33:22 $RESPOND_TO:  
{"playerId":2,"stackEffectResponse":false} 

 Player 2 01:33:22 $ACTION_MASSAGE_REMOVE:  
{"id":43} 

 Player 2 01:33:22 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":44,"_text":"Wait For Response From Player 2 "},"childOfId":41} 

 Player 2 01:33:22 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 2 01:33:22 $ACTION_MASSAGE_REMOVE:  
{"id":44} 

 Player 2 01:33:22 $ACTION_MASSAGE_REMOVE:  
{"id":42} 

 Player 2 01:33:22 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":45,"_text":"Stack Was Emptied "}} 

 Player 2 01:33:22 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 01:33:22 $ACTION_MASSAGE_REMOVE:  
{"id":0} 

 Player 2 01:33:22 $ACTION_MASSAGE_REMOVE:  
{"id":1} 

 Player 2 01:33:22 $ACTION_MASSAGE_REMOVE:  
{"id":2} 

 Player 2 01:33:22 $ACTION_MASSAGE_REMOVE:  
{"id":3} 

 Player 2 01:33:22 $ACTION_MASSAGE_REMOVE:  
{"id":4} 

 Player 2 01:33:22 $ACTION_MASSAGE_REMOVE:  
{"id":5} 

 Player 2 01:33:22 $ACTION_MASSAGE_REMOVE:  
{"id":9} 

 Player 2 01:33:22 $ACTION_MASSAGE_REMOVE:  
{"id":10} 

 Player 2 01:33:22 $ACTION_MASSAGE_REMOVE:  
{"id":14} 

 Player 2 01:33:22 $ACTION_MASSAGE_REMOVE:  
{"id":15} 

 Player 2 01:33:22 $ACTION_MASSAGE_REMOVE:  
{"id":19} 

 Player 2 01:33:22 $ACTION_MASSAGE_REMOVE:  
{"id":20} 

 Player 2 01:33:22 $ACTION_MASSAGE_REMOVE:  
{"id":24} 

 Player 2 01:33:22 $ACTION_MASSAGE_REMOVE:  
{"id":25} 

 Player 2 01:33:22 $ACTION_MASSAGE_REMOVE:  
{"id":29} 

 Player 2 01:33:22 $ACTION_MASSAGE_REMOVE:  
{"id":30} 

 Player 2 01:33:22 $ACTION_MASSAGE_REMOVE:  
{"id":34} 

 Player 2 01:33:23 $ACTION_MASSAGE_REMOVE:  
{"id":35} 

 Player 2 01:33:23 $ACTION_MASSAGE_REMOVE:  
{"id":36} 

 Player 2 01:33:23 $ACTION_MASSAGE_REMOVE:  
{"id":40} 

 Player 2 01:33:23 $ACTION_MASSAGE_REMOVE:  
{"id":41} 

 Player 2 01:33:23 $ACTION_MASSAGE_REMOVE:  
{"id":45} 

 Player 2 01:33:23 $ACTION_MASSAGE_REMOVE:  
{"id":35} 

 Player 2 01:33:23 $ACTION_MASSAGE_REMOVE:  
{"id":36} 

 Player 2 01:33:23 $ACTION_MASSAGE_REMOVE:  
{"id":45} 

 Player 2 01:33:24 $ACTION_MASSAGE_REMOVE:  
{"id":41} 

 Player 2 01:34:34 $MATCH: 