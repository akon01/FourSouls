import { IContainer, Type, ObjectMap, ParamProviders } from '@ts-ioc/core';
import { Advices } from './advices';
import { AdviceMetadata } from './metadatas';
import { IAdvisor } from './IAdvisor';
/**
 * for global aop advisor.
 *
 * @export
 * @class Advisor
 */
export declare class Advisor implements IAdvisor {
    /**
     * aspects.
     *
     * @type {Map<Type<any>, ObjectMap<AdviceMetadata[]>>}
     * @memberof AspectManager
     */
    aspects: Map<Type<any>, ObjectMap<AdviceMetadata[]>>;
    /**
     * aspect ioc containers.
     *
     * @protected
     * @type {Map<Type<any>, IContainer>}
     * @memberof Advisor
     */
    protected aspectIocs: Map<Type<any>, IContainer>;
    /**
     * method advices.
     *
     * @type {Map<string, Advices>}
     * @memberof AspectManager
     */
    advices: Map<string, Advices>;
    constructor();
    /**
     * set advices.
     *
     * @param {string} key
     * @param {Advices} advices
     * @memberof Advisor
     */
    setAdvices(key: string, advices: Advices): void;
    /**
     * get advices.
     *
     * @param {string} key
     * @returns
     * @memberof Advisor
     */
    getAdvices(key: string): Advices;
    /**
     * has register advices or not.
     *
     * @param {Type<any>} targetType
     * @returns {boolean}
     * @memberof Advisor
     */
    hasRegisterAdvices(targetType: Type<any>): boolean;
    /**
     * add aspect.
     *
     * @param {Type<any>} aspect
     * @param {IContainer} raiseContainer
     * @memberof Advisor
     */
    add(aspect: Type<any>, raiseContainer: IContainer): void;
    getContainer(aspect: Type<any>, defaultContainer?: IContainer): IContainer;
    /**
     * resolve aspect.
     *
     * @template T
     * @param {Type<T>} aspect
     * @param {...ParamProviders[]} providers
     * @returns {T}
     * @memberof Advisor
     */
    resolve<T>(aspect: Type<T>, ...providers: ParamProviders[]): T;
    static getClassAnnations(): any;
}
