Start Log 

 Player 1 18:54:13 $MATCH:  

 Player 1 18:54:14 $START_GAME:  

 Player 2 18:54:14 $MOVE_TO_TABLE:  

 Player 1 18:54:14 $MOVE_TO_TABLE:  

 Player 1 18:54:22 $FINISH_LOAD:  
{"id":1,"turnPlayerId":2} 

 Player 2 18:54:22 $FINISH_LOAD:  
{"id":2,"turnPlayerId":2} 

 Player 2 18:54:22 $ASSIGN_CHAR_TO_PLAYER:  
{"playerId":1,"charCardId":294,"itemCardId":295} 

 Player 2 18:54:22 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"PLAYER_ADD_ITEM","args":[{"type":0,"number":299}],"result":true,"preventMethod":false,"methodScopeId":298,"scopeIsPlayer":true,"index":1,"originStackId":-1},"isAfterActivation":true,"index":1} 

 Player 2 18:54:22 $ASSIGN_CHAR_TO_PLAYER:  
{"playerId":2,"charCardId":298,"itemCardId":299} 

 Player 2 18:54:22 $DECK_ARRAGMENT:  
{"deckType":1,"arrangement":[105,12,92,57,124,72,102,20,88,74,87,69,101,42,61,129,83,108,125,117,76,93,50,16,97,68,11,38,113,139,109,89,32,122,138,82,128,133,26,81,56,71,130,33,135,123,91,25,86,59,51,70,13,34,43,28,36,21,45,22,55,131,46,35,142,84,118,112,73,54,29,80,115,100,65,94,37,107,41,77,78,10,75,121,52,114,98,64,58,40,17,141,24,134,23,7,90,126,31,14,111,27,119,106,30,62,127,140,120,39,19,18,136,67,9,60,53,8,110,63,103,49,85,66,79,137,104,99,95,96,15,48,116,132,44,47]} 

 Player 2 18:54:22 $DECK_ARRAGMENT:  
{"deckType":2,"arrangement":[248,258,241,233,236,271,252,270,228,245,254,262,267,244,251,272,264,281,250,256,234,230,280,235,238,242,249,229,269,274,237,231,266,239,261,240,279,263,253,243,232,260,247,268,278,257,277,265,259,255,276,246,275,273]} 

 Player 2 18:54:22 $DECK_ARRAGMENT:  
{"deckType":5,"arrangement":[161,187,155,195,150,223,192,216,221,218,197,219,208,215,217,188,163,205,172,189,166,153,146,165,202,213,160,186,204,209,168,201,177,174,162,183,193,206,211,158,214,145,157,191,154,181,194,170,178,167,147,184,180,200,199,176,220,149,151,222,185,210,182,171,207,169,225,159,156,212,190,173,152,196,224,179,164,198,175,203,148]} 

 Player 2 18:54:22 $DRAW_CARD:  
{"deckType":5} 

 Player 2 18:54:22 $FLIP_CARD:  
{"cardId":148} 

 Player 2 18:54:22 $ADD_STORE_CARD:  
{"cardId":148} 

 Player 2 18:54:22 $DRAW_CARD:  
{"deckType":5} 

 Player 2 18:54:23 $FLIP_CARD:  
{"cardId":203} 

 Player 2 18:54:23 $ADD_STORE_CARD:  
{"cardId":203} 

 Player 2 18:54:23 $DRAW_CARD:  
{"deckType":2} 

 Player 2 18:54:23 $FLIP_CARD:  
{"cardId":273} 

 Player 2 18:54:23 $REGISTER_PASSIVE_ITEM:  
{"cardId":273} 

 Player 2 18:54:23 $ADD_MONSTER:  
{"monsterPlaceId":1,"monsterId":273} 

 Player 2 18:54:23 $NEW_MONSTER_ON_PLACE:  
{"cardId":273,"monsterPlaceId":1} 

 Player 2 18:54:23 $DRAW_CARD:  
{"deckType":2} 

 Player 2 18:54:23 $FLIP_CARD:  
{"cardId":275} 

 Player 2 18:54:23 $ADD_MONSTER:  
{"monsterPlaceId":2,"monsterId":275} 

 Player 2 18:54:23 $NEW_MONSTER_ON_PLACE:  
{"cardId":275,"monsterPlaceId":2} 

 Player 2 18:54:23 $SET_MONEY:  
{"playerId":1,"numOfCoins":3} 

 Player 2 18:54:23 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"PLAYER_CHANGE_MONEY","args":[{"type":2,"number":3}],"result":null,"preventMethod":false,"methodScopeId":294,"scopeIsPlayer":true,"index":2,"originStackId":-1},"isAfterActivation":true,"index":2} 

 Player 2 18:54:23 $DRAW_CARD:  
{"deckType":1} 

 Player 2 18:54:23 $MOVE_CARD:  
{"moveIndex":1,"cardId":47,"placeID":1,"flipIfFlipped":false,"firstPos":{"x":1,"y":-5,"z":0},"playerId":2,"placeType":"Hand"} 

 Player 1 18:54:23 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"PLAYER_ADD_ITEM","args":[{"type":0,"number":295}],"result":true,"preventMethod":false,"methodScopeId":294,"scopeIsPlayer":true,"index":1,"originStackId":-1},"isAfterActivation":true,"index":1} 

 Player 1 18:54:23 $MOVE_CARD_END:  
{"moveIndex":1,"cardId":47,"flipIfFlipped":false,"playerId":2} 

 Player 2 18:54:23 $CARD_DRAWN:  
{"playerId":1,"deckType":1,"drawnCardId":47} 

 Player 2 18:54:23 $FLIP_CARD:  
{"cardId":47} 

 Player 2 18:54:23 $FLIP_CARD:  
{"cardId":47} 

 Player 2 18:54:23 $PLAYER_GET_LOOT:  
{"playerId":1,"cardId":47} 

 Player 2 18:54:23 $DRAW_CARD:  
{"deckType":1} 

 Player 2 18:54:23 $MOVE_CARD:  
{"moveIndex":2,"cardId":44,"placeID":1,"flipIfFlipped":false,"firstPos":{"x":1,"y":-5,"z":0},"playerId":2,"placeType":"Hand"} 

 Player 1 18:54:24 $MOVE_CARD_END:  
{"moveIndex":2,"cardId":44,"flipIfFlipped":false,"playerId":2} 

 Player 2 18:54:24 $CARD_DRAWN:  
{"playerId":1,"deckType":1,"drawnCardId":44} 

 Player 2 18:54:24 $FLIP_CARD:  
{"cardId":44} 

 Player 2 18:54:24 $FLIP_CARD:  
{"cardId":44} 

 Player 2 18:54:24 $PLAYER_GET_LOOT:  
{"playerId":1,"cardId":44} 

 Player 2 18:54:24 $DRAW_CARD:  
{"deckType":1} 

 Player 2 18:54:24 $MOVE_CARD:  
{"moveIndex":3,"cardId":132,"placeID":1,"flipIfFlipped":false,"firstPos":{"x":1,"y":-5,"z":0},"playerId":2,"placeType":"Hand"} 

 Player 1 18:54:24 $MOVE_CARD_END:  
{"moveIndex":3,"cardId":132,"flipIfFlipped":false,"playerId":2} 

 Player 2 18:54:24 $CARD_DRAWN:  
{"playerId":1,"deckType":1,"drawnCardId":132} 

 Player 2 18:54:24 $FLIP_CARD:  
{"cardId":132} 

 Player 2 18:54:24 $FLIP_CARD:  
{"cardId":132} 

 Player 2 18:54:24 $PLAYER_GET_LOOT:  
{"playerId":1,"cardId":132} 

 Player 2 18:54:24 $SET_MONEY:  
{"playerId":2,"numOfCoins":3} 

 Player 2 18:54:24 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"PLAYER_CHANGE_MONEY","args":[{"type":2,"number":3}],"result":null,"preventMethod":false,"methodScopeId":298,"scopeIsPlayer":true,"index":3,"originStackId":-1},"isAfterActivation":true,"index":3} 

 Player 2 18:54:24 $DRAW_CARD:  
{"deckType":1} 

 Player 2 18:54:25 $MOVE_CARD:  
{"moveIndex":4,"cardId":116,"placeID":2,"flipIfFlipped":false,"firstPos":{"x":1,"y":-5,"z":0},"playerId":2,"placeType":"Hand"} 

 Player 1 18:54:25 $MOVE_CARD_END:  
{"moveIndex":4,"cardId":116,"flipIfFlipped":false,"playerId":2} 

 Player 2 18:54:25 $CARD_DRAWN:  
{"playerId":2,"deckType":1,"drawnCardId":116} 

 Player 2 18:54:25 $FLIP_CARD:  
{"cardId":116} 

 Player 2 18:54:25 $PLAYER_GET_LOOT:  
{"playerId":2,"cardId":116} 

 Player 2 18:54:25 $DRAW_CARD:  
{"deckType":1} 

 Player 2 18:54:25 $MOVE_CARD:  
{"moveIndex":5,"cardId":48,"placeID":2,"flipIfFlipped":false,"firstPos":{"x":1,"y":-5,"z":0},"playerId":2,"placeType":"Hand"} 

 Player 1 18:54:25 $MOVE_CARD_END:  
{"moveIndex":5,"cardId":48,"flipIfFlipped":false,"playerId":2} 

 Player 2 18:54:25 $CARD_DRAWN:  
{"playerId":2,"deckType":1,"drawnCardId":48} 

 Player 2 18:54:25 $FLIP_CARD:  
{"cardId":48} 

 Player 2 18:54:25 $PLAYER_GET_LOOT:  
{"playerId":2,"cardId":48} 

 Player 2 18:54:25 $DRAW_CARD:  
{"deckType":1} 

 Player 2 18:54:25 $MOVE_CARD:  
{"moveIndex":6,"cardId":15,"placeID":2,"flipIfFlipped":false,"firstPos":{"x":1,"y":-5,"z":0},"playerId":2,"placeType":"Hand"} 

 Player 1 18:54:26 $MOVE_CARD_END:  
{"moveIndex":6,"cardId":15,"flipIfFlipped":false,"playerId":2} 

 Player 2 18:54:26 $CARD_DRAWN:  
{"playerId":2,"deckType":1,"drawnCardId":15} 

 Player 2 18:54:26 $FLIP_CARD:  
{"cardId":15} 

 Player 2 18:54:26 $PLAYER_GET_LOOT:  
{"playerId":2,"cardId":15} 

 Player 2 18:54:26 $GAME_HAS_STARTED:  

 Player 2 18:54:26 $SET_TURN:  
{"playerId":1} 

 Player 2 18:54:26 $START_TURN:  
{"playerId":1} 

 Player 2 18:54:26 $UPDATE_ACTIONS:  

 Player 1 18:54:26 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 18:54:26 $NEXT_STACK_ID:  

 Player 1 18:54:26 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 18:54:26 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 start turn loot"} 

 Player 1 18:54:26 $ADD_TO_STACK:  
{"stackEffect":{"entityId":1,"creatorCardId":294,"turnPlayerCardId":294,"stackEffectType":13}} 

 Player 1 18:54:26 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 start turn loot"} 

 Player 1 18:54:26 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":1,"creatorCardId":294,"turnPlayerCardId":294,"stackEffectType":13}} 

 Player 1 18:54:26 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":0,"_text":"Add StartTurnLoot 1 "}} 

 Player 1 18:54:26 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 18:54:26 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 start turn loot"} 

 Player 1 18:54:26 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":1,"creatorCardId":294,"turnPlayerCardId":294,"stackEffectType":13}} 

 Player 1 18:54:26 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":1,"_text":"Response Adding StartTurnLoot 1"},"childOfId":0} 

 Player 1 18:54:26 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":2,"_text":"Wait For Response From Player 1 "},"childOfId":0} 

 Player 1 18:54:26 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 18:54:26 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":3,"_text":"Wait For Response From Player 2 "},"childOfId":0} 

 Player 1 18:54:26 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 18:54:26 $GET_REACTION:  
{"playerId":2,"activePlayerId":1} 

 Player 2 18:54:26 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 18:54:26 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 18:54:26 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 start turn loot"} 

 Player 2 18:54:26 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 start turn loot"} 

 Player 2 18:54:27 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 start turn loot"} 

 Player 2 18:54:27 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 start turn loot"} 

 Player 2 18:54:27 $RESPOND_TO:  
{"playerId":1,"stackEffectResponse":false} 

 Player 1 18:54:27 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":4,"_text":"Resolve StartTurnLoot 1 "}} 

 Player 1 18:54:27 $DRAW_CARD:  
{"deckType":1} 

 Player 1 18:54:27 $MOVE_CARD:  
{"moveIndex":7,"cardId":96,"placeID":1,"flipIfFlipped":false,"firstPos":{"x":1,"y":-5,"z":0},"playerId":1,"placeType":"Hand"} 

 Player 2 18:54:27 $MOVE_CARD_END:  
{"moveIndex":7,"cardId":96,"flipIfFlipped":false,"playerId":1} 

 Player 1 18:54:27 $CARD_DRAWN:  
{"playerId":1,"deckType":1,"drawnCardId":96} 

 Player 1 18:54:27 $FLIP_CARD:  
{"cardId":96} 

 Player 1 18:54:27 $PLAYER_GET_LOOT:  
{"playerId":1,"cardId":96} 

 Player 1 18:54:27 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 start turn loot"} 

 Player 1 18:54:27 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":1,"creatorCardId":294,"turnPlayerCardId":294,"stackEffectType":13}} 

 Player 1 18:54:27 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 18:54:27 $REMOVE_SE_VIS_PREV:  
{"stackEffect":{"entityId":1,"creatorCardId":294,"turnPlayerCardId":294,"stackEffectType":13}} 

 Player 1 18:54:27 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":5,"_text":"Remove After Resolve StartTurnLoot 1  "}} 

 Player 1 18:54:27 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 18:54:27 $REMOVE_FROM_STACK:  
{"stackEffect":{"entityId":1,"creatorCardId":294,"turnPlayerCardId":294,"stackEffectType":13}} 

 Player 1 18:54:27 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":6,"_text":"Response Remove After Resolve StartTurnLoot 1"},"childOfId":5} 

 Player 1 18:54:27 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":7,"_text":"Wait For Response From Player 2 "},"childOfId":5} 

 Player 1 18:54:27 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 18:54:27 $GET_REACTION:  
{"playerId":2,"activePlayerId":1} 

 Player 2 18:54:27 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 start turn loot"} 

 Player 2 18:54:27 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 start turn loot"} 

 Player 2 18:54:28 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 start turn loot"} 

 Player 2 18:54:28 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 start turn loot"} 

 Player 2 18:54:28 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 start turn loot"} 

 Player 2 18:54:28 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 start turn loot"} 

 Player 2 18:54:28 $RESPOND_TO:  
{"playerId":1,"stackEffectResponse":false} 

 Player 1 18:54:28 $ACTION_MASSAGE_REMOVE:  
{"id":7} 

 Player 1 18:54:28 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":8,"_text":"Wait For Response From Player 1 "},"childOfId":5} 

 Player 1 18:54:28 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 18:54:28 $ACTION_MASSAGE_REMOVE:  
{"id":8} 

 Player 1 18:54:28 $ACTION_MASSAGE_REMOVE:  
{"id":6} 

 Player 1 18:54:28 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":9,"_text":"Stack Was Emptied "}} 

 Player 1 18:54:28 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 18:54:39 $MOVE_CARD:  
{"moveIndex":8,"cardId":106,"placeID":1,"flipIfFlipped":true,"playerId":1,"placeType":"Hand"} 

 Player 2 18:54:39 $MOVE_CARD_END:  
{"moveIndex":8,"cardId":106,"flipIfFlipped":true,"playerId":1} 

 Player 1 18:54:39 $PLAYER_GET_LOOT:  
{"playerId":1,"cardId":106} 

 Player 1 18:54:42 $SHOW_DECISION:  
{"startCardId":106,"endCardId":106,"flipEndCard":true} 

 Player 1 18:54:45 $NEXT_STACK_ID:  

 Player 1 18:54:45 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 18:54:45 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 play Guppys Hairball "} 

 Player 1 18:54:45 $ADD_TO_STACK:  
{"stackEffect":{"entityId":2,"creatorCardId":294,"hasLockingStackEffect":false,"hasLockingStackEffectResolved":false,"lootToPlayCardId":106,"lootPlayerId":1,"hasDataBeenCollectedYet":false,"stackEffectType":8}} 

 Player 1 18:54:45 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 play Guppys Hairball "} 

 Player 1 18:54:45 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":2,"creatorCardId":294,"hasLockingStackEffect":false,"hasLockingStackEffectResolved":false,"lootToPlayCardId":106,"lootPlayerId":1,"hasDataBeenCollectedYet":false,"stackEffectType":8}} 

 Player 1 18:54:45 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":10,"_text":"Add PlayLootCardStackEffect 2 "}} 

 Player 1 18:54:45 $PLAYER_LOSE_LOOT:  
{"playerId":1,"cardId":106} 

 Player 1 18:54:46 $MOVE_CARD:  
{"moveIndex":9,"cardId":106,"placeID":300,"flipIfFlipped":true,"playerId":1,"placeType":"Card"} 

 Player 2 18:54:46 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 18:54:46 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 18:54:46 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 play Guppys Hairball "} 

 Player 2 18:54:46 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 play Guppys Hairball "} 

 Player 2 18:54:46 $MOVE_CARD_END:  
{"moveIndex":9,"cardId":106,"flipIfFlipped":true,"playerId":1} 

 Player 1 18:54:46 $MOVE_CARD_TO_PILE:  
{"type":7,"cardId":106} 

 Player 1 18:54:46 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 play Guppys Hairball: AddTrinket"} 

 Player 1 18:54:46 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 18:54:46 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 play Guppys Hairball: AddTrinket"} 

 Player 1 18:54:46 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":2,"creatorCardId":294,"hasLockingStackEffect":false,"hasLockingStackEffectResolved":false,"lootToPlayCardId":106,"lootPlayerId":1,"effectToDo":{"effectName":"AddTrinket","cardEffectNum":0,"cardPlayerId":1,"cardId":106,"effctType":1},"hasDataBeenCollectedYet":true,"stackEffectType":8}} 

 Player 1 18:54:46 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":11,"_text":"Response Adding PlayLootCardStackEffect 2"},"childOfId":10} 

 Player 1 18:54:46 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":12,"_text":"Wait For Response From Player 1 "},"childOfId":10} 

 Player 1 18:54:46 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 18:54:46 $ACTION_MASSAGE_REMOVE:  
{"id":12} 

 Player 1 18:54:46 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":13,"_text":"Wait For Response From Player 2 "},"childOfId":10} 

 Player 1 18:54:46 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 18:54:46 $GET_REACTION:  
{"playerId":2,"activePlayerId":1} 

 Player 2 18:54:46 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 play Guppys Hairball "} 

 Player 2 18:54:46 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 play Guppys Hairball "} 

 Player 2 18:54:46 $RESPOND_TO:  
{"playerId":1,"stackEffectResponse":false} 

 Player 1 18:54:46 $ACTION_MASSAGE_REMOVE:  
{"id":13} 

 Player 1 18:54:46 $ACTION_MASSAGE_REMOVE:  
{"id":11} 

 Player 1 18:54:46 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":14,"_text":"Resolve PlayLootCardStackEffect 2 "}} 

 Player 1 18:54:46 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 play Guppys Hairball: AddTrinket"} 

 Player 1 18:54:46 $ACTIVATE_PARTICLE_EFFECT:  
{"cardId":106,"particleType":6} 

 Player 1 18:54:48 $DISABLE_PARTICLE_EFFECT:  
{"cardId":106,"particleType":6} 

 Player 1 18:54:48 $CARD_ADD_TRINKET:  
{"cardId":106,"playerId":1,"addMuiliEffect":true} 

 Player 1 18:54:48 $REMOVE_FROM_PILE:  
{"cardId":106} 

 Player 1 18:54:48 $REGISTER_PASSIVE_ITEM:  
{"cardId":106} 

 Player 1 18:54:48 $MOVE_CARD:  
{"moveIndex":10,"cardId":106,"placeID":1,"flipIfFlipped":true,"playerId":1,"placeType":"Desk"} 

 Player 2 18:54:49 $MOVE_CARD_END:  
{"moveIndex":10,"cardId":106,"flipIfFlipped":true,"playerId":1} 

 Player 1 18:54:49 $ADD_AN_ITEM:  
{"playerId":1,"cardId":106,"isReward":true} 

 Player 1 18:54:49 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"PLAYER_ADD_ITEM","args":[{"type":0,"number":106}],"result":true,"preventMethod":false,"methodScopeId":294,"scopeIsPlayer":true,"index":2,"originStackId":-1},"isAfterActivation":true,"index":2} 

 Player 1 18:54:49 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 play Guppys Hairball: AddTrinket"} 

 Player 1 18:54:49 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":2,"creatorCardId":294,"hasLockingStackEffect":false,"hasLockingStackEffectResolved":false,"lootToPlayCardId":106,"lootPlayerId":1,"hasDataBeenCollectedYet":true,"stackEffectType":8}} 

 Player 1 18:54:49 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 18:54:49 $REMOVE_SE_VIS_PREV:  
{"stackEffect":{"entityId":2,"creatorCardId":294,"hasLockingStackEffect":false,"hasLockingStackEffectResolved":false,"lootToPlayCardId":106,"lootPlayerId":1,"hasDataBeenCollectedYet":true,"stackEffectType":8}} 

 Player 1 18:54:49 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":15,"_text":"Remove After Resolve PlayLootCardStackEffect 2  "}} 

 Player 1 18:54:49 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 18:54:49 $REMOVE_FROM_STACK:  
{"stackEffect":{"entityId":2,"creatorCardId":294,"hasLockingStackEffect":false,"hasLockingStackEffectResolved":false,"lootToPlayCardId":106,"lootPlayerId":1,"hasDataBeenCollectedYet":true,"stackEffectType":8}} 

 Player 1 18:54:49 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":16,"_text":"Response Remove After Resolve PlayLootCardStackEffect 2"},"childOfId":15} 

 Player 1 18:54:49 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":17,"_text":"Wait For Response From Player 2 "},"childOfId":15} 

 Player 1 18:54:49 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 18:54:49 $GET_REACTION:  
{"playerId":2,"activePlayerId":1} 

 Player 2 18:54:49 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 play Guppys Hairball "} 

 Player 2 18:54:49 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 play Guppys Hairball "} 

 Player 2 18:54:49 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 play Guppys Hairball "} 

 Player 2 18:54:49 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 play Guppys Hairball "} 

 Player 2 18:54:49 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 play Guppys Hairball "} 

 Player 2 18:54:49 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 play Guppys Hairball "} 

 Player 2 18:54:49 $RESPOND_TO:  
{"playerId":1,"stackEffectResponse":false} 

 Player 1 18:54:49 $ACTION_MASSAGE_REMOVE:  
{"id":17} 

 Player 1 18:54:49 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":18,"_text":"Wait For Response From Player 1 "},"childOfId":15} 

 Player 1 18:54:49 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 18:54:49 $ACTION_MASSAGE_REMOVE:  
{"id":18} 

 Player 1 18:54:49 $ACTION_MASSAGE_REMOVE:  
{"id":16} 

 Player 1 18:54:49 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":19,"_text":"Stack Was Emptied "}} 

 Player 1 18:54:49 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 18:54:55 $SHOW_DECISION:  
{"startCardId":294,"endCardId":273} 

 Player 1 18:54:58 $NEXT_STACK_ID:  

 Player 1 18:54:58 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 18:54:58 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1  declared attack on The Bloat"} 

 Player 1 18:54:58 $ADD_TO_STACK:  
{"stackEffect":{"entityId":3,"creatorCardId":294,"attackingPlayerCardId":294,"idOfCardBeingAttacked":273,"stackEffectType":4}} 

 Player 1 18:54:58 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1  declared attack on The Bloat"} 

 Player 1 18:54:59 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":3,"creatorCardId":294,"attackingPlayerCardId":294,"idOfCardBeingAttacked":273,"stackEffectType":4}} 

 Player 1 18:54:59 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":20,"_text":"Add DeclareAttack 3 "}} 

 Player 1 18:54:59 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 18:54:59 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1  declared attack on The Bloat"} 

 Player 1 18:54:59 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":3,"creatorCardId":294,"attackingPlayerCardId":294,"idOfCardBeingAttacked":273,"stackEffectType":4}} 

 Player 1 18:54:59 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":21,"_text":"Response Adding DeclareAttack 3"},"childOfId":20} 

 Player 1 18:54:59 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":22,"_text":"Wait For Response From Player 1 "},"childOfId":20} 

 Player 1 18:54:59 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 18:54:59 $ACTION_MASSAGE_REMOVE:  
{"id":22} 

 Player 1 18:54:59 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":23,"_text":"Wait For Response From Player 2 "},"childOfId":20} 

 Player 1 18:54:59 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 18:54:59 $GET_REACTION:  
{"playerId":2,"activePlayerId":1} 

 Player 2 18:54:59 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 18:54:59 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 18:54:59 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1  declared attack on The Bloat"} 

 Player 2 18:54:59 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1  declared attack on The Bloat"} 

 Player 2 18:54:59 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1  declared attack on The Bloat"} 

 Player 2 18:54:59 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1  declared attack on The Bloat"} 

 Player 2 18:54:59 $RESPOND_TO:  
{"playerId":1,"stackEffectResponse":false} 

 Player 1 18:54:59 $ACTION_MASSAGE_REMOVE:  
{"id":23} 

 Player 1 18:54:59 $ACTION_MASSAGE_REMOVE:  
{"id":21} 

 Player 1 18:54:59 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":24,"_text":"Resolve DeclareAttack 3 "}} 

 Player 1 18:54:59 $ACTIVATE_PARTICLE_EFFECT:  
{"cardId":273,"particleType":5} 

 Player 1 18:54:59 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"PLAYER_DECLARE_ATTACK","args":[],"result":null,"preventMethod":false,"methodScopeId":294,"scopeIsPlayer":true,"index":3,"originStackId":3},"isAfterActivation":true,"index":3} 

 Player 1 18:54:59 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1  declared attack on The Bloat"} 

 Player 1 18:54:59 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":3,"creatorCardId":294,"attackingPlayerCardId":294,"idOfCardBeingAttacked":273,"stackEffectType":4}} 

 Player 1 18:54:59 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 18:54:59 $REMOVE_SE_VIS_PREV:  
{"stackEffect":{"entityId":3,"creatorCardId":294,"attackingPlayerCardId":294,"idOfCardBeingAttacked":273,"stackEffectType":4}} 

 Player 1 18:54:59 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":25,"_text":"Remove After Resolve DeclareAttack 3  "}} 

 Player 1 18:54:59 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 18:54:59 $REMOVE_FROM_STACK:  
{"stackEffect":{"entityId":3,"creatorCardId":294,"attackingPlayerCardId":294,"idOfCardBeingAttacked":273,"stackEffectType":4}} 

 Player 1 18:54:59 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":26,"_text":"Response Remove After Resolve DeclareAttack 3"},"childOfId":25} 

 Player 1 18:54:59 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":27,"_text":"Wait For Response From Player 2 "},"childOfId":25} 

 Player 1 18:54:59 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 18:54:59 $GET_REACTION:  
{"playerId":2,"activePlayerId":1} 

 Player 2 18:54:59 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1  declared attack on The Bloat"} 

 Player 2 18:55:00 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1  declared attack on The Bloat"} 

 Player 2 18:55:00 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1  declared attack on The Bloat"} 

 Player 2 18:55:00 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1  declared attack on The Bloat"} 

 Player 2 18:55:00 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1  declared attack on The Bloat"} 

 Player 2 18:55:00 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1  declared attack on The Bloat"} 

 Player 2 18:55:00 $RESPOND_TO:  
{"playerId":1,"stackEffectResponse":false} 

 Player 1 18:55:00 $ACTION_MASSAGE_REMOVE:  
{"id":27} 

 Player 1 18:55:00 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":28,"_text":"Wait For Response From Player 1 "},"childOfId":25} 

 Player 1 18:55:00 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 18:55:00 $ACTION_MASSAGE_REMOVE:  
{"id":28} 

 Player 1 18:55:00 $ACTION_MASSAGE_REMOVE:  
{"id":26} 

 Player 1 18:55:00 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":29,"_text":"Stack Was Emptied "}} 

 Player 1 18:55:00 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 18:55:00 $NEXT_STACK_ID:  

 Player 1 18:55:00 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 18:55:00 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against The Bloat<Monster>"} 

 Player 1 18:55:00 $ADD_TO_STACK:  
{"stackEffect":{"entityId":4,"creatorCardId":294,"rollingPlayerCardId":294,"stackEffectType":2,"attackedMonsterCardId":273}} 

 Player 1 18:55:00 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against The Bloat<Monster>"} 

 Player 1 18:55:00 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":4,"creatorCardId":294,"rollingPlayerCardId":294,"stackEffectType":2,"attackedMonsterCardId":273}} 

 Player 1 18:55:00 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":30,"_text":"Add AttackRoll 4 "}} 

 Player 1 18:55:00 $ROLL_DICE:  
{"playerId":1} 

 Player 2 18:55:00 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 18:55:00 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 18:55:00 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against The Bloat<Monster>"} 

 Player 2 18:55:00 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against The Bloat<Monster>"} 

 Player 1 18:55:02 $ROLL_DICE_ENDED:  
{"playerId":1,"numberRolled":5} 

 Player 1 18:55:02 $UPDATE_STACK_VIS:  
{"stackId":4,"text":"player rolled 5 vs The Bloat<Monster>"} 

 Player 1 18:55:02 $SHOW_DICE_ROLL:  
{"stackId":4} 

 Player 1 18:55:05 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 rolled 5 vs The Bloat<Monster>"} 

 Player 1 18:55:05 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 18:55:05 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 rolled 5 vs The Bloat<Monster>"} 

 Player 1 18:55:05 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":4,"creatorCardId":294,"numberRolled":5,"rollingPlayerCardId":294,"stackEffectType":2,"attackedMonsterCardId":273}} 

 Player 1 18:55:05 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":31,"_text":"Response Adding AttackRoll 4"},"childOfId":30} 

 Player 1 18:55:05 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":32,"_text":"Wait For Response From Player 1 "},"childOfId":30} 

 Player 1 18:55:05 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 18:55:06 $ACTION_MASSAGE_REMOVE:  
{"id":32} 

 Player 1 18:55:06 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":33,"_text":"Wait For Response From Player 2 "},"childOfId":30} 

 Player 1 18:55:06 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 18:55:06 $GET_REACTION:  
{"playerId":2,"activePlayerId":1} 

 Player 2 18:55:06 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against The Bloat<Monster>"} 

 Player 2 18:55:06 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against The Bloat<Monster>"} 

 Player 2 18:55:06 $RESPOND_TO:  
{"playerId":1,"stackEffectResponse":false} 

 Player 1 18:55:06 $ACTION_MASSAGE_REMOVE:  
{"id":33} 

 Player 1 18:55:06 $ACTION_MASSAGE_REMOVE:  
{"id":31} 

 Player 1 18:55:06 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":34,"_text":"Resolve AttackRoll 4 "}} 

 Player 1 18:55:06 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":35,"_text":"Added 0 to original roll"}} 

 Player 1 18:55:06 $NEXT_STACK_ID:  

 Player 1 18:55:06 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 rolled 5 vs The Bloat<Monster>"} 

 Player 1 18:55:06 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 18:55:06 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat combat damage to Maggy \n2:Player 1 rolled 5 vs The Bloat<Monster>"} 

 Player 1 18:55:06 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":5,"creatorCardId":294,"entityToDoDamageCardId":273,"entityToTakeDamageCardId":294,"isMonsterDoDamage":true,"isPlayerTakeDamage":true,"isMonsterTakeDamage":false,"isPlayerDoDamage":false,"stackEffectType":3}} 

 Player 1 18:55:06 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat combat damage to Maggy \n2:Player 1 rolled 5 vs The Bloat<Monster>"} 

 Player 1 18:55:06 $REMOVE_SE_VIS_PREV:  
{"stackEffect":{"entityId":4,"creatorCardId":294,"numberRolled":5,"rollingPlayerCardId":294,"stackEffectType":2,"attackedMonsterCardId":273}} 

 Player 1 18:55:06 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat combat damage to Maggy \n2:Player 1 rolled 5 vs The Bloat<Monster>"} 

 Player 1 18:55:06 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":5,"creatorCardId":294,"entityToDoDamageCardId":273,"entityToTakeDamageCardId":294,"isMonsterDoDamage":true,"isPlayerTakeDamage":true,"isMonsterTakeDamage":false,"isPlayerDoDamage":false,"stackEffectType":3}} 

 Player 1 18:55:06 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat combat damage to Maggy \n2:Player 1 rolled 5 vs The Bloat<Monster>"} 

 Player 1 18:55:06 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":4,"creatorCardId":294,"numberRolled":5,"rollingPlayerCardId":294,"stackEffectType":2,"attackedMonsterCardId":273}} 

 Player 1 18:55:06 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat combat damage to Maggy \n2:Player 1 rolled 5 vs The Bloat<Monster>"} 

 Player 1 18:55:06 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat combat damage to Maggy \n2:Player 1 rolled 5 vs The Bloat<Monster>"} 

 Player 1 18:55:06 $REPLACE_STACK:  
{"currentStack":[{"entityId":5,"creatorCardId":294,"entityToDoDamageCardId":273,"entityToTakeDamageCardId":294,"isMonsterDoDamage":true,"isPlayerTakeDamage":true,"isMonsterTakeDamage":false,"isPlayerDoDamage":false,"stackEffectType":3},{"entityId":4,"creatorCardId":294,"numberRolled":5,"rollingPlayerCardId":294,"stackEffectType":2,"attackedMonsterCardId":273}]} 

 Player 1 18:55:06 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"PLAYER_ROLL_DICE","args":[{"type":2,"number":1},{"type":2,"number":2},{"type":2,"number":4}],"result":null,"preventMethod":false,"methodScopeId":294,"scopeIsPlayer":true,"index":4,"originStackId":4},"isAfterActivation":true,"index":4} 

 Player 1 18:55:06 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat combat damage to Maggy \n2:Player 1 rolled 5 vs The Bloat<Monster>"} 

 Player 1 18:55:06 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":4,"creatorCardId":294,"numberRolled":5,"rollingPlayerCardId":294,"stackEffectType":2,"attackedMonsterCardId":273}} 

 Player 1 18:55:06 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat combat damage to Maggy"} 

 Player 1 18:55:06 $REMOVE_SE_VIS_PREV:  
{"stackEffect":{"entityId":4,"creatorCardId":294,"numberRolled":5,"rollingPlayerCardId":294,"stackEffectType":2,"attackedMonsterCardId":273}} 

 Player 1 18:55:06 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":36,"_text":"Remove After Resolve AttackRoll 4  "}} 

 Player 1 18:55:06 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat combat damage to Maggy"} 

 Player 1 18:55:06 $REMOVE_FROM_STACK:  
{"stackEffect":{"entityId":4,"creatorCardId":294,"numberRolled":5,"rollingPlayerCardId":294,"stackEffectType":2,"attackedMonsterCardId":273}} 

 Player 1 18:55:06 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":37,"_text":"Response Remove After Resolve AttackRoll 4"},"childOfId":36} 

 Player 1 18:55:06 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":38,"_text":"Wait For Response From Player 1 "},"childOfId":36} 

 Player 1 18:55:06 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 18:55:07 $ACTION_MASSAGE_REMOVE:  
{"id":38} 

 Player 1 18:55:07 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":39,"_text":"Wait For Response From Player 2 "},"childOfId":36} 

 Player 1 18:55:07 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 18:55:07 $GET_REACTION:  
{"playerId":2,"activePlayerId":1} 

 Player 2 18:55:07 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against The Bloat<Monster>"} 

 Player 2 18:55:07 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against The Bloat<Monster>"} 

 Player 2 18:55:07 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat combat damage to Maggy"} 

 Player 2 18:55:07 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat combat damage to Maggy"} 

 Player 2 18:55:07 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat combat damage to Maggy"} 

 Player 2 18:55:07 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat combat damage to Maggy"} 

 Player 2 18:55:07 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat combat damage to Maggy"} 

 Player 2 18:55:07 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat combat damage to Maggy"} 

 Player 2 18:55:07 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat combat damage to Maggy"} 

 Player 2 18:55:07 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat combat damage to Maggy"} 

 Player 2 18:55:07 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat combat damage to Maggy"} 

 Player 2 18:55:07 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat combat damage to Maggy"} 

 Player 2 18:55:07 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat combat damage to Maggy \n2:Player 1 is rolling against The Bloat<Monster>"} 

 Player 2 18:55:07 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat combat damage to Maggy \n2:Player 1 is rolling against The Bloat<Monster>"} 

 Player 2 18:55:07 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat combat damage to Maggy \n2:Player 1 is rolling against The Bloat<Monster>"} 

 Player 2 18:55:07 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat combat damage to Maggy \n2:Player 1 is rolling against The Bloat<Monster>"} 

 Player 2 18:55:07 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat combat damage to Maggy \n2:Player 1 is rolling against The Bloat<Monster>"} 

 Player 2 18:55:07 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat combat damage to Maggy \n2:Player 1 is rolling against The Bloat<Monster>"} 

 Player 2 18:55:07 $RESPOND_TO:  
{"playerId":1,"stackEffectResponse":false} 

 Player 1 18:55:07 $ACTION_MASSAGE_REMOVE:  
{"id":39} 

 Player 1 18:55:07 $ACTION_MASSAGE_REMOVE:  
{"id":37} 

 Player 1 18:55:07 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":40,"_text":"Resolve CombatDamage 5 "}} 

 Player 1 18:55:07 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat 2 combat damage to Maggy"} 

 Player 1 18:55:07 $UPDATE_STACK_VIS:  
{"stackId":5,"text":"The Bloat will deal 2 combat damage to Maggy"} 

 Player 1 18:55:07 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat 2 combat damage to Maggy"} 

 Player 1 18:55:07 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"PLAYER_GET_HIT","args":[{"type":2,"number":2},{"type":0,"number":273}],"result":null,"preventMethod":false,"methodScopeId":294,"scopeIsPlayer":true,"index":1,"originStackId":-1},"isAfterActivation":false,"index":1} 

 Player 1 18:55:07 $NEXT_STACK_ID:  

 Player 1 18:55:07 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat 2 combat damage to Maggy"} 

 Player 1 18:55:07 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat 2 combat damage to Maggy \n2:Activate Guppys Hairball effect MultiEffectRollAsEffect<MultiEffectRollAsEffect>"} 

 Player 1 18:55:07 $ADD_TO_STACK:  
{"stackEffect":{"effectCollectedData":null,"entityId":6,"creatorCardId":294,"hasLockingStackEffect":true,"hasLockingStackEffectResolved":false,"cardActivatorId":1,"cardWithEffectId":106,"effectToDo":{"effectName":"MultiEffectRoll","cardEffectNum":0,"cardPlayerId":1,"cardId":106,"effctType":0},"isAfterActivation":false,"index":1,"hasDataBeenCollectedYet":false,"stackEffectType":14}} 

 Player 1 18:55:07 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat 2 combat damage to Maggy \n2:Activate Guppys Hairball effect MultiEffectRollAsEffect<MultiEffectRollAsEffect>"} 

 Player 1 18:55:07 $ADD_SE_VIS_PREV:  
{"stackEffect":{"effectCollectedData":null,"entityId":6,"creatorCardId":294,"hasLockingStackEffect":true,"hasLockingStackEffectResolved":false,"cardActivatorId":1,"cardWithEffectId":106,"effectToDo":{"effectName":"MultiEffectRoll","cardEffectNum":0,"cardPlayerId":1,"cardId":106,"effctType":0},"isAfterActivation":false,"index":1,"hasDataBeenCollectedYet":false,"stackEffectType":14}} 

 Player 1 18:55:07 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":41,"_text":"Add ActivatePassiveEffect 6 "}} 

 Player 1 18:55:07 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat 2 combat damage to Maggy \n2:Activate Guppys Hairball effect MultiEffectRollAsEffect<MultiEffectRollAsEffect>"} 

 Player 1 18:55:08 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat 2 combat damage to Maggy \n2:Activate Guppys Hairball effect MultiEffectRollAsEffect<MultiEffectRollAsEffect>"} 

 Player 1 18:55:08 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"effectCollectedData":null,"entityId":6,"creatorCardId":294,"hasLockingStackEffect":true,"hasLockingStackEffectResolved":false,"cardActivatorId":1,"cardWithEffectId":106,"effectToDo":{"effectName":"MultiEffectRoll","cardEffectNum":0,"cardPlayerId":1,"cardId":106,"effctType":0},"isAfterActivation":false,"index":1,"hasDataBeenCollectedYet":false,"stackEffectType":14}} 

 Player 1 18:55:08 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":42,"_text":"Response Adding ActivatePassiveEffect 6"},"childOfId":41} 

 Player 1 18:55:08 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":43,"_text":"Wait For Response From Player 2 "},"childOfId":41} 

 Player 1 18:55:08 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 18:55:08 $GET_REACTION:  
{"playerId":2,"activePlayerId":1} 

 Player 2 18:55:08 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat combat damage to Maggy"} 

 Player 2 18:55:08 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat combat damage to Maggy"} 

 Player 2 18:55:08 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat combat damage to Maggy \n2:Activate Guppys Hairball "} 

 Player 2 18:55:08 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat combat damage to Maggy \n2:Activate Guppys Hairball "} 

 Player 2 18:55:08 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat combat damage to Maggy \n2:Activate Guppys Hairball "} 

 Player 2 18:55:08 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat combat damage to Maggy \n2:Activate Guppys Hairball "} 

 Player 2 18:55:08 $RESPOND_TO:  
{"playerId":1,"stackEffectResponse":false} 

 Player 1 18:55:08 $ACTION_MASSAGE_REMOVE:  
{"id":43} 

 Player 1 18:55:08 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":44,"_text":"Wait For Response From Player 1 "},"childOfId":41} 

 Player 1 18:55:08 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 18:55:08 $ACTION_MASSAGE_REMOVE:  
{"id":44} 

 Player 1 18:55:08 $ACTION_MASSAGE_REMOVE:  
{"id":42} 

 Player 1 18:55:08 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":45,"_text":"Resolve ActivatePassiveEffect 6 "}} 

 Player 1 18:55:08 $NEXT_STACK_ID:  

 Player 1 18:55:08 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat 2 combat damage to Maggy \n2:Activate Guppys Hairball effect MultiEffectRollAsEffect<MultiEffectRollAsEffect>"} 

 Player 1 18:55:08 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat 2 combat damage to Maggy \n2:Activate Guppys Hairball effect MultiEffectRollAsEffect<MultiEffectRollAsEffect> \n3:Player 1 roll a dice"} 

 Player 1 18:55:08 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat 2 combat damage to Maggy \n2:Activate Guppys Hairball effect MultiEffectRollAsEffect<MultiEffectRollAsEffect> \n3:Player 1 roll a dice"} 

 Player 1 18:55:08 $ADD_TO_STACK:  
{"stackEffect":{"entityId":7,"creatorCardId":294,"stackEffectToLock":{"effectCollectedData":null,"entityId":6,"creatorCardId":294,"hasLockingStackEffect":true,"hasLockingStackEffectResolved":false,"cardActivatorId":1,"cardWithEffectId":106,"effectToDo":{"effectName":"MultiEffectRoll","cardEffectNum":0,"cardPlayerId":1,"cardId":106,"effctType":0},"effectPassiveMeta":{"passiveEvent":"PLAYER_GET_HIT","args":[{"type":2,"number":2},{"type":0,"number":273}],"result":null,"preventMethod":false,"methodScopeId":294,"scopeIsPlayer":true,"index":1,"originStackId":-1},"isAfterActivation":false,"index":1,"hasDataBeenCollectedYet":false,"stackEffectType":14},"hasLockingStackEffect":false,"stackEffectType":11}} 

 Player 1 18:55:08 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat 2 combat damage to Maggy \n2:Activate Guppys Hairball effect MultiEffectRollAsEffect<MultiEffectRollAsEffect> \n3:Player 1 roll a dice"} 

 Player 1 18:55:08 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat 2 combat damage to Maggy \n2:Activate Guppys Hairball effect MultiEffectRollAsEffect<MultiEffectRollAsEffect> \n3:Player 1 roll a dice"} 

 Player 1 18:55:08 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":7,"creatorCardId":294,"stackEffectToLock":{"effectCollectedData":null,"entityId":6,"creatorCardId":294,"hasLockingStackEffect":true,"hasLockingStackEffectResolved":false,"cardActivatorId":1,"cardWithEffectId":106,"effectToDo":{"effectName":"MultiEffectRoll","cardEffectNum":0,"cardPlayerId":1,"cardId":106,"effctType":0},"effectPassiveMeta":{"passiveEvent":"PLAYER_GET_HIT","args":[{"type":2,"number":2},{"type":0,"number":273}],"result":null,"preventMethod":false,"methodScopeId":294,"scopeIsPlayer":true,"index":1,"originStackId":-1},"isAfterActivation":false,"index":1,"hasDataBeenCollectedYet":false,"stackEffectType":14},"hasLockingStackEffect":false,"stackEffectType":11}} 

 Player 1 18:55:08 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":46,"_text":"Add RollDiceStackEffect 7 "}} 

 Player 1 18:55:08 $ROLL_DICE:  
{"playerId":1} 

 Player 2 18:55:08 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat combat damage to Maggy \n2:Activate Guppys Hairball "} 

 Player 2 18:55:08 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat combat damage to Maggy \n2:Activate Guppys Hairball "} 

 Player 2 18:55:08 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat combat damage to Maggy \n2:Activate Guppys Hairball "} 

 Player 2 18:55:08 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat combat damage to Maggy \n2:Activate Guppys Hairball "} 

 Player 2 18:55:08 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat combat damage to Maggy \n2:Activate Guppys Hairball  \n3:Player 1 roll a dice"} 

 Player 2 18:55:08 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat combat damage to Maggy \n2:Activate Guppys Hairball  \n3:Player 1 roll a dice"} 

 Player 2 18:55:08 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat combat damage to Maggy \n2:Activate Guppys Hairball  \n3:Player 1 roll a dice"} 

 Player 2 18:55:08 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat combat damage to Maggy \n2:Activate Guppys Hairball  \n3:Player 1 roll a dice"} 

 Player 1 18:55:10 $ROLL_DICE_ENDED:  
{"playerId":1,"numberRolled":1} 

 Player 1 18:55:10 $UPDATE_STACK_VIS:  
{"stackId":7,"text":"player 1 rolled 1"} 

 Player 1 18:55:10 $SHOW_DICE_ROLL:  
{"stackId":7} 

 Player 1 18:55:13 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat 2 combat damage to Maggy \n2:Activate Guppys Hairball effect MultiEffectRollAsEffect<MultiEffectRollAsEffect> \n3:Player 1 rolled 1"} 

 Player 1 18:55:13 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 18:55:13 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat 2 combat damage to Maggy \n2:Activate Guppys Hairball effect MultiEffectRollAsEffect<MultiEffectRollAsEffect> \n3:Player 1 rolled 1"} 

 Player 1 18:55:13 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat 2 combat damage to Maggy \n2:Activate Guppys Hairball effect MultiEffectRollAsEffect<MultiEffectRollAsEffect> \n3:Player 1 rolled 1"} 

 Player 1 18:55:13 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":7,"creatorCardId":294,"stackEffectToLock":{"effectCollectedData":null,"entityId":6,"creatorCardId":294,"hasLockingStackEffect":true,"hasLockingStackEffectResolved":false,"cardActivatorId":1,"cardWithEffectId":106,"effectToDo":{"effectName":"MultiEffectRoll","cardEffectNum":0,"cardPlayerId":1,"cardId":106,"effctType":0},"effectPassiveMeta":{"passiveEvent":"PLAYER_GET_HIT","args":[{"type":2,"number":2},{"type":0,"number":273}],"result":null,"preventMethod":false,"methodScopeId":294,"scopeIsPlayer":true,"index":1,"originStackId":-1},"isAfterActivation":false,"index":1,"hasDataBeenCollectedYet":false,"stackEffectType":14},"hasLockingStackEffect":false,"numberRolled":1,"stackEffectType":11}} 

 Player 1 18:55:13 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":47,"_text":"Response Adding RollDiceStackEffect 7"},"childOfId":46} 

 Player 1 18:55:13 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":48,"_text":"Wait For Response From Player 1 "},"childOfId":46} 

 Player 1 18:55:13 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 18:55:13 $ACTION_MASSAGE_REMOVE:  
{"id":48} 

 Player 1 18:55:13 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":49,"_text":"Wait For Response From Player 2 "},"childOfId":46} 

 Player 1 18:55:13 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 18:55:13 $GET_REACTION:  
{"playerId":2,"activePlayerId":1} 

 Player 2 18:55:13 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat combat damage to Maggy \n2:Activate Guppys Hairball  \n3:Player 1 roll a dice"} 

 Player 2 18:55:13 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat combat damage to Maggy \n2:Activate Guppys Hairball  \n3:Player 1 roll a dice"} 

 Player 2 18:55:13 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat combat damage to Maggy \n2:Activate Guppys Hairball  \n3:Player 1 roll a dice"} 

 Player 2 18:55:13 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat combat damage to Maggy \n2:Activate Guppys Hairball  \n3:Player 1 roll a dice"} 

 Player 2 18:55:13 $RESPOND_TO:  
{"playerId":1,"stackEffectResponse":false} 

 Player 1 18:55:14 $ACTION_MASSAGE_REMOVE:  
{"id":49} 

 Player 1 18:55:14 $ACTION_MASSAGE_REMOVE:  
{"id":47} 

 Player 1 18:55:14 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":50,"_text":"Resolve RollDiceStackEffect 7 "}} 

 Player 1 18:55:14 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"PLAYER_ROLL_DICE","args":[{"type":2,"number":1},{"type":2,"number":3}],"result":null,"preventMethod":false,"methodScopeId":294,"scopeIsPlayer":true,"index":5,"originStackId":7},"isAfterActivation":true,"index":5} 

 Player 1 18:55:14 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat 2 combat damage to Maggy \n2:Activate Guppys Hairball effect MultiEffectRollAsEffect<MultiEffectRollAsEffect> \n3:Player 1 rolled 1"} 

 Player 1 18:55:14 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat 2 combat damage to Maggy \n2:Activate Guppys Hairball effect MultiEffectRollAsEffect<MultiEffectRollAsEffect> \n3:Player 1 rolled 1"} 

 Player 1 18:55:14 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":7,"creatorCardId":294,"stackEffectToLock":{"effectCollectedData":null,"entityId":6,"creatorCardId":294,"hasLockingStackEffect":true,"hasLockingStackEffectResolved":true,"cardActivatorId":1,"cardWithEffectId":106,"effectToDo":{"effectName":"MultiEffectRoll","cardEffectNum":0,"cardPlayerId":1,"cardId":106,"effctType":0},"effectPassiveMeta":{"passiveEvent":"PLAYER_GET_HIT","args":[{"type":2,"number":2},{"type":0,"number":273}],"result":null,"preventMethod":false,"methodScopeId":294,"scopeIsPlayer":true,"index":1,"originStackId":-1},"isAfterActivation":false,"index":1,"hasDataBeenCollectedYet":false,"stackEffectType":14},"hasLockingStackEffect":false,"numberRolled":1,"stackEffectType":11}} 

 Player 1 18:55:14 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat 2 combat damage to Maggy \n2:Activate Guppys Hairball effect MultiEffectRollAsEffect<MultiEffectRollAsEffect>"} 

 Player 1 18:55:14 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat 2 combat damage to Maggy \n2:Activate Guppys Hairball effect MultiEffectRollAsEffect<MultiEffectRollAsEffect>"} 

 Player 1 18:55:14 $REMOVE_SE_VIS_PREV:  
{"stackEffect":{"entityId":7,"creatorCardId":294,"stackEffectToLock":{"effectCollectedData":null,"entityId":6,"creatorCardId":294,"hasLockingStackEffect":true,"hasLockingStackEffectResolved":true,"cardActivatorId":1,"cardWithEffectId":106,"effectToDo":{"effectName":"MultiEffectRoll","cardEffectNum":0,"cardPlayerId":1,"cardId":106,"effctType":0},"effectPassiveMeta":{"passiveEvent":"PLAYER_GET_HIT","args":[{"type":2,"number":2},{"type":0,"number":273}],"result":null,"preventMethod":false,"methodScopeId":294,"scopeIsPlayer":true,"index":1,"originStackId":-1},"isAfterActivation":false,"index":1,"hasDataBeenCollectedYet":false,"stackEffectType":14},"hasLockingStackEffect":false,"numberRolled":1,"stackEffectType":11}} 

 Player 1 18:55:14 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":51,"_text":"Remove After Resolve RollDiceStackEffect 7  "}} 

 Player 1 18:55:14 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat 2 combat damage to Maggy \n2:Activate Guppys Hairball effect MultiEffectRollAsEffect<MultiEffectRollAsEffect>"} 

 Player 1 18:55:14 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat 2 combat damage to Maggy \n2:Activate Guppys Hairball effect MultiEffectRollAsEffect<MultiEffectRollAsEffect>"} 

 Player 1 18:55:14 $REMOVE_FROM_STACK:  
{"stackEffect":{"entityId":7,"creatorCardId":294,"stackEffectToLock":{"effectCollectedData":null,"entityId":6,"creatorCardId":294,"hasLockingStackEffect":true,"hasLockingStackEffectResolved":true,"cardActivatorId":1,"cardWithEffectId":106,"effectToDo":{"effectName":"MultiEffectRoll","cardEffectNum":0,"cardPlayerId":1,"cardId":106,"effctType":0},"effectPassiveMeta":{"passiveEvent":"PLAYER_GET_HIT","args":[{"type":2,"number":2},{"type":0,"number":273}],"result":null,"preventMethod":false,"methodScopeId":294,"scopeIsPlayer":true,"index":1,"originStackId":-1},"isAfterActivation":false,"index":1,"hasDataBeenCollectedYet":false,"stackEffectType":14},"hasLockingStackEffect":false,"numberRolled":1,"stackEffectType":11}} 

 Player 1 18:55:14 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":52,"_text":"Response Remove After Resolve RollDiceStackEffect 7"},"childOfId":51} 

 Player 1 18:55:14 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":53,"_text":"Wait For Response From Player 2 "},"childOfId":51} 

 Player 1 18:55:14 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 18:55:14 $GET_REACTION:  
{"playerId":2,"activePlayerId":1} 

 Player 2 18:55:14 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat combat damage to Maggy \n2:Activate Guppys Hairball  \n3:Player 1 roll a dice"} 

 Player 2 18:55:14 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat combat damage to Maggy \n2:Activate Guppys Hairball  \n3:Player 1 roll a dice"} 

 Player 2 18:55:14 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat combat damage to Maggy \n2:Activate Guppys Hairball  \n3:Player 1 roll a dice"} 

 Player 2 18:55:14 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat combat damage to Maggy \n2:Activate Guppys Hairball  \n3:Player 1 roll a dice"} 

 Player 2 18:55:14 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat combat damage to Maggy \n2:Activate Guppys Hairball  \n3:Player 1 roll a dice"} 

 Player 2 18:55:14 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat combat damage to Maggy \n2:Activate Guppys Hairball  \n3:Player 1 roll a dice"} 

 Player 2 18:55:14 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat combat damage to Maggy \n2:Activate Guppys Hairball  \n3:Player 1 roll a dice"} 

 Player 2 18:55:14 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat combat damage to Maggy \n2:Activate Guppys Hairball  \n3:Player 1 roll a dice"} 

 Player 2 18:55:14 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat combat damage to Maggy \n2:Activate Guppys Hairball  \n3:Player 1 roll a dice"} 

 Player 2 18:55:14 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat combat damage to Maggy \n2:Activate Guppys Hairball  \n3:Player 1 roll a dice"} 

 Player 2 18:55:14 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat combat damage to Maggy \n2:Activate Guppys Hairball  \n3:Player 1 roll a dice"} 

 Player 2 18:55:14 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat combat damage to Maggy \n2:Activate Guppys Hairball  \n3:Player 1 roll a dice"} 

 Player 2 18:55:14 $RESPOND_TO:  
{"playerId":1,"stackEffectResponse":false} 

 Player 1 18:55:14 $ACTION_MASSAGE_REMOVE:  
{"id":53} 

 Player 1 18:55:14 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":54,"_text":"Wait For Response From Player 1 "},"childOfId":51} 

 Player 1 18:55:14 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 18:55:15 $ACTION_MASSAGE_REMOVE:  
{"id":54} 

 Player 1 18:55:15 $ACTION_MASSAGE_REMOVE:  
{"id":52} 

 Player 1 18:55:15 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":55,"_text":"Resolve ActivatePassiveEffect 6 "}} 

 Player 1 18:55:15 $ACTIVATE_PARTICLE_EFFECT:  
{"cardId":106,"particleType":6} 

 Player 1 18:55:16 $DISABLE_PARTICLE_EFFECT:  
{"cardId":106,"particleType":6} 

 Player 1 18:55:16 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"PLAYER_GET_HIT","args":[{"type":2,"number":2},{"type":0,"number":273}],"result":null,"preventMethod":false,"methodScopeId":294,"scopeIsPlayer":true,"index":1,"originStackId":-1},"isAfterActivation":false,"index":1} 

 Player 1 18:55:16 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat 2 combat damage to Maggy \n2:Activate Guppys Hairball effect MultiEffectRollAsEffect<MultiEffectRollAsEffect>"} 

 Player 1 18:55:17 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"effectCollectedData":null,"entityId":6,"creatorCardId":294,"hasLockingStackEffect":true,"hasLockingStackEffectResolved":true,"cardActivatorId":1,"cardWithEffectId":106,"isAfterActivation":false,"index":1,"hasDataBeenCollectedYet":false,"stackEffectType":14}} 

 Player 1 18:55:17 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat 2 combat damage to Maggy"} 

 Player 1 18:55:17 $REMOVE_SE_VIS_PREV:  
{"stackEffect":{"effectCollectedData":null,"entityId":6,"creatorCardId":294,"hasLockingStackEffect":true,"hasLockingStackEffectResolved":true,"cardActivatorId":1,"cardWithEffectId":106,"isAfterActivation":false,"index":1,"hasDataBeenCollectedYet":false,"stackEffectType":14}} 

 Player 1 18:55:17 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":56,"_text":"Remove After Resolve ActivatePassiveEffect 6  "}} 

 Player 1 18:55:17 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat 2 combat damage to Maggy"} 

 Player 1 18:55:17 $REMOVE_FROM_STACK:  
{"stackEffect":{"effectCollectedData":null,"entityId":6,"creatorCardId":294,"hasLockingStackEffect":true,"hasLockingStackEffectResolved":true,"cardActivatorId":1,"cardWithEffectId":106,"isAfterActivation":false,"index":1,"hasDataBeenCollectedYet":false,"stackEffectType":14}} 

 Player 1 18:55:17 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":57,"_text":"Response Remove After Resolve ActivatePassiveEffect 6"},"childOfId":56} 

 Player 1 18:55:17 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":58,"_text":"Wait For Response From Player 1 "},"childOfId":56} 

 Player 1 18:55:17 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 18:55:17 $ACTION_MASSAGE_REMOVE:  
{"id":58} 

 Player 1 18:55:17 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":59,"_text":"Wait For Response From Player 2 "},"childOfId":56} 

 Player 1 18:55:17 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 18:55:17 $GET_REACTION:  
{"playerId":2,"activePlayerId":1} 

 Player 2 18:55:17 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat combat damage to Maggy \n2:Activate Guppys Hairball "} 

 Player 2 18:55:17 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat combat damage to Maggy \n2:Activate Guppys Hairball "} 

 Player 2 18:55:17 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat combat damage to Maggy \n2:Activate Guppys Hairball "} 

 Player 2 18:55:17 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat combat damage to Maggy \n2:Activate Guppys Hairball "} 

 Player 2 18:55:17 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat combat damage to Maggy \n2:Activate Guppys Hairball "} 

 Player 2 18:55:17 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat combat damage to Maggy \n2:Activate Guppys Hairball "} 

 Player 2 18:55:17 $RESPOND_TO:  
{"playerId":1,"stackEffectResponse":false} 

 Player 1 18:55:17 $ACTION_MASSAGE_REMOVE:  
{"id":59} 

 Player 1 18:55:17 $ACTION_MASSAGE_REMOVE:  
{"id":57} 

 Player 1 18:55:17 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":60,"_text":"Resolve CombatDamage 5 "}} 

 Player 1 18:55:17 $PLAYER_GET_HIT:  
{"playerId":1,"damage":2,"damageDealerId":273} 

 Player 1 18:55:17 $NEXT_STACK_ID:  

 Player 1 18:55:17 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat 2 combat damage to Maggy"} 

 Player 1 18:55:17 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 18:55:17 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat 2 combat damage to Maggy \n2:Player 1 is about to die"} 

 Player 1 18:55:17 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":8,"creatorCardId":294,"playerToDieCardId":294,"stackEffectType":15,"killerId":273}} 

 Player 1 18:55:17 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat 2 combat damage to Maggy \n2:Player 1 is about to die"} 

 Player 1 18:55:17 $REMOVE_SE_VIS_PREV:  
{"stackEffect":{"entityId":5,"creatorCardId":294,"entityToDoDamageCardId":273,"entityToTakeDamageCardId":294,"isMonsterDoDamage":true,"isPlayerTakeDamage":true,"isMonsterTakeDamage":false,"isPlayerDoDamage":false,"stackEffectType":3}} 

 Player 1 18:55:17 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat 2 combat damage to Maggy \n2:Player 1 is about to die"} 

 Player 1 18:55:17 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":5,"creatorCardId":294,"entityToDoDamageCardId":273,"entityToTakeDamageCardId":294,"isMonsterDoDamage":true,"isPlayerTakeDamage":true,"isMonsterTakeDamage":false,"isPlayerDoDamage":false,"stackEffectType":3}} 

 Player 1 18:55:17 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat 2 combat damage to Maggy \n2:Player 1 is about to die"} 

 Player 1 18:55:17 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":8,"creatorCardId":294,"playerToDieCardId":294,"stackEffectType":15,"killerId":273}} 

 Player 1 18:55:17 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat 2 combat damage to Maggy \n2:Player 1 is about to die"} 

 Player 1 18:55:18 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat 2 combat damage to Maggy \n2:Player 1 is about to die"} 

 Player 1 18:55:18 $REPLACE_STACK:  
{"currentStack":[{"entityId":5,"creatorCardId":294,"entityToDoDamageCardId":273,"entityToTakeDamageCardId":294,"isMonsterDoDamage":true,"isPlayerTakeDamage":true,"isMonsterTakeDamage":false,"isPlayerDoDamage":false,"stackEffectType":3},{"entityId":8,"creatorCardId":294,"playerToDieCardId":294,"stackEffectType":15,"killerId":273}]} 

 Player 1 18:55:18 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"PLAYER_GET_HIT","args":[{"type":2,"number":2},{"type":0,"number":273}],"result":null,"preventMethod":false,"methodScopeId":294,"scopeIsPlayer":true,"index":1,"originStackId":-1},"isAfterActivation":true,"index":1} 

 Player 1 18:55:18 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is about to die"} 

 Player 1 18:55:18 $REMOVE_SE_VIS_PREV:  
{"stackEffect":{"entityId":5,"creatorCardId":294,"entityToDoDamageCardId":273,"entityToTakeDamageCardId":294,"isMonsterDoDamage":true,"isPlayerTakeDamage":true,"isMonsterTakeDamage":false,"isPlayerDoDamage":false,"stackEffectType":3}} 

 Player 1 18:55:18 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":61,"_text":"Remove After Resolve CombatDamage 5  "}} 

 Player 1 18:55:18 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is about to die"} 

 Player 1 18:55:18 $REMOVE_FROM_STACK:  
{"stackEffect":{"entityId":5,"creatorCardId":294,"entityToDoDamageCardId":273,"entityToTakeDamageCardId":294,"isMonsterDoDamage":true,"isPlayerTakeDamage":true,"isMonsterTakeDamage":false,"isPlayerDoDamage":false,"stackEffectType":3}} 

 Player 1 18:55:18 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":62,"_text":"Response Remove After Resolve CombatDamage 5"},"childOfId":61} 

 Player 1 18:55:18 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":63,"_text":"Wait For Response From Player 1 "},"childOfId":61} 

 Player 1 18:55:18 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 18:55:18 $ACTION_MASSAGE_REMOVE:  
{"id":63} 

 Player 1 18:55:18 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":64,"_text":"Wait For Response From Player 2 "},"childOfId":61} 

 Player 1 18:55:18 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 18:55:18 $GET_REACTION:  
{"playerId":2,"activePlayerId":1} 

 Player 2 18:55:18 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat combat damage to Maggy"} 

 Player 2 18:55:18 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat combat damage to Maggy"} 

 Player 2 18:55:18 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is about to die"} 

 Player 2 18:55:18 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is about to die"} 

 Player 2 18:55:18 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is about to die"} 

 Player 2 18:55:18 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is about to die"} 

 Player 2 18:55:18 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is about to die"} 

 Player 2 18:55:18 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is about to die"} 

 Player 2 18:55:18 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is about to die"} 

 Player 2 18:55:18 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is about to die"} 

 Player 2 18:55:18 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is about to die"} 

 Player 2 18:55:18 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is about to die"} 

 Player 2 18:55:18 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat combat damage to Maggy \n2:Player 1 is about to die"} 

 Player 2 18:55:18 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat combat damage to Maggy \n2:Player 1 is about to die"} 

 Player 2 18:55:18 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat combat damage to Maggy \n2:Player 1 is about to die"} 

 Player 2 18:55:18 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat combat damage to Maggy \n2:Player 1 is about to die"} 

 Player 2 18:55:18 $RESPOND_TO:  
{"playerId":1,"stackEffectResponse":false} 

 Player 1 18:55:18 $ACTION_MASSAGE_REMOVE:  
{"id":64} 

 Player 1 18:55:18 $ACTION_MASSAGE_REMOVE:  
{"id":62} 

 Player 1 18:55:18 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":65,"_text":"Resolve PlayerDeath 8 "}} 

 Player 1 18:55:19 $DISABLE_PARTICLE_EFFECT:  
{"cardId":273,"particleType":5} 

 Player 1 18:55:19 $CANCEL_ATTACK:  

 Player 1 18:55:19 $NEXT_STACK_ID:  

 Player 1 18:55:19 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is about to die"} 

 Player 1 18:55:19 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 18:55:19 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is about to die \n2:Player 1 is about to pay death penalties"} 

 Player 1 18:55:19 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":9,"creatorCardId":294,"playerToPayCardId":294,"stackEffectType":16}} 

 Player 1 18:55:19 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is about to die \n2:Player 1 is about to pay death penalties"} 

 Player 1 18:55:19 $REMOVE_SE_VIS_PREV:  
{"stackEffect":{"entityId":8,"creatorCardId":294,"playerToDieCardId":294,"stackEffectType":15,"killerId":273}} 

 Player 1 18:55:19 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is about to die \n2:Player 1 is about to pay death penalties"} 

 Player 1 18:55:19 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":8,"creatorCardId":294,"playerToDieCardId":294,"stackEffectType":15,"killerId":273}} 

 Player 1 18:55:19 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is about to die \n2:Player 1 is about to pay death penalties"} 

 Player 1 18:55:19 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":9,"creatorCardId":294,"playerToPayCardId":294,"stackEffectType":16}} 

 Player 1 18:55:19 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is about to die \n2:Player 1 is about to pay death penalties"} 

 Player 1 18:55:19 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is about to die \n2:Player 1 is about to pay death penalties"} 

 Player 1 18:55:19 $REPLACE_STACK:  
{"currentStack":[{"entityId":8,"creatorCardId":294,"playerToDieCardId":294,"stackEffectType":15,"killerId":273},{"entityId":9,"creatorCardId":294,"playerToPayCardId":294,"stackEffectType":16}]} 

 Player 1 18:55:19 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is about to die \n2:Player 1 is about to pay death penalties"} 

 Player 1 18:55:19 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":8,"creatorCardId":294,"playerToDieCardId":294,"stackEffectType":15,"killerId":273}} 

 Player 1 18:55:19 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is about to pay death penalties"} 

 Player 1 18:55:19 $REMOVE_SE_VIS_PREV:  
{"stackEffect":{"entityId":8,"creatorCardId":294,"playerToDieCardId":294,"stackEffectType":15,"killerId":273}} 

 Player 1 18:55:19 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":66,"_text":"Remove After Resolve PlayerDeath 8  "}} 

 Player 1 18:55:19 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is about to pay death penalties"} 

 Player 1 18:55:19 $REMOVE_FROM_STACK:  
{"stackEffect":{"entityId":8,"creatorCardId":294,"playerToDieCardId":294,"stackEffectType":15,"killerId":273}} 

 Player 1 18:55:19 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":67,"_text":"Response Remove After Resolve PlayerDeath 8"},"childOfId":66} 

 Player 1 18:55:19 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":68,"_text":"Wait For Response From Player 1 "},"childOfId":66} 

 Player 1 18:55:19 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 18:55:19 $ACTION_MASSAGE_REMOVE:  
{"id":68} 

 Player 1 18:55:19 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":69,"_text":"Wait For Response From Player 2 "},"childOfId":66} 

 Player 1 18:55:19 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 18:55:19 $GET_REACTION:  
{"playerId":2,"activePlayerId":1} 

 Player 2 18:55:19 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is about to die"} 

 Player 2 18:55:19 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is about to die"} 

 Player 2 18:55:19 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is about to pay death penalties"} 

 Player 2 18:55:19 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is about to pay death penalties"} 

 Player 2 18:55:20 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is about to pay death penalties"} 

 Player 2 18:55:20 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is about to pay death penalties"} 

 Player 2 18:55:20 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is about to pay death penalties"} 

 Player 2 18:55:20 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is about to pay death penalties"} 

 Player 2 18:55:20 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is about to pay death penalties"} 

 Player 2 18:55:20 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is about to pay death penalties"} 

 Player 2 18:55:20 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is about to pay death penalties"} 

 Player 2 18:55:20 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is about to pay death penalties"} 

 Player 2 18:55:20 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is about to die \n2:Player 1 is about to pay death penalties"} 

 Player 2 18:55:20 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is about to die \n2:Player 1 is about to pay death penalties"} 

 Player 2 18:55:20 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is about to die \n2:Player 1 is about to pay death penalties"} 

 Player 2 18:55:20 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is about to die \n2:Player 1 is about to pay death penalties"} 

 Player 2 18:55:20 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is about to die \n2:Player 1 is about to pay death penalties"} 

 Player 2 18:55:20 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is about to die \n2:Player 1 is about to pay death penalties"} 

 Player 2 18:55:20 $RESPOND_TO:  
{"playerId":1,"stackEffectResponse":false} 

 Player 1 18:55:20 $ACTION_MASSAGE_REMOVE:  
{"id":69} 

 Player 1 18:55:20 $ACTION_MASSAGE_REMOVE:  
{"id":67} 

 Player 1 18:55:20 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":70,"_text":"Resolve PlayerDeathPenalties 9 "}} 

 Player 1 18:55:20 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":71,"_text":"Player 1 pays Penalties"}} 

 Player 1 18:55:20 $SET_MONEY:  
{"playerId":1,"numOfCoins":2} 

 Player 1 18:55:20 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"PLAYER_CHANGE_MONEY","args":[{"type":2,"number":-1}],"result":null,"preventMethod":false,"methodScopeId":294,"scopeIsPlayer":true,"index":6,"originStackId":-1},"isAfterActivation":true,"index":6} 

 Player 1 18:55:58 $PLAYER_LOSE_LOOT:  
{"playerId":1,"cardId":96} 

 Player 1 18:55:58 $MOVE_CARD:  
{"moveIndex":11,"cardId":96,"placeID":301,"flipIfFlipped":true,"playerId":1,"placeType":"Card"} 

 Player 2 18:55:59 $MOVE_CARD_END:  
{"moveIndex":11,"cardId":96,"flipIfFlipped":true,"playerId":1} 

 Player 1 18:55:59 $MOVE_CARD_TO_PILE:  
{"type":1,"cardId":96} 

 Player 1 18:56:01 $REMOVE_FROM_PASSIVE_MANAGER:  
{"cardId":106} 

 Player 1 18:56:01 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"PLAYER_LOSE_ITEM","args":[{"type":0,"number":106}],"result":null,"preventMethod":false,"methodScopeId":294,"scopeIsPlayer":true,"index":7,"originStackId":-1},"isAfterActivation":true,"index":7} 

 Player 1 18:56:01 $MOVE_CARD:  
{"moveIndex":12,"cardId":106,"placeID":301,"flipIfFlipped":true,"playerId":1,"placeType":"Card"} 

 Player 2 18:56:01 $MOVE_CARD_END:  
{"moveIndex":12,"cardId":106,"flipIfFlipped":true,"playerId":1} 

 Player 1 18:56:01 $MOVE_CARD_TO_PILE:  
{"type":1,"cardId":106} 

 Player 1 18:56:01 $USE_ITEM:  
{"cardId":294} 

 Player 1 18:56:01 $USE_ITEM:  
{"cardId":295} 

 Player 1 18:56:01 $PLAYER_DIED:  
{"playerId":1} 

 Player 1 18:56:01 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is about to pay death penalties"} 

 Player 1 18:56:01 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":9,"creatorCardId":294,"playerToPayCardId":294,"stackEffectType":16}} 

 Player 1 18:56:01 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 18:56:01 $REMOVE_SE_VIS_PREV:  
{"stackEffect":{"entityId":9,"creatorCardId":294,"playerToPayCardId":294,"stackEffectType":16}} 

 Player 1 18:56:01 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":72,"_text":"Remove After Resolve PlayerDeathPenalties 9  "}} 

 Player 1 18:56:01 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 18:56:01 $REMOVE_FROM_STACK:  
{"stackEffect":{"entityId":9,"creatorCardId":294,"playerToPayCardId":294,"stackEffectType":16}} 

 Player 1 18:56:01 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":73,"_text":"Response Remove After Resolve PlayerDeathPenalties 9"},"childOfId":72} 

 Player 1 18:56:01 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":74,"_text":"Wait For Response From Player 2 "},"childOfId":72} 

 Player 1 18:56:02 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 18:56:02 $GET_REACTION:  
{"playerId":2,"activePlayerId":1} 

 Player 2 18:56:02 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is about to pay death penalties"} 

 Player 2 18:56:02 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is about to pay death penalties"} 

 Player 2 18:56:02 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is about to pay death penalties"} 

 Player 2 18:56:02 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is about to pay death penalties"} 

 Player 2 18:56:02 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is about to pay death penalties"} 

 Player 2 18:56:02 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is about to pay death penalties"} 

 Player 2 18:56:02 $RESPOND_TO:  
{"playerId":1,"stackEffectResponse":false} 

 Player 1 18:56:02 $ACTION_MASSAGE_REMOVE:  
{"id":74} 

 Player 1 18:56:02 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":75,"_text":"Wait For Response From Player 1 "},"childOfId":72} 

 Player 1 18:56:02 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 18:56:02 $ACTION_MASSAGE_REMOVE:  
{"id":75} 

 Player 1 18:56:02 $ACTION_MASSAGE_REMOVE:  
{"id":73} 

 Player 1 18:56:02 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":76,"_text":"Stack Was Emptied "}} 

 Player 1 18:56:02 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 18:56:02 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 18:56:02 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 18:56:02 $REPLACE_STACK:  
{"currentStack":[]} 

 Player 1 18:56:02 $END_TURN:  

 Player 1 18:56:02 $SET_TURN:  
{"playerId":2} 

 Player 1 18:56:02 $START_TURN:  
{"playerId":2} 

 Player 2 18:56:02 $STACK_EMPTIED:  
{"playerId":1} 

 Player 2 18:56:02 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 18:56:02 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 2 18:56:02 $NEXT_STACK_ID:  

 Player 2 18:56:02 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 18:56:02 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 start turn loot"} 

 Player 2 18:56:02 $ADD_TO_STACK:  
{"stackEffect":{"entityId":10,"creatorCardId":298,"turnPlayerCardId":298,"stackEffectType":13}} 

 Player 2 18:56:02 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 start turn loot"} 

 Player 2 18:56:02 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":10,"creatorCardId":298,"turnPlayerCardId":298,"stackEffectType":13}} 

 Player 2 18:56:03 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":77,"_text":"Add StartTurnLoot 10 "}} 

 Player 2 18:56:03 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 2 18:56:03 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 start turn loot"} 

 Player 2 18:56:03 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":10,"creatorCardId":298,"turnPlayerCardId":298,"stackEffectType":13}} 

 Player 2 18:56:03 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":78,"_text":"Response Adding StartTurnLoot 10"},"childOfId":77} 

 Player 2 18:56:03 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":79,"_text":"Wait For Response From Player 2 "},"childOfId":77} 

 Player 2 18:56:03 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 2 18:56:03 $ACTION_MASSAGE_REMOVE:  
{"id":79} 

 Player 2 18:56:03 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":80,"_text":"Wait For Response From Player 1 "},"childOfId":77} 

 Player 2 18:56:03 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 2 18:56:03 $GET_REACTION:  
{"playerId":1,"activePlayerId":2} 

 Player 1 18:56:03 $STACK_EMPTIED:  
{"playerId":2} 

 Player 1 18:56:03 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 18:56:03 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 18:56:03 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 start turn loot"} 

 Player 1 18:56:03 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 start turn loot"} 

 Player 1 18:56:03 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 start turn loot"} 

 Player 1 18:56:03 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 start turn loot"} 

 Player 1 18:56:03 $RESPOND_TO:  
{"playerId":2,"stackEffectResponse":false} 

 Player 2 18:56:03 $ACTION_MASSAGE_REMOVE:  
{"id":80} 

 Player 2 18:56:03 $ACTION_MASSAGE_REMOVE:  
{"id":78} 

 Player 2 18:56:03 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":81,"_text":"Resolve StartTurnLoot 10 "}} 

 Player 2 18:56:03 $DRAW_CARD:  
{"deckType":1} 

 Player 2 18:56:03 $MOVE_CARD:  
{"moveIndex":13,"cardId":95,"placeID":2,"flipIfFlipped":false,"firstPos":{"x":1,"y":-5,"z":0},"playerId":2,"placeType":"Hand"} 

 Player 1 18:56:04 $MOVE_CARD_END:  
{"moveIndex":13,"cardId":95,"flipIfFlipped":false,"playerId":2} 

 Player 2 18:56:04 $CARD_DRAWN:  
{"playerId":2,"deckType":1,"drawnCardId":95} 

 Player 2 18:56:04 $FLIP_CARD:  
{"cardId":95} 

 Player 2 18:56:04 $PLAYER_GET_LOOT:  
{"playerId":2,"cardId":95} 

 Player 2 18:56:04 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 start turn loot"} 

 Player 2 18:56:04 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":10,"creatorCardId":298,"turnPlayerCardId":298,"stackEffectType":13}} 

 Player 2 18:56:04 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 18:56:04 $REMOVE_SE_VIS_PREV:  
{"stackEffect":{"entityId":10,"creatorCardId":298,"turnPlayerCardId":298,"stackEffectType":13}} 

 Player 2 18:56:04 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":82,"_text":"Remove After Resolve StartTurnLoot 10  "}} 

 Player 2 18:56:04 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 18:56:04 $REMOVE_FROM_STACK:  
{"stackEffect":{"entityId":10,"creatorCardId":298,"turnPlayerCardId":298,"stackEffectType":13}} 

 Player 2 18:56:04 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":83,"_text":"Response Remove After Resolve StartTurnLoot 10"},"childOfId":82} 

 Player 2 18:56:04 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":84,"_text":"Wait For Response From Player 1 "},"childOfId":82} 

 Player 2 18:56:04 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 2 18:56:04 $GET_REACTION:  
{"playerId":1,"activePlayerId":2} 

 Player 1 18:56:04 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 start turn loot"} 

 Player 1 18:56:04 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 start turn loot"} 

 Player 1 18:56:04 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 start turn loot"} 

 Player 1 18:56:04 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 start turn loot"} 

 Player 1 18:56:04 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 start turn loot"} 

 Player 1 18:56:04 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 start turn loot"} 

 Player 1 18:56:04 $RESPOND_TO:  
{"playerId":2,"stackEffectResponse":false} 

 Player 2 18:56:04 $ACTION_MASSAGE_REMOVE:  
{"id":84} 

 Player 2 18:56:04 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":85,"_text":"Wait For Response From Player 2 "},"childOfId":82} 

 Player 2 18:56:04 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 2 18:56:04 $ACTION_MASSAGE_REMOVE:  
{"id":85} 

 Player 2 18:56:04 $ACTION_MASSAGE_REMOVE:  
{"id":83} 

 Player 2 18:56:04 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":86,"_text":"Stack Was Emptied "}} 

 Player 2 18:56:04 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 18:56:41 $SHOW_DECISION:  
{"startCardId":298,"endCardId":273} 

 Player 2 18:56:44 $NEXT_STACK_ID:  

 Player 2 18:56:44 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 18:56:44 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2  declared attack on The Bloat"} 

 Player 2 18:56:44 $ADD_TO_STACK:  
{"stackEffect":{"entityId":11,"creatorCardId":298,"attackingPlayerCardId":298,"idOfCardBeingAttacked":273,"stackEffectType":4}} 

 Player 2 18:56:44 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2  declared attack on The Bloat"} 

 Player 2 18:56:44 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":11,"creatorCardId":298,"attackingPlayerCardId":298,"idOfCardBeingAttacked":273,"stackEffectType":4}} 

 Player 2 18:56:44 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":87,"_text":"Add DeclareAttack 11 "}} 

 Player 2 18:56:44 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 2 18:56:44 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2  declared attack on The Bloat"} 

 Player 2 18:56:44 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":11,"creatorCardId":298,"attackingPlayerCardId":298,"idOfCardBeingAttacked":273,"stackEffectType":4}} 

 Player 2 18:56:44 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":88,"_text":"Response Adding DeclareAttack 11"},"childOfId":87} 

 Player 2 18:56:44 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":89,"_text":"Wait For Response From Player 2 "},"childOfId":87} 

 Player 2 18:56:44 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 2 18:56:44 $ACTION_MASSAGE_REMOVE:  
{"id":89} 

 Player 2 18:56:44 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":90,"_text":"Wait For Response From Player 1 "},"childOfId":87} 

 Player 2 18:56:45 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 2 18:56:45 $GET_REACTION:  
{"playerId":1,"activePlayerId":2} 

 Player 1 18:56:45 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 18:56:45 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 18:56:45 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2  declared attack on The Bloat"} 

 Player 1 18:56:45 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2  declared attack on The Bloat"} 

 Player 1 18:56:45 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2  declared attack on The Bloat"} 

 Player 1 18:56:45 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2  declared attack on The Bloat"} 

 Player 1 18:56:45 $RESPOND_TO:  
{"playerId":2,"stackEffectResponse":false} 

 Player 2 18:56:45 $ACTION_MASSAGE_REMOVE:  
{"id":90} 

 Player 2 18:56:45 $ACTION_MASSAGE_REMOVE:  
{"id":88} 

 Player 2 18:56:45 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":91,"_text":"Resolve DeclareAttack 11 "}} 

 Player 2 18:56:45 $ACTIVATE_PARTICLE_EFFECT:  
{"cardId":273,"particleType":5} 

 Player 2 18:56:45 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"PLAYER_DECLARE_ATTACK","args":[],"result":null,"preventMethod":false,"methodScopeId":298,"scopeIsPlayer":true,"index":4,"originStackId":11},"isAfterActivation":true,"index":4} 

 Player 2 18:56:45 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2  declared attack on The Bloat"} 

 Player 2 18:56:45 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":11,"creatorCardId":298,"attackingPlayerCardId":298,"idOfCardBeingAttacked":273,"stackEffectType":4}} 

 Player 2 18:56:45 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 18:56:45 $REMOVE_SE_VIS_PREV:  
{"stackEffect":{"entityId":11,"creatorCardId":298,"attackingPlayerCardId":298,"idOfCardBeingAttacked":273,"stackEffectType":4}} 

 Player 2 18:56:45 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":92,"_text":"Remove After Resolve DeclareAttack 11  "}} 

 Player 2 18:56:45 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 18:56:45 $REMOVE_FROM_STACK:  
{"stackEffect":{"entityId":11,"creatorCardId":298,"attackingPlayerCardId":298,"idOfCardBeingAttacked":273,"stackEffectType":4}} 

 Player 2 18:56:45 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":93,"_text":"Response Remove After Resolve DeclareAttack 11"},"childOfId":92} 

 Player 2 18:56:45 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":94,"_text":"Wait For Response From Player 1 "},"childOfId":92} 

 Player 2 18:56:45 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 2 18:56:45 $GET_REACTION:  
{"playerId":1,"activePlayerId":2} 

 Player 1 18:56:45 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2  declared attack on The Bloat"} 

 Player 1 18:56:45 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2  declared attack on The Bloat"} 

 Player 1 18:56:45 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2  declared attack on The Bloat"} 

 Player 1 18:56:45 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2  declared attack on The Bloat"} 

 Player 1 18:56:45 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2  declared attack on The Bloat"} 

 Player 1 18:56:45 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2  declared attack on The Bloat"} 

 Player 1 18:56:45 $RESPOND_TO:  
{"playerId":2,"stackEffectResponse":false} 

 Player 2 18:56:45 $ACTION_MASSAGE_REMOVE:  
{"id":94} 

 Player 2 18:56:45 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":95,"_text":"Wait For Response From Player 2 "},"childOfId":92} 

 Player 2 18:56:45 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 2 18:56:45 $ACTION_MASSAGE_REMOVE:  
{"id":95} 

 Player 2 18:56:46 $ACTION_MASSAGE_REMOVE:  
{"id":93} 

 Player 2 18:56:46 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":96,"_text":"Stack Was Emptied "}} 

 Player 2 18:56:46 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 18:56:47 $SHOW_DECISION:  
{"startCardId":298,"endCardId":299} 

 Player 2 18:56:50 $NEXT_STACK_ID:  

 Player 2 18:56:50 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 18:56:50 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 activated HolyMantle"} 

 Player 2 18:56:50 $ADD_TO_STACK:  
{"stackEffect":{"entityId":12,"creatorCardId":298,"hasLockingStackEffect":false,"itemToPlayCardId":299,"itemPlayerId":2,"hasDataBeenCollectedYet":false,"stackEffectType":1}} 

 Player 2 18:56:50 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 activated HolyMantle"} 

 Player 2 18:56:50 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":12,"creatorCardId":298,"hasLockingStackEffect":false,"itemToPlayCardId":299,"itemPlayerId":2,"hasDataBeenCollectedYet":false,"stackEffectType":1}} 

 Player 2 18:56:50 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":97,"_text":"Add ActivateItem 12 "}} 

 Player 1 18:56:50 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 18:56:50 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 18:56:50 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 activated HolyMantle"} 

 Player 1 18:56:50 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 activated HolyMantle"} 

 Player 2 18:56:51 $SHOW_DECISION:  
{"startCardId":299,"endCardId":298} 

 Player 2 18:56:54 $USE_ITEM:  
{"cardId":299} 

 Player 2 18:56:54 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 2 18:56:54 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 activated HolyMantle"} 

 Player 2 18:56:54 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":12,"creatorCardId":298,"hasLockingStackEffect":false,"itemToPlayCardId":299,"itemPlayerId":2,"effectToDoData":{"type":1,"index":0},"hasDataBeenCollectedYet":true,"stackEffectType":1}} 

 Player 2 18:56:54 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":98,"_text":"Response Adding ActivateItem 12"},"childOfId":97} 

 Player 2 18:56:54 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":99,"_text":"Wait For Response From Player 2 "},"childOfId":97} 

 Player 2 18:56:54 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 2 18:56:54 $ACTION_MASSAGE_REMOVE:  
{"id":99} 

 Player 2 18:56:54 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":100,"_text":"Wait For Response From Player 1 "},"childOfId":97} 

 Player 2 18:56:54 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 2 18:56:54 $GET_REACTION:  
{"playerId":1,"activePlayerId":2} 

 Player 1 18:56:54 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 activated HolyMantle"} 

 Player 1 18:56:54 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 activated HolyMantle"} 

 Player 1 18:56:54 $RESPOND_TO:  
{"playerId":2,"stackEffectResponse":false} 

 Player 2 18:56:54 $ACTION_MASSAGE_REMOVE:  
{"id":100} 

 Player 2 18:56:54 $ACTION_MASSAGE_REMOVE:  
{"id":98} 

 Player 2 18:56:54 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":101,"_text":"Resolve ActivateItem 12 "}} 

 Player 2 18:56:54 $ACTIVATE_PARTICLE_EFFECT:  
{"cardId":299,"particleType":6} 

 Player 2 18:56:56 $DISABLE_PARTICLE_EFFECT:  
{"cardId":299,"particleType":6} 

 Player 2 18:56:56 $REGISTER_ONE_TURN_PASSIVE_EFFECT:  
{"cardId":299,"effectIndex":{"type":3,"index":0},"conditionData":[{"effectTargets":[298],"chainEffectsData":[],"methodArgs":[],"isPassive":false,"effectCard":299,"effectCardOwner":298,"effectCardPlayer":298}]} 

 Player 2 18:56:56 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 activated HolyMantle"} 

 Player 2 18:56:56 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":12,"creatorCardId":298,"hasLockingStackEffect":false,"itemToPlayCardId":299,"itemPlayerId":2,"hasDataBeenCollectedYet":true,"stackEffectType":1}} 

 Player 2 18:56:56 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 18:56:57 $REMOVE_SE_VIS_PREV:  
{"stackEffect":{"entityId":12,"creatorCardId":298,"hasLockingStackEffect":false,"itemToPlayCardId":299,"itemPlayerId":2,"hasDataBeenCollectedYet":true,"stackEffectType":1}} 

 Player 2 18:56:57 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":102,"_text":"Remove After Resolve ActivateItem 12  "}} 

 Player 2 18:56:57 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 18:56:57 $REMOVE_FROM_STACK:  
{"stackEffect":{"entityId":12,"creatorCardId":298,"hasLockingStackEffect":false,"itemToPlayCardId":299,"itemPlayerId":2,"hasDataBeenCollectedYet":true,"stackEffectType":1}} 

 Player 2 18:56:57 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":103,"_text":"Response Remove After Resolve ActivateItem 12"},"childOfId":102} 

 Player 2 18:56:57 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":104,"_text":"Wait For Response From Player 1 "},"childOfId":102} 

 Player 2 18:56:57 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 2 18:56:57 $GET_REACTION:  
{"playerId":1,"activePlayerId":2} 

 Player 1 18:56:57 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 activated HolyMantle"} 

 Player 1 18:56:57 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 activated HolyMantle"} 

 Player 1 18:56:57 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 activated HolyMantle"} 

 Player 1 18:56:57 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 activated HolyMantle"} 

 Player 1 18:56:57 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 activated HolyMantle"} 

 Player 1 18:56:57 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 activated HolyMantle"} 

 Player 1 18:56:57 $RESPOND_TO:  
{"playerId":2,"stackEffectResponse":false} 

 Player 2 18:56:57 $ACTION_MASSAGE_REMOVE:  
{"id":104} 

 Player 2 18:56:57 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":105,"_text":"Wait For Response From Player 2 "},"childOfId":102} 

 Player 2 18:56:57 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 2 18:56:57 $ACTION_MASSAGE_REMOVE:  
{"id":105} 

 Player 2 18:56:57 $ACTION_MASSAGE_REMOVE:  
{"id":103} 

 Player 2 18:56:57 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":106,"_text":"Stack Was Emptied "}} 

 Player 2 18:56:57 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 18:56:59 $NEXT_STACK_ID:  

 Player 2 18:56:59 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 18:56:59 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is rolling against The Bloat<Monster>"} 

 Player 2 18:56:59 $ADD_TO_STACK:  
{"stackEffect":{"entityId":13,"creatorCardId":298,"rollingPlayerCardId":298,"stackEffectType":2,"attackedMonsterCardId":273}} 

 Player 2 18:56:59 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is rolling against The Bloat<Monster>"} 

 Player 2 18:56:59 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":13,"creatorCardId":298,"rollingPlayerCardId":298,"stackEffectType":2,"attackedMonsterCardId":273}} 

 Player 2 18:56:59 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":107,"_text":"Add AttackRoll 13 "}} 

 Player 2 18:56:59 $ROLL_DICE:  
{"playerId":2} 

 Player 1 18:56:59 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 18:56:59 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 18:56:59 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is rolling against The Bloat<Monster>"} 

 Player 1 18:56:59 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is rolling against The Bloat<Monster>"} 

 Player 2 18:57:01 $ROLL_DICE_ENDED:  
{"playerId":2,"numberRolled":6} 

 Player 2 18:57:01 $UPDATE_STACK_VIS:  
{"stackId":13,"text":"player rolled 6 vs The Bloat<Monster>"} 

 Player 2 18:57:01 $SHOW_DICE_ROLL:  
{"stackId":13} 

 Player 2 18:57:04 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 rolled 6 vs The Bloat<Monster>"} 

 Player 2 18:57:04 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 2 18:57:04 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 rolled 6 vs The Bloat<Monster>"} 

 Player 2 18:57:04 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":13,"creatorCardId":298,"numberRolled":6,"rollingPlayerCardId":298,"stackEffectType":2,"attackedMonsterCardId":273}} 

 Player 2 18:57:04 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":108,"_text":"Response Adding AttackRoll 13"},"childOfId":107} 

 Player 2 18:57:04 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":109,"_text":"Wait For Response From Player 2 "},"childOfId":107} 

 Player 2 18:57:04 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 2 18:57:04 $ACTION_MASSAGE_REMOVE:  
{"id":109} 

 Player 2 18:57:04 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":110,"_text":"Wait For Response From Player 1 "},"childOfId":107} 

 Player 2 18:57:04 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 2 18:57:04 $GET_REACTION:  
{"playerId":1,"activePlayerId":2} 

 Player 1 18:57:04 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is rolling against The Bloat<Monster>"} 

 Player 1 18:57:04 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is rolling against The Bloat<Monster>"} 

 Player 1 18:57:04 $RESPOND_TO:  
{"playerId":2,"stackEffectResponse":false} 

 Player 2 18:57:04 $ACTION_MASSAGE_REMOVE:  
{"id":110} 

 Player 2 18:57:04 $ACTION_MASSAGE_REMOVE:  
{"id":108} 

 Player 2 18:57:04 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":111,"_text":"Resolve AttackRoll 13 "}} 

 Player 2 18:57:04 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":112,"_text":"Added 0 to original roll"}} 

 Player 2 18:57:04 $NEXT_STACK_ID:  

 Player 2 18:57:04 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 rolled 6 vs The Bloat<Monster>"} 

 Player 2 18:57:04 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 2 18:57:04 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat combat damage to The Lost \n2:Player 2 rolled 6 vs The Bloat<Monster>"} 

 Player 2 18:57:04 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":14,"creatorCardId":298,"entityToDoDamageCardId":273,"entityToTakeDamageCardId":298,"isMonsterDoDamage":true,"isPlayerTakeDamage":true,"isMonsterTakeDamage":false,"isPlayerDoDamage":false,"stackEffectType":3}} 

 Player 2 18:57:04 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat combat damage to The Lost \n2:Player 2 rolled 6 vs The Bloat<Monster>"} 

 Player 2 18:57:04 $REMOVE_SE_VIS_PREV:  
{"stackEffect":{"entityId":13,"creatorCardId":298,"numberRolled":6,"rollingPlayerCardId":298,"stackEffectType":2,"attackedMonsterCardId":273}} 

 Player 2 18:57:04 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat combat damage to The Lost \n2:Player 2 rolled 6 vs The Bloat<Monster>"} 

 Player 2 18:57:04 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":14,"creatorCardId":298,"entityToDoDamageCardId":273,"entityToTakeDamageCardId":298,"isMonsterDoDamage":true,"isPlayerTakeDamage":true,"isMonsterTakeDamage":false,"isPlayerDoDamage":false,"stackEffectType":3}} 

 Player 2 18:57:04 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat combat damage to The Lost \n2:Player 2 rolled 6 vs The Bloat<Monster>"} 

 Player 2 18:57:04 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":13,"creatorCardId":298,"numberRolled":6,"rollingPlayerCardId":298,"stackEffectType":2,"attackedMonsterCardId":273}} 

 Player 2 18:57:04 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat combat damage to The Lost \n2:Player 2 rolled 6 vs The Bloat<Monster>"} 

 Player 2 18:57:04 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat combat damage to The Lost \n2:Player 2 rolled 6 vs The Bloat<Monster>"} 

 Player 2 18:57:04 $REPLACE_STACK:  
{"currentStack":[{"entityId":14,"creatorCardId":298,"entityToDoDamageCardId":273,"entityToTakeDamageCardId":298,"isMonsterDoDamage":true,"isPlayerTakeDamage":true,"isMonsterTakeDamage":false,"isPlayerDoDamage":false,"stackEffectType":3},{"entityId":13,"creatorCardId":298,"numberRolled":6,"rollingPlayerCardId":298,"stackEffectType":2,"attackedMonsterCardId":273}]} 

 Player 2 18:57:04 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"PLAYER_ROLL_DICE","args":[{"type":2,"number":1},{"type":2,"number":2},{"type":2,"number":4}],"result":null,"preventMethod":false,"methodScopeId":298,"scopeIsPlayer":true,"index":5,"originStackId":13},"isAfterActivation":true,"index":5} 

 Player 2 18:57:04 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat combat damage to The Lost \n2:Player 2 rolled 6 vs The Bloat<Monster>"} 

 Player 2 18:57:04 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":13,"creatorCardId":298,"numberRolled":6,"rollingPlayerCardId":298,"stackEffectType":2,"attackedMonsterCardId":273}} 

 Player 2 18:57:04 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat combat damage to The Lost"} 

 Player 2 18:57:05 $REMOVE_SE_VIS_PREV:  
{"stackEffect":{"entityId":13,"creatorCardId":298,"numberRolled":6,"rollingPlayerCardId":298,"stackEffectType":2,"attackedMonsterCardId":273}} 

 Player 2 18:57:05 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":113,"_text":"Remove After Resolve AttackRoll 13  "}} 

 Player 2 18:57:05 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat combat damage to The Lost"} 

 Player 2 18:57:05 $REMOVE_FROM_STACK:  
{"stackEffect":{"entityId":13,"creatorCardId":298,"numberRolled":6,"rollingPlayerCardId":298,"stackEffectType":2,"attackedMonsterCardId":273}} 

 Player 2 18:57:05 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":114,"_text":"Response Remove After Resolve AttackRoll 13"},"childOfId":113} 

 Player 2 18:57:05 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":115,"_text":"Wait For Response From Player 2 "},"childOfId":113} 

 Player 2 18:57:05 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 2 18:57:05 $ACTION_MASSAGE_REMOVE:  
{"id":115} 

 Player 2 18:57:05 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":116,"_text":"Wait For Response From Player 1 "},"childOfId":113} 

 Player 2 18:57:05 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 2 18:57:05 $GET_REACTION:  
{"playerId":1,"activePlayerId":2} 

 Player 1 18:57:05 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is rolling against The Bloat<Monster>"} 

 Player 1 18:57:05 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is rolling against The Bloat<Monster>"} 

 Player 1 18:57:05 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat combat damage to The Lost"} 

 Player 1 18:57:05 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat combat damage to The Lost"} 

 Player 1 18:57:05 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat combat damage to The Lost"} 

 Player 1 18:57:05 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat combat damage to The Lost"} 

 Player 1 18:57:05 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat combat damage to The Lost"} 

 Player 1 18:57:05 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat combat damage to The Lost"} 

 Player 1 18:57:05 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat combat damage to The Lost"} 

 Player 1 18:57:05 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat combat damage to The Lost"} 

 Player 1 18:57:05 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat combat damage to The Lost"} 

 Player 1 18:57:05 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat combat damage to The Lost"} 

 Player 1 18:57:05 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat combat damage to The Lost \n2:Player 2 is rolling against The Bloat<Monster>"} 

 Player 1 18:57:05 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat combat damage to The Lost \n2:Player 2 is rolling against The Bloat<Monster>"} 

 Player 1 18:57:05 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat combat damage to The Lost \n2:Player 2 is rolling against The Bloat<Monster>"} 

 Player 1 18:57:05 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat combat damage to The Lost \n2:Player 2 is rolling against The Bloat<Monster>"} 

 Player 1 18:57:05 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat combat damage to The Lost \n2:Player 2 is rolling against The Bloat<Monster>"} 

 Player 1 18:57:05 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat combat damage to The Lost \n2:Player 2 is rolling against The Bloat<Monster>"} 

 Player 1 18:57:05 $RESPOND_TO:  
{"playerId":2,"stackEffectResponse":false} 

 Player 2 18:57:05 $ACTION_MASSAGE_REMOVE:  
{"id":116} 

 Player 2 18:57:05 $ACTION_MASSAGE_REMOVE:  
{"id":114} 

 Player 2 18:57:05 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":117,"_text":"Resolve CombatDamage 14 "}} 

 Player 2 18:57:06 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat 2 combat damage to The Lost"} 

 Player 2 18:57:06 $UPDATE_STACK_VIS:  
{"stackId":14,"text":"The Bloat will deal 2 combat damage to The Lost"} 

 Player 2 18:57:06 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat 2 combat damage to The Lost"} 

 Player 2 18:57:06 $PLAYER_GET_HIT:  
{"playerId":2,"damage":2,"damageDealerId":273} 

 Player 2 18:57:06 $NEXT_STACK_ID:  

 Player 2 18:57:06 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat 2 combat damage to The Lost"} 

 Player 2 18:57:06 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 2 18:57:06 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat 2 combat damage to The Lost \n2:Player 2 is about to die"} 

 Player 2 18:57:06 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":15,"creatorCardId":298,"playerToDieCardId":298,"stackEffectType":15,"killerId":273}} 

 Player 2 18:57:06 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat 2 combat damage to The Lost \n2:Player 2 is about to die"} 

 Player 2 18:57:06 $REMOVE_SE_VIS_PREV:  
{"stackEffect":{"entityId":14,"creatorCardId":298,"entityToDoDamageCardId":273,"entityToTakeDamageCardId":298,"isMonsterDoDamage":true,"isPlayerTakeDamage":true,"isMonsterTakeDamage":false,"isPlayerDoDamage":false,"stackEffectType":3}} 

 Player 2 18:57:06 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat 2 combat damage to The Lost \n2:Player 2 is about to die"} 

 Player 2 18:57:06 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":14,"creatorCardId":298,"entityToDoDamageCardId":273,"entityToTakeDamageCardId":298,"isMonsterDoDamage":true,"isPlayerTakeDamage":true,"isMonsterTakeDamage":false,"isPlayerDoDamage":false,"stackEffectType":3}} 

 Player 2 18:57:06 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat 2 combat damage to The Lost \n2:Player 2 is about to die"} 

 Player 2 18:57:06 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":15,"creatorCardId":298,"playerToDieCardId":298,"stackEffectType":15,"killerId":273}} 

 Player 2 18:57:06 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat 2 combat damage to The Lost \n2:Player 2 is about to die"} 

 Player 2 18:57:06 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat 2 combat damage to The Lost \n2:Player 2 is about to die"} 

 Player 2 18:57:06 $REPLACE_STACK:  
{"currentStack":[{"entityId":14,"creatorCardId":298,"entityToDoDamageCardId":273,"entityToTakeDamageCardId":298,"isMonsterDoDamage":true,"isPlayerTakeDamage":true,"isMonsterTakeDamage":false,"isPlayerDoDamage":false,"stackEffectType":3},{"entityId":15,"creatorCardId":298,"playerToDieCardId":298,"stackEffectType":15,"killerId":273}]} 

 Player 2 18:57:06 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"PLAYER_GET_HIT","args":[{"type":2,"number":2},{"type":0,"number":273}],"result":null,"preventMethod":false,"methodScopeId":298,"scopeIsPlayer":true,"index":6,"originStackId":-1},"isAfterActivation":true,"index":6} 

 Player 2 18:57:06 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die"} 

 Player 2 18:57:06 $REMOVE_SE_VIS_PREV:  
{"stackEffect":{"entityId":14,"creatorCardId":298,"entityToDoDamageCardId":273,"entityToTakeDamageCardId":298,"isMonsterDoDamage":true,"isPlayerTakeDamage":true,"isMonsterTakeDamage":false,"isPlayerDoDamage":false,"stackEffectType":3}} 

 Player 2 18:57:06 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":118,"_text":"Remove After Resolve CombatDamage 14  "}} 

 Player 2 18:57:06 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die"} 

 Player 2 18:57:06 $REMOVE_FROM_STACK:  
{"stackEffect":{"entityId":14,"creatorCardId":298,"entityToDoDamageCardId":273,"entityToTakeDamageCardId":298,"isMonsterDoDamage":true,"isPlayerTakeDamage":true,"isMonsterTakeDamage":false,"isPlayerDoDamage":false,"stackEffectType":3}} 

 Player 2 18:57:06 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":119,"_text":"Response Remove After Resolve CombatDamage 14"},"childOfId":118} 

 Player 2 18:57:06 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":120,"_text":"Wait For Response From Player 2 "},"childOfId":118} 

 Player 2 18:57:06 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 2 18:57:06 $ACTION_MASSAGE_REMOVE:  
{"id":120} 

 Player 2 18:57:06 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":121,"_text":"Wait For Response From Player 1 "},"childOfId":118} 

 Player 2 18:57:06 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 2 18:57:06 $GET_REACTION:  
{"playerId":1,"activePlayerId":2} 

 Player 1 18:57:06 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat combat damage to The Lost"} 

 Player 1 18:57:06 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat combat damage to The Lost"} 

 Player 1 18:57:07 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die"} 

 Player 1 18:57:07 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die"} 

 Player 1 18:57:07 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die"} 

 Player 1 18:57:07 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die"} 

 Player 1 18:57:07 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die"} 

 Player 1 18:57:07 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die"} 

 Player 1 18:57:07 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die"} 

 Player 1 18:57:07 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die"} 

 Player 1 18:57:07 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die"} 

 Player 1 18:57:07 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die"} 

 Player 1 18:57:07 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat combat damage to The Lost \n2:Player 2 is about to die"} 

 Player 1 18:57:07 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat combat damage to The Lost \n2:Player 2 is about to die"} 

 Player 1 18:57:07 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat combat damage to The Lost \n2:Player 2 is about to die"} 

 Player 1 18:57:07 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:The Bloat combat damage to The Lost \n2:Player 2 is about to die"} 

 Player 1 18:57:07 $RESPOND_TO:  
{"playerId":2,"stackEffectResponse":false} 

 Player 2 18:57:07 $ACTION_MASSAGE_REMOVE:  
{"id":121} 

 Player 2 18:57:07 $ACTION_MASSAGE_REMOVE:  
{"id":119} 

 Player 2 18:57:07 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":122,"_text":"Resolve PlayerDeath 15 "}} 

 Player 2 18:57:07 $DISABLE_PARTICLE_EFFECT:  
{"cardId":273,"particleType":5} 

 Player 2 18:57:07 $CANCEL_ATTACK:  

 Player 2 18:57:07 $NEXT_STACK_ID:  

 Player 2 18:57:07 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die"} 

 Player 2 18:57:07 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"PLAYER_PAY_DEATH_PANELTIES","args":[],"result":null,"preventMethod":false,"methodScopeId":298,"scopeIsPlayer":true,"index":1,"originStackId":16},"isAfterActivation":false,"index":1} 

 Player 2 18:57:07 $NEXT_STACK_ID:  

 Player 2 18:57:07 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die \n2:Player 2 is about to pay death penalties"} 

 Player 2 18:57:07 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die \n2:Player 2 is about to pay death penalties \n3:Activate HolyMantle effect PreventDeathPanelties<PreventDeathPanelties>"} 

 Player 2 18:57:07 $ADD_TO_STACK:  
{"stackEffect":{"effectCollectedData":null,"entityId":17,"creatorCardId":298,"hasLockingStackEffect":false,"cardActivatorId":2,"cardWithEffectId":299,"effectToDo":{"effectName":"PreventDeathPenalties","cardEffectNum":0,"cardPlayerId":2,"cardId":299,"effctType":3},"isAfterActivation":false,"index":1,"hasDataBeenCollectedYet":false,"stackEffectType":14}} 

 Player 2 18:57:07 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die \n2:Player 2 is about to pay death penalties \n3:Activate HolyMantle effect PreventDeathPanelties<PreventDeathPanelties>"} 

 Player 2 18:57:07 $ADD_SE_VIS_PREV:  
{"stackEffect":{"effectCollectedData":null,"entityId":17,"creatorCardId":298,"hasLockingStackEffect":false,"cardActivatorId":2,"cardWithEffectId":299,"effectToDo":{"effectName":"PreventDeathPenalties","cardEffectNum":0,"cardPlayerId":2,"cardId":299,"effctType":3},"isAfterActivation":false,"index":1,"hasDataBeenCollectedYet":false,"stackEffectType":14}} 

 Player 2 18:57:07 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":123,"_text":"Add ActivatePassiveEffect 17 "}} 

 Player 2 18:57:07 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die \n2:Player 2 is about to pay death penalties \n3:Activate HolyMantle effect PreventDeathPanelties<PreventDeathPanelties>"} 

 Player 2 18:57:07 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die \n2:Player 2 is about to pay death penalties \n3:Activate HolyMantle effect PreventDeathPanelties<PreventDeathPanelties>"} 

 Player 2 18:57:07 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"effectCollectedData":null,"entityId":17,"creatorCardId":298,"hasLockingStackEffect":false,"cardActivatorId":2,"cardWithEffectId":299,"effectToDo":{"effectName":"PreventDeathPenalties","cardEffectNum":0,"cardPlayerId":2,"cardId":299,"effctType":3},"isAfterActivation":false,"index":1,"hasDataBeenCollectedYet":false,"stackEffectType":14}} 

 Player 2 18:57:07 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":124,"_text":"Response Adding ActivatePassiveEffect 17"},"childOfId":123} 

 Player 2 18:57:07 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":125,"_text":"Wait For Response From Player 1 "},"childOfId":123} 

 Player 2 18:57:07 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 2 18:57:08 $GET_REACTION:  
{"playerId":1,"activePlayerId":2} 

 Player 1 18:57:08 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die"} 

 Player 1 18:57:08 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die"} 

 Player 1 18:57:08 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die \n2:Activate HolyMantle "} 

 Player 1 18:57:08 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die \n2:Activate HolyMantle "} 

 Player 1 18:57:08 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die \n2:Activate HolyMantle "} 

 Player 1 18:57:08 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die \n2:Activate HolyMantle "} 

 Player 1 18:57:08 $RESPOND_TO:  
{"playerId":2,"stackEffectResponse":false} 

 Player 2 18:57:08 $ACTION_MASSAGE_REMOVE:  
{"id":125} 

 Player 2 18:57:08 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":126,"_text":"Wait For Response From Player 2 "},"childOfId":123} 

 Player 2 18:57:08 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 2 18:58:38 $ACTION_MASSAGE_REMOVE:  
{"id":126} 

 Player 2 18:58:38 $ACTION_MASSAGE_REMOVE:  
{"id":124} 

 Player 2 18:58:38 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":127,"_text":"Resolve ActivatePassiveEffect 17 "}} 

 Player 2 18:58:38 $ACTIVATE_PARTICLE_EFFECT:  
{"cardId":299,"particleType":6} 

 Player 2 18:58:40 $DISABLE_PARTICLE_EFFECT:  
{"cardId":299,"particleType":6} 

 Player 2 18:58:40 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die \n2:Activate HolyMantle effect PreventDeathPanelties<PreventDeathPanelties>"} 

 Player 2 18:58:40 $REMOVE_SE_VIS_PREV:  
{"stackEffect":{"entityId":16,"creatorCardId":298,"playerToPayCardId":298,"stackEffectType":16}} 

 Player 2 18:58:40 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":128,"_text":"Fizzle PlayerDeathPenalties 16"}} 

 Player 2 18:58:40 $FIZZLE_STACK_EFFECT:  
{"entityId":16} 

 Player 2 18:58:40 $PLAYER_HEAL:  
{"playerId":2,"hpToHeal":1,"healDown":true} 

 Player 2 18:58:40 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"PLAYER_PAY_DEATH_PANELTIES","args":[],"result":null,"preventMethod":true,"methodScopeId":298,"scopeIsPlayer":true,"index":1,"originStackId":16},"isAfterActivation":false,"index":1} 

 Player 2 18:58:40 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die \n2:Activate HolyMantle effect PreventDeathPanelties<PreventDeathPanelties>"} 

 Player 2 18:58:40 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"effectCollectedData":null,"entityId":17,"creatorCardId":298,"hasLockingStackEffect":false,"cardActivatorId":2,"cardWithEffectId":299,"isAfterActivation":false,"index":1,"hasDataBeenCollectedYet":false,"stackEffectType":14}} 

 Player 2 18:58:40 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die"} 

 Player 2 18:58:40 $REMOVE_SE_VIS_PREV:  
{"stackEffect":{"effectCollectedData":null,"entityId":17,"creatorCardId":298,"hasLockingStackEffect":false,"cardActivatorId":2,"cardWithEffectId":299,"isAfterActivation":false,"index":1,"hasDataBeenCollectedYet":false,"stackEffectType":14}} 

 Player 2 18:58:41 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":129,"_text":"Remove After Resolve ActivatePassiveEffect 17  "}} 

 Player 2 18:58:41 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die"} 

 Player 2 18:58:41 $REMOVE_FROM_STACK:  
{"stackEffect":{"effectCollectedData":null,"entityId":17,"creatorCardId":298,"hasLockingStackEffect":false,"cardActivatorId":2,"cardWithEffectId":299,"isAfterActivation":false,"index":1,"hasDataBeenCollectedYet":false,"stackEffectType":14}} 

 Player 2 18:58:41 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":130,"_text":"Response Remove After Resolve ActivatePassiveEffect 17"},"childOfId":129} 

 Player 2 18:58:41 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":131,"_text":"Wait For Response From Player 2 "},"childOfId":129} 

 Player 2 18:58:41 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 18:58:41 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die \n2:Activate HolyMantle "} 

 Player 1 18:58:41 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die \n2:Activate HolyMantle "} 

 Player 1 18:58:41 $PLAYER_HEAL:  
{"playerId":2,"hpToHeal":1} 

 Player 1 18:58:41 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die \n2:Activate HolyMantle "} 

 Player 1 18:58:41 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die \n2:Activate HolyMantle "} 

 Player 1 18:58:41 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die \n2:Activate HolyMantle "} 

 Player 1 18:58:41 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die \n2:Activate HolyMantle "} 

 Player 1 18:58:42 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die \n2:Activate HolyMantle "} 

 Player 1 18:58:42 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die \n2:Activate HolyMantle "} 

 Player 2 19:04:38 $MATCH: 