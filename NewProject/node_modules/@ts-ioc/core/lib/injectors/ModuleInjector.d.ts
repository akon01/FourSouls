import { IModuleInjector, InjectorResult } from './IModuleInjector';
import { Type } from '../types';
import { IContainer } from '../IContainer';
import { IModuleValidate } from './IModuleValidate';
/**
 * base module injector. abstract class.
 *
 * @export
 * @abstract
 * @class BaseModuleInjector
 * @implements {IModuleInjector}
 */
export declare class ModuleInjector implements IModuleInjector {
    protected validate?: IModuleValidate;
    protected skipNext?: boolean;
    /**
     *Creates an instance of BaseModuleInjector.
     * @param {IModuleValidate} [validate]
     * @param {boolean} [skipNext] skip next when has match module to injector.
     * @memberof BaseModuleInjector
     */
    constructor(validate?: IModuleValidate, skipNext?: boolean);
    inject(container: IContainer, modules: Type<any>[]): Promise<InjectorResult>;
    syncInject(container: IContainer, modules: Type<any>[]): InjectorResult;
    protected valid(container: IContainer, type: Type<any>): boolean;
    protected getNext(all: Type<any>[], filtered: Type<any>[]): Type<any>[];
    protected setup(container: IContainer, type: Type<any>): Promise<void>;
    protected syncSetup(container: IContainer, type: Type<any>): void;
    static getClassAnnations(): any;
}
