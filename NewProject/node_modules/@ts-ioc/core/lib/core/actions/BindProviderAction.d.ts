import { ActionComposite } from './ActionComposite';
import { ActionData } from '../ActionData';
import { IContainer } from '../../IContainer';
import { Token } from '../../types';
/**
 * bind provider action data.
 *
 * @export
 * @interface BindProviderActionData
 * @extends {ActionData<Token<any>[]>}
 */
export interface BindProviderActionData extends ActionData<Token<any>[]> {
}
/**
 * bind provider action. for binding a factory to an token.
 *
 * @export
 * @class BindProviderAction
 * @extends {ActionComposite}
 */
export declare class BindProviderAction extends ActionComposite {
    constructor();
    protected working(container: IContainer, data: BindProviderActionData): void;
    static getClassAnnations(): any;
}
