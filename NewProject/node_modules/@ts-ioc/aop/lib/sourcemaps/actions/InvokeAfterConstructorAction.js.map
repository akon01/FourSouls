{"version":3,"sources":["actions/InvokeAfterConstructorAction.ts"],"names":[],"mappings":";;;AAAA,qCAAuG;AACvG,wCAA2C;AAC3C,2CAA0C;AAE1C,4CAAsE;AACtE,gEAA+D;AAY/D;;;;;;GAMG;AACH;IAAkD,wDAAe;IAE7D;eACI,kBAAM,uBAAU,CAAC,6BAA6B,CAAC;IACnD,CAAC;IAES,8CAAO,GAAjB,UAAkB,SAAqB,EAAE,IAAsC;QAC3E,2BAA2B;QAC3B,IAAI,CAAC,IAAI,CAAC,MAAM,IAAI,CAAC,2CAAoB,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE;YACxD,OAAO;SACV;QAED,IAAI,OAAO,GAAG,SAAS,CAAC,GAAG,CAAC,uBAAY,CAAC,CAAC;QAC1C,IAAI,SAAS,GAAG,WAAI,CAAC,YAAY,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACnD,IAAI,OAAO,GAAG,OAAO,CAAC,UAAU,CAAC,SAAS,GAAG,cAAc,CAAC,CAAC;QAC7D,IAAI,CAAC,OAAO,EAAE;YACV,OAAO;SACV;QACD,IAAI,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;QACjC,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;QAEzB,IAAI,SAAS,GAAG,SAAS,CAAC,OAAO,CAAC,sBAAS,EAAE,eAAQ,CAAC,MAAM,CAAC,SAAS,EAAc;YAChF,IAAI,EAAE,aAAa;YACnB,KAAK,EAAE,2BAAc,CAAC,KAAK;YAC3B,QAAQ,EAAE,SAAS,GAAG,cAAc;YACpC,MAAM,EAAE,MAAM;YACd,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,MAAM,EAAE,IAAI,CAAC,MAAM;YACnB,UAAU,EAAE,UAAU;SACzB,CAAC,CAAC,CAAC;QACJ,IAAI,SAAS,GAAqB,CAAC,eAAQ,CAAC,MAAM,CAAC,sBAAS,EAAE,SAAS,CAAC,CAAC,CAAC;QAC1E,IAAI,IAAI,CAAC,WAAW,EAAE;YAClB,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;SACpC;QAED,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,UAAA,OAAO;;YACzB,CAAA,KAAA,OAAO,CAAC,YAAY,CAAC,OAAO,CAAC,UAAU,EAAE,SAAS,CAAC,CAAA,CAAC,UAAU,YAAC,OAAO,CAAC,UAAU,EAAE,OAAO,CAAC,MAAM,CAAC,WAAW,EAAE,IAAI,SAAK,SAAS,GAAE;QACvI,CAAC,CAAC,CAAC;QAEH,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,UAAA,OAAO;;YAC1B,CAAA,KAAA,OAAO,CAAC,YAAY,CAAC,OAAO,CAAC,UAAU,EAAE,SAAS,CAAC,CAAA,CAAC,UAAU,YAAC,OAAO,CAAC,UAAU,EAAE,OAAO,CAAC,MAAM,CAAC,WAAW,EAAE,IAAI,SAAK,SAAS,GAAE;QACvI,CAAC,CAAC,CAAC;IACP,CAAC;IAE0B,8CAAiB,GAAxB;QACI,OAAO,EAAC,MAAM,EAAC,8BAA8B,EAAC,QAAQ,EAAC,EAAC,aAAa,EAAC,EAAE,EAAC,SAAS,EAAC,CAAC,WAAW,EAAC,MAAM,CAAC,EAAC,EAAC,CAAC;IAC9G,CAAC;IACN,mCAAC;AAAD,CA/CnB,AA+CoB,CA/C8B,sBAAe,GA+C7C;AA/CP,oEAA4B","file":"../../actions/InvokeAfterConstructorAction.js","sourcesContent":["import { IContainer, ActionData, ActionComposite, Provider, ParamProviders, lang } from '@ts-ioc/core';\r\nimport { AdvisorToken } from '../IAdvisor';\r\nimport { AopActions } from './AopActions';\r\nimport { AdviceMetadata } from '../metadatas'\r\nimport { Joinpoint, JoinpointState, IJoinpoint } from '../joinpoints';\r\nimport { isValideAspectTarget } from '../isValideAspectTarget';\r\n\r\n/**\r\n * invoke after constructor action data.\r\n *\r\n * @export\r\n * @interface InvokeAfterConstructorActionData\r\n * @extends {ActionData<AdviceMetadata>}\r\n */\r\nexport interface InvokeAfterConstructorActionData extends ActionData<AdviceMetadata> {\r\n}\r\n\r\n/**\r\n * invoke after constructor action.\r\n *\r\n * @export\r\n * @class InvokeAfterConstructorAction\r\n * @extends {ActionComposite}\r\n */\r\nexport class InvokeAfterConstructorAction extends ActionComposite {\r\n\r\n    constructor() {\r\n        super(AopActions.invokeAfterConstructorAdvices);\r\n    }\r\n\r\n    protected working(container: IContainer, data: InvokeAfterConstructorActionData) {\r\n        // aspect class do nothing.\r\n        if (!data.target || !isValideAspectTarget(data.targetType)) {\r\n            return;\r\n        }\r\n\r\n        let advisor = container.get(AdvisorToken);\r\n        let className = lang.getClassName(data.targetType);\r\n        let advices = advisor.getAdvices(className + '.constructor');\r\n        if (!advices) {\r\n            return;\r\n        }\r\n        let targetType = data.targetType;\r\n        let target = data.target;\r\n\r\n        let joinPoint = container.resolve(Joinpoint, Provider.create('options', <IJoinpoint>{\r\n            name: 'constructor',\r\n            state: JoinpointState.After,\r\n            fullName: className + '.constructor',\r\n            target: target,\r\n            args: data.args,\r\n            params: data.params,\r\n            targetType: targetType\r\n        }));\r\n        let providers: ParamProviders[] = [Provider.create(Joinpoint, joinPoint)];\r\n        if (data.providerMap) {\r\n            providers.push(data.providerMap);\r\n        }\r\n\r\n        advices.After.forEach(advicer => {\r\n            advisor.getContainer(advicer.aspectType, container).syncInvoke(advicer.aspectType, advicer.advice.propertyKey, null, ...providers);\r\n        });\r\n\r\n        advices.Around.forEach(advicer => {\r\n            advisor.getContainer(advicer.aspectType, container).syncInvoke(advicer.aspectType, advicer.advice.propertyKey, null, ...providers);\r\n        });\r\n    }\r\n\n                        static getClassAnnations():any  {\n                            return {\"name\":\"InvokeAfterConstructorAction\",\"params\":{\"constructor\":[],\"working\":[\"container\",\"data\"]}};\n                        }\n                   }\r\n"]}