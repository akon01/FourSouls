{"version":3,"sources":["core/decorators/Providers.ts"],"names":[],"mappings":";;AAAA,0CAA6D;AAE7D,qCAAsC;AAgCtC;;;;GAIG;AACU,QAAA,SAAS,GAAwB,2BAAe,CAAoB,WAAW,EAAE,CAAC,UAAC,IAAkB;IAC9G,IAAI,CAAC,IAAI,CAAoB;QACzB,KAAK,EAAE,UAAA,GAAG,IAAI,OAAA,eAAO,CAAC,GAAG,CAAC,EAAZ,CAAY;QAC1B,WAAW,EAAE,UAAC,QAAQ,EAAE,GAAG;YACvB,QAAQ,CAAC,SAAS,GAAG,GAAG,CAAC;QAC7B,CAAC;KACJ,CAAC,CAAC;AACP,CAAC,CAAC,CAAwB,CAAC","file":"../../../core/decorators/Providers.js","sourcesContent":["import { createDecorator, ArgsIterator } from '../factories';\r\nimport { ProvidersMetadata } from '../metadatas';\r\nimport { isArray } from '../../utils';\r\nimport { ProviderTypes } from '../../providers';\r\n\r\n/**\r\n * @Providers decorator, for class. use to define the class as service of target.\r\n *\r\n * @Providers\r\n *\r\n * @export\r\n * @interface IProvidersDecorator\r\n * @extends {IClassDecorator<ProvidersMetadata>}\r\n */\r\nexport interface IProvidersDecorator {\r\n    /**\r\n     * Providers decorator, for class. use to add ref service to the class.\r\n     *\r\n     * @Providers\r\n     *\r\n     * @param {(Registration<any> | symbol | string)} providers provider reference service to target.\r\n     */\r\n    (providers: ProviderTypes[]): ClassDecorator;\r\n\r\n    /**\r\n     * Providers decorator, for class. use to add ref service to the class.\r\n     *\r\n     * @Providers\r\n     *\r\n     * @param {ProvidersMetadata} [metadata] metadata map.\r\n     */\r\n    (metadata: ProvidersMetadata): ClassDecorator;\r\n}\r\n\r\n/**\r\n * Providers decorator, for class. use to add ref service to the class.\r\n *\r\n * @Providers\r\n */\r\nexport const Providers: IProvidersDecorator = createDecorator<ProvidersMetadata>('Providers', ((args: ArgsIterator) => {\r\n    args.next<ProvidersMetadata>({\r\n        match: arg => isArray(arg),\r\n        setMetadata: (metadata, arg) => {\r\n            metadata.providers = arg;\r\n        }\r\n    });\r\n})) as IProvidersDecorator;\r\n\r\n"]}