"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var types_1 = require("../types");
var utils_1 = require("../utils");
var Singleton_1 = require("./decorators/Singleton");
var actions_1 = require("./actions");
var factories_1 = require("./factories");
var ActionFactory_1 = require("./ActionFactory");
var IMetaAccessor_1 = require("./IMetaAccessor");
/**
 * default implement life scope.
 *
 * @export
 * @class DefaultLifeScope
 * @implements {LifeScope}
 */
var DefaultLifeScope = /** @class */ (function () {
    function DefaultLifeScope(container) {
        this.container = container;
        this.decorators = [];
        this.buildAction();
    }
    DefaultLifeScope.prototype.addAction = function (action) {
        var nodepaths = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            nodepaths[_i - 1] = arguments[_i];
        }
        var parent = this.action;
        nodepaths.forEach(function (pathname) {
            parent = parent.find(function (act) { return act.name === pathname; });
        });
        if (parent) {
            parent.add(action);
        }
        return this;
    };
    DefaultLifeScope.prototype.registerDecorator = function (decorator) {
        var actions = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            actions[_i - 1] = arguments[_i];
        }
        var type = this.getDecoratorType(decorator);
        return this.registerCustomDecorator.apply(this, [decorator, type].concat(actions));
    };
    DefaultLifeScope.prototype.registerCustomDecorator = function (decorator, type) {
        var actions = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            actions[_i - 2] = arguments[_i];
        }
        var types = this.toActionName(type);
        var name = decorator.toString();
        if (!this.decorators.some(function (d) { return d.name === name; })) {
            this.decorators.push({
                name: name,
                types: types,
                actions: actions
            });
        }
        return this;
    };
    DefaultLifeScope.prototype.execute = function (data) {
        var names = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            names[_i - 1] = arguments[_i];
        }
        names = names.filter(function (n) { return !!n; });
        var act = this.action;
        names.forEach(function (name) {
            act = act.find(function (itm) { return itm.name === name; });
        });
        if (act) {
            act.execute(this.container, data);
        }
    };
    DefaultLifeScope.prototype.routeExecute = function (data) {
        var names = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            names[_i - 1] = arguments[_i];
        }
        var _a;
        this.execute.apply(this, [data].concat(names));
        var container = this.container.parent;
        while (container) {
            (_a = container.getLifeScope()).execute.apply(_a, [utils_1.lang.assign({}, data)].concat(names));
            container = container.parent;
        }
    };
    DefaultLifeScope.prototype.hasDecorator = function (target, dtype, match) {
        var _this = this;
        var decors;
        switch (dtype) {
            case factories_1.DecoratorType.Class:
                decors = factories_1.getClassDecorators(target);
                break;
            case factories_1.DecoratorType.Property:
                decors = factories_1.getPropDecorators(target);
                break;
            case factories_1.DecoratorType.Parameter:
                decors = factories_1.getParamDecorators(target);
                break;
            case factories_1.DecoratorType.Method:
                decors = factories_1.getMethodDecorators(target);
                break;
        }
        if (decors) {
            return decors.some(function (dec) { return _this.decorators.some(function (d) { return d.name === dec && match(d); }); });
        }
        return false;
    };
    DefaultLifeScope.prototype.getClassDecorators = function (type, match) {
        var _this = this;
        return factories_1.getClassDecorators(type)
            .map(function (dec) { return _this.decorators.find(function (d) { return d.name === dec; }); })
            .filter(function (d) { return d && (match ? match(d) : true); });
    };
    DefaultLifeScope.prototype.getMethodDecorators = function (type, match) {
        var _this = this;
        return factories_1.getMethodDecorators(type)
            .map(function (dec) { return _this.decorators.find(function (d) { return d.name === dec; }); })
            .filter(function (d) { return d && (match ? match(d) : true); });
    };
    DefaultLifeScope.prototype.getPropertyDecorators = function (type, match) {
        var _this = this;
        return factories_1.getPropDecorators(type)
            .map(function (dec) { return _this.decorators.find(function (d) { return d.name === dec; }); })
            .filter(function (d) { return d && (match ? match(d) : true); });
    };
    DefaultLifeScope.prototype.getParameterDecorators = function (target, propertyKey, match) {
        var _this = this;
        return factories_1.getParamDecorators(target, propertyKey)
            .map(function (dec) { return _this.decorators.find(function (d) { return d.name === dec; }); })
            .filter(function (d) { return d && (match ? match(d) : true); });
    };
    DefaultLifeScope.prototype.getDecoratorType = function (decirator) {
        return decirator.decoratorType || factories_1.DecoratorType.All;
    };
    /**
     * is vaildate dependence type or not. dependence type must with class decorator.
     *
     * @template T
     * @param {Type<T>} target
     * @returns {boolean}
     * @memberof Container
     */
    DefaultLifeScope.prototype.isVaildDependence = function (target) {
        if (!target) {
            return false;
        }
        if (!utils_1.isClass(target)) {
            return false;
        }
        if (utils_1.isAbstractClass(target)) {
            return false;
        }
        return this.getClassDecorators(target).length > 0;
    };
    DefaultLifeScope.prototype.getAtionByName = function (name) {
        return this.action.find(function (action) { return action.name === name; });
    };
    DefaultLifeScope.prototype.getClassAction = function () {
        return this.getAtionByName(this.toActionName(factories_1.DecoratorType.Class));
    };
    DefaultLifeScope.prototype.getMethodAction = function () {
        return this.getAtionByName(this.toActionName(factories_1.DecoratorType.Method));
    };
    DefaultLifeScope.prototype.getPropertyAction = function () {
        return this.getAtionByName(this.toActionName(factories_1.DecoratorType.Property));
    };
    DefaultLifeScope.prototype.getParameterAction = function () {
        return this.getAtionByName(this.toActionName(factories_1.DecoratorType.Parameter));
    };
    /**
     * get constructor parameters metadata.
     *
     * @template T
     * @param {Type<T>} type
     * @returns {IParameter[]}
     * @memberof IContainer
     */
    DefaultLifeScope.prototype.getConstructorParameters = function (type) {
        return this.getParameters(type);
    };
    /**
     * get method params metadata.
     *
     * @template T
     * @param {Type<T>} type
     * @param {T} instance
     * @param {(string | symbol)} propertyKey
     * @returns {IParameter[]}
     * @memberof IContainer
     */
    DefaultLifeScope.prototype.getMethodParameters = function (type, instance, propertyKey) {
        return this.getParameters(type, instance, propertyKey);
    };
    /**
     * get paramerter names.
     *
     * @template T
     * @param {Type<T>} type
     * @param {string} propertyKey
     * @returns {string[]}
     * @memberof DefaultLifeScope
     */
    DefaultLifeScope.prototype.getParamerterNames = function (type, propertyKey) {
        var metadata = factories_1.getOwnParamerterNames(type);
        var paramNames = [];
        if (metadata && metadata.hasOwnProperty(propertyKey)) {
            paramNames = metadata[propertyKey];
        }
        if (!utils_1.isArray(paramNames)) {
            paramNames = [];
        }
        return paramNames;
    };
    DefaultLifeScope.prototype.isSingletonType = function (type) {
        if (factories_1.hasOwnClassMetadata(Singleton_1.Singleton, type)) {
            return true;
        }
        var metadata = this.container.get(IMetaAccessor_1.MetaAccessorToken).find(type, this.container, function (m) { return m.singleton === true; });
        return !!metadata;
    };
    DefaultLifeScope.prototype.getMethodMetadatas = function (type, propertyKey) {
        var metadatas = [];
        this.getMethodDecorators(type)
            .forEach(function (dec) {
            var metas = factories_1.getOwnMethodMetadata(dec.name, type);
            if (metas.hasOwnProperty(propertyKey)) {
                metadatas = metadatas.concat(metas[propertyKey] || []);
            }
        });
        return metadatas;
    };
    DefaultLifeScope.prototype.filerDecorators = function (express) {
        return this.decorators.filter(express);
    };
    DefaultLifeScope.prototype.getParameters = function (type, instance, propertyKey) {
        propertyKey = propertyKey || 'constructor';
        var data = {
            target: instance,
            targetType: type,
            propertyKey: propertyKey
        };
        this.execute(data, actions_1.LifeState.onInit, actions_1.CoreActions.bindParameterType);
        var paramNames = this.getParamerterNames(type, propertyKey);
        if (data.execResult.length) {
            return data.execResult.map(function (typ, idx) {
                return {
                    type: typ,
                    name: paramNames[idx]
                };
            });
        }
        else {
            return paramNames.map(function (name) {
                return {
                    name: name,
                    type: undefined
                };
            });
        }
    };
    DefaultLifeScope.prototype.getTypeDecorators = function (decType, match) {
        return this.filerDecorators(function (value) {
            var flag = (value.types || '').indexOf(decType) >= 0;
            if (flag && match) {
                flag = match(value);
            }
            return flag;
        });
    };
    DefaultLifeScope.prototype.buildAction = function () {
        var factory = new ActionFactory_1.ActionFactory();
        var action = factory.create('');
        action
            .add(factory.create(types_1.IocState.design)
            .add(factory.create(actions_1.CoreActions.bindProvider))
            .add(factory.create(actions_1.CoreActions.autorun)))
            .add(factory.create(types_1.IocState.runtime)
            .add(factory.create(actions_1.LifeState.beforeCreateArgs))
            .add(factory.create(actions_1.LifeState.beforeConstructor))
            .add(factory.create(actions_1.LifeState.afterConstructor))
            .add(factory.create(actions_1.LifeState.onInit)
            .add(factory.create(actions_1.CoreActions.componentBeforeInit))
            .add(factory.create(this.toActionName(factories_1.DecoratorType.Class)))
            .add(factory.create(this.toActionName(factories_1.DecoratorType.Method)))
            .add(factory.create(this.toActionName(factories_1.DecoratorType.Property))
            .add(factory.create(actions_1.CoreActions.bindPropertyType))
            .add(factory.create(actions_1.CoreActions.injectProperty)))
            .add(factory.create(this.toActionName(factories_1.DecoratorType.Parameter))
            .add(factory.create(actions_1.CoreActions.bindParameterType))
            .add(factory.create(actions_1.CoreActions.bindParameterProviders)))
            .add(factory.create(actions_1.CoreActions.componentInit)))
            .add(factory.create(actions_1.LifeState.AfterInit)
            .add(factory.create(actions_1.CoreActions.singletion))
            .add(factory.create(actions_1.CoreActions.componentAfterInit))
            .add(factory.create(actions_1.CoreActions.methodAutorun))))
            .add(factory.create(actions_1.CoreActions.cache));
        this.action = action;
    };
    DefaultLifeScope.prototype.toActionName = function (type) {
        var types = [];
        if (type & factories_1.DecoratorType.Class) {
            types.push('ClassDecorator');
        }
        if (type & factories_1.DecoratorType.Method) {
            types.push('MethodDecorator');
        }
        if (type & factories_1.DecoratorType.Property) {
            types.push('PropertyDecorator');
        }
        if (type & factories_1.DecoratorType.Parameter) {
            types.push('ParameterDecorator');
        }
        return types.join(',');
    };
    DefaultLifeScope.getClassAnnations = function () {
        return { "name": "DefaultLifeScope", "params": { "constructor": ["container"], "addAction": ["action", "nodepaths"], "registerDecorator": ["decorator", "actions"], "registerCustomDecorator": ["decorator", "type", "actions"], "execute": ["data", "names"], "routeExecute": ["data", "names"], "hasDecorator": ["target", "dtype", "match"], "getClassDecorators": ["type", "match"], "getMethodDecorators": ["type", "match"], "getPropertyDecorators": ["type", "match"], "getParameterDecorators": ["target", "propertyKey", "match"], "getDecoratorType": ["decirator"], "isVaildDependence": ["target"], "getAtionByName": ["name"], "getClassAction": [], "getMethodAction": [], "getPropertyAction": [], "getParameterAction": [], "getConstructorParameters": ["type"], "getMethodParameters": ["type", "instance", "propertyKey"], "getParamerterNames": ["type", "propertyKey"], "isSingletonType": ["type"], "getMethodMetadatas": ["type", "propertyKey"], "filerDecorators": ["express"], "getParameters": ["type", "instance", "propertyKey"], "getTypeDecorators": ["decType", "match"], "buildAction": [], "toActionName": ["type"] } };
    };
    return DefaultLifeScope;
}());
exports.DefaultLifeScope = DefaultLifeScope;

//# sourceMappingURL=../sourcemaps/core/DefaultLifeScope.js.map
