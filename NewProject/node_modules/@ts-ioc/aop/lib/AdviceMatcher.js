"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var IAdviceMatcher_1 = require("./IAdviceMatcher");
var core_1 = require("@ts-ioc/core");
var Advice_1 = require("./decorators/Advice");
var Aspect_1 = require("./decorators/Aspect");
var NonePointcut_1 = require("./decorators/NonePointcut");
/**
 * advice matcher, use to match advice when a registered create instance.
 *
 * @export
 * @class AdviceMatcher
 * @implements {IAdviceMatcher}
 */
var AdviceMatcher = /** @class */ (function () {
    function AdviceMatcher(container) {
        this.container = container;
    }
    AdviceMatcher.prototype.match = function (aspectType, targetType, adviceMetas, target) {
        var _this = this;
        var aspectMeta = core_1.lang.first(core_1.getOwnTypeMetadata(Aspect_1.Aspect, aspectType));
        if (aspectMeta) {
            if (aspectMeta.within) {
                var ins = core_1.isArray(aspectMeta.within) ? aspectMeta.within : [aspectMeta.within];
                if (ins.indexOf(targetType) < 0) {
                    return [];
                }
            }
            if (aspectMeta.annotation) {
                var annotation = core_1.isFunction(aspectMeta.annotation) ? aspectMeta.annotation.toString() : aspectMeta.annotation;
                var anno = (/^\^?@\w+/.test(annotation) ? '' : '@') + annotation;
                if (!core_1.hasOwnClassMetadata(anno, targetType)) {
                    return [];
                }
            }
        }
        var className = core_1.lang.getClassName(targetType);
        adviceMetas = adviceMetas || core_1.getOwnMethodMetadata(Advice_1.Advice, targetType);
        var matched = [];
        if (targetType === aspectType) {
            var adviceNames = core_1.lang.keys(adviceMetas);
            if (adviceNames.length > 1) {
                var advices_1 = [];
                adviceNames.forEach(function (n) {
                    advices_1 = advices_1.concat(adviceMetas[n]);
                });
                adviceNames.forEach(function (n) {
                    advices_1.forEach(function (adv) {
                        if (adv.propertyKey !== n) {
                            if (_this.matchAspectSelf(n, adv)) {
                                matched.push({
                                    name: n,
                                    fullName: className + "." + n,
                                    advice: adv
                                });
                            }
                        }
                    });
                });
            }
        }
        else {
            var points_1 = [];
            var decorators_1 = Object.getOwnPropertyDescriptors(targetType.prototype);
            // match method.
            for (var name_1 in decorators_1) {
                points_1.push({
                    name: name_1,
                    fullName: className + "." + name_1
                });
            }
            var allmethods = core_1.getParamerterNames(targetType);
            core_1.lang.forIn(allmethods, function (item, name) {
                if (name === 'constructor') {
                    return;
                }
                if (core_1.isUndefined(decorators_1[name])) {
                    points_1.push({
                        name: name,
                        fullName: className + "." + name
                    });
                }
            });
            Object.getOwnPropertyNames(adviceMetas).forEach(function (name) {
                var advices = adviceMetas[name];
                advices.forEach(function (metadata) {
                    matched = matched.concat(_this.filterPointcut(targetType, points_1, metadata));
                });
            });
        }
        return matched;
    };
    AdviceMatcher.prototype.matchAspectSelf = function (name, metadata) {
        if (metadata.pointcut) {
            var pointcut = metadata.pointcut;
            if (core_1.isString(pointcut)) {
                if (/^execution\(\S+\)$/.test(pointcut)) {
                    pointcut = pointcut.substring(10, pointcut.length - 1);
                }
                return pointcut.startsWith(name);
            }
            else if (core_1.isRegExp(pointcut)) {
                return pointcut.test(name);
            }
        }
        return false;
    };
    AdviceMatcher.prototype.filterPointcut = function (type, points, metadata, target) {
        if (!metadata.pointcut) {
            return [];
        }
        var matchedPointcut;
        if (metadata.pointcut) {
            var match_1 = this.matchTypeFactory(type, metadata);
            matchedPointcut = points.filter(function (p) { return match_1(p.name, p.fullName, type, target, p); });
        }
        matchedPointcut = matchedPointcut || [];
        return matchedPointcut.map(function (p) {
            return core_1.lang.assign({}, p, { advice: metadata });
        });
    };
    AdviceMatcher.prototype.matchTypeFactory = function (type, metadata) {
        var pointcut = metadata.pointcut;
        var expresses = [];
        if (metadata.within) {
            expresses.push(function (method, fullName, targetType) {
                if (core_1.isArray(metadata.within)) {
                    return metadata.within.indexOf(targetType) >= 0;
                }
                else {
                    return metadata.within === targetType;
                }
            });
            expresses.push('&&');
        }
        if (metadata.target) {
            expresses.push(function (method, fullName, targetType, target) {
                return metadata.target = target;
            });
            expresses.push('&&');
        }
        if (metadata.annotation) {
            expresses.push(function (method, fullName, targetType, target) {
                return core_1.hasOwnMethodMetadata(metadata.annotation, targetType, method);
            });
            expresses.push('&&');
        }
        if (core_1.isString(pointcut)) {
            var pointcuts = (pointcut || '').trim();
            expresses.push(this.tranlateExpress(type, pointcuts));
        }
        else if (core_1.isRegExp(pointcut)) {
            var pointcutReg_1 = pointcut;
            if (/^\^?@\w+/.test(pointcutReg_1.source)) {
                expresses.push(function (name, fullName, targetType) {
                    var decName = Reflect.getMetadataKeys(type, name);
                    return decName.some(function (n) { return core_1.isString(n) && pointcutReg_1.test(n); });
                });
            }
            else {
                expresses.push(function (name, fullName) { return pointcutReg_1.test(fullName); });
            }
        }
        return this.mergeExpress.apply(this, expresses);
    };
    AdviceMatcher.prototype.spiltBrace = function (strExp) {
        strExp = strExp.trim();
        if (/^\(/.test(strExp) && /\)$/.test(strExp)) {
            strExp = strExp.substring(1, strExp.length - 1).trim();
        }
        if (/^\(/.test(strExp) && /\)$/.test(strExp)) {
            return this.spiltBrace(strExp);
        }
        else {
            return strExp;
        }
    };
    AdviceMatcher.prototype.expressToFunc = function (type, strExp) {
        var _this = this;
        if (/^@annotation\(.*\)$/.test(strExp)) {
            var exp = strExp.substring(12, strExp.length - 1);
            var annotation_1 = /^@/.test(exp) ? exp : ('@' + exp);
            return function (name, fullName) { return core_1.hasOwnMethodMetadata(annotation_1, type, name) && !core_1.hasOwnClassMetadata(Aspect_1.Aspect, type); };
        }
        else if (/^execution\(.*\)$/.test(strExp)) {
            var exp = strExp.substring(10, strExp.length - 1);
            if (exp === '*' || exp === '*.*') {
                return function (name, fullName) { return !!name && !core_1.hasOwnClassMetadata(Aspect_1.Aspect, type); };
            }
            else if (/^\w+(\((\s*\w+\s*,)*\s*\w*\))?$/.test(exp)) {
                // if is method name, will match aspect self only.
                return function () { return false; };
            }
            else if (/^([\w\*]+\.)+[\w\*]+(\((\s*\w+\s*,)*\s*\w*\))?$/.test(exp)) {
                exp = exp.replace(/\*\*/gi, '(\\\w+(\\\.|\\\/)){0,}\\\w+')
                    .replace(/\*/gi, '\\\w+')
                    .replace(/\./gi, '\\\.')
                    .replace(/\//gi, '\\\/');
                var matcher_1 = new RegExp(exp + "$");
                return function (name, fullName) { return matcher_1.test(fullName); };
            }
            else {
                return function () { return false; };
            }
        }
        else if (/^@within\(\s*\w+/.test(strExp)) {
            var classnames_1 = strExp.substring(strExp.indexOf('(') + 1, strExp.length - 1).split(',').map(function (n) { return n.trim(); });
            return function (name, fullName, targetType) { return classnames_1.indexOf(core_1.lang.getClassName(targetType)) >= 0; };
        }
        else if (/^@target\(\s*\w+/.test(strExp)) {
            var torken_1 = strExp.substring(strExp.indexOf('(') + 1, strExp.length - 1).trim();
            return function (name, fullName, targetType) { return _this.container.getTokenImpl(torken_1) === targetType; };
        }
        else {
            return function () { return false; };
        }
    };
    AdviceMatcher.prototype.tranlateExpress = function (type, strExp) {
        var expresses = [];
        var idxOr = strExp.indexOf('||');
        var idxAd = strExp.indexOf('&&');
        if (idxAd < 0 && idxOr < 0) {
            expresses.push(this.expressToFunc(type, this.spiltBrace(strExp)));
        }
        else {
            if (idxOr > idxAd) {
                var leftExp = this.spiltBrace(strExp.substring(0, idxOr));
                if (leftExp) {
                    expresses.push(this.tranlateExpress(type, leftExp));
                }
                var rightExp = this.spiltBrace(strExp.substring(idxOr + 2));
                if (rightExp) {
                    expresses.push('||');
                    expresses.push(this.tranlateExpress(type, rightExp));
                }
            }
            else if (idxAd > idxOr) {
                var leftExp = this.spiltBrace(strExp.substring(0, idxAd));
                if (leftExp) {
                    expresses.push(this.tranlateExpress(type, leftExp));
                }
                var rightExp = this.spiltBrace(strExp.substring(idxAd + 2));
                if (rightExp) {
                    expresses.push('&&');
                    expresses.push(this.tranlateExpress(type, rightExp));
                }
            }
        }
        return this.mergeExpress.apply(this, expresses);
    };
    AdviceMatcher.prototype.mergeExpress = function () {
        var expresses = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            expresses[_i] = arguments[_i];
        }
        return function (method, fullName, targetType, pointcut) {
            var flag;
            expresses.forEach(function (express, idx) {
                if (!core_1.isUndefined(flag)) {
                    return;
                }
                if (core_1.isFunction(express)) {
                    var rel = express(method, fullName, targetType, pointcut);
                    if (idx < expresses.length - 2) {
                        if (!rel && express[idx + 1] === '&&') {
                            flag = false;
                        }
                        if (rel && express[idx + 1] === '||') {
                            flag = true;
                        }
                    }
                    else {
                        flag = rel;
                    }
                }
            });
            return flag;
        };
    };
    AdviceMatcher.getClassAnnations = function () {
        return { "name": "AdviceMatcher", "params": { "constructor": ["container"], "match": ["aspectType", "targetType", "adviceMetas", "target"], "matchAspectSelf": ["name", "metadata"], "filterPointcut": ["type", "points", "metadata", "target"], "matchTypeFactory": ["type", "metadata"], "spiltBrace": ["strExp"], "expressToFunc": ["type", "strExp"], "tranlateExpress": ["type", "strExp"], "mergeExpress": ["expresses"] } };
    };
    AdviceMatcher = tslib_1.__decorate([
        NonePointcut_1.NonePointcut(),
        core_1.Singleton(IAdviceMatcher_1.AdviceMatcherToken),
        tslib_1.__param(0, core_1.Inject(core_1.ContainerToken)),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], AdviceMatcher);
    return AdviceMatcher;
}());
exports.AdviceMatcher = AdviceMatcher;

//# sourceMappingURL=sourcemaps/AdviceMatcher.js.map
