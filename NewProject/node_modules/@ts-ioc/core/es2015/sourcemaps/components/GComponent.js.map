{"version":3,"sources":["components/GComponent.ts"],"names":[],"mappings":"","file":"../../components/GComponent.js","sourcesContent":["import { Express, Mode } from '../types';\r\nimport { IComponent } from './IComponent';\r\n\r\n\r\n/**\r\n * generics component.\r\n *\r\n * @export\r\n * @interface GComponent\r\n * @extends {IComponent}\r\n * @template T\r\n */\r\nexport interface GComponent<T extends IComponent> extends IComponent {\r\n    /**\r\n     * the node name.\r\n     *\r\n     * @type {string}\r\n     *@memberof GComposite\r\n     */\r\n    name: string;\r\n\r\n    /**\r\n     * parent node.\r\n     *\r\n     * @type {T}\r\n     *@memberof GComposite\r\n     */\r\n    parent?: T;\r\n\r\n    /**\r\n     * add node to this component and return self.\r\n     *\r\n     * @param {T} node the node to add.\r\n     * @returns {this} self.\r\n     *@memberof GComposite\r\n     */\r\n    add(node: T): this;\r\n\r\n    /**\r\n     * remove node from this component.\r\n     *\r\n     * @param {(T | string)} node\r\n     * @returns {this}\r\n     *@memberof GComposite\r\n     */\r\n    remove(node: T | string): this;\r\n\r\n    /**\r\n     * find sub context via express.\r\n     *\r\n     * @param {(T | Express<T, boolean>)} express\r\n     * @param {Mode} [mode]\r\n     * @returns {T}\r\n     *@memberof GComposite\r\n     */\r\n    find(express: T | Express<T, boolean>, mode?: Mode): T\r\n\r\n    /**\r\n     * filter in component.\r\n     *\r\n     * @param {(Express<T, void | boolean>)} express\r\n     * @param {Mode} [mode]\r\n     * @returns {T[]}\r\n     *@memberof GComposite\r\n     */\r\n    filter(express: Express<T, void | boolean>, mode?: Mode): T[]\r\n\r\n    /**\r\n     * iteration context with express.\r\n     *\r\n     * @param {(Express<T, void | boolean>)} express\r\n     * @param {Mode} [mode]\r\n     *@memberof GComposite\r\n     */\r\n    each(express: Express<T, void | boolean>, mode?: Mode);\r\n\r\n    /**\r\n     * trans all sub nodes. node first iteration.\r\n     *\r\n     * @param {(Express<T, void | boolean>)} express\r\n     *@memberof GComposite\r\n     */\r\n    trans(express: Express<T, void | boolean>);\r\n\r\n    /**\r\n     * trans all sub nodes. node last iteration.\r\n     *\r\n     * @param {(Express<T, void | boolean>)} express\r\n     *@memberof GComposite\r\n     */\r\n    transAfter(express: Express<T, void | boolean>);\r\n\r\n    /**\r\n     * route up iteration.\r\n     *\r\n     * @param {(Express<T, void | boolean>)} express\r\n     *@memberof GComposite\r\n     */\r\n    routeUp(express: Express<T, void | boolean>);\r\n\r\n    /**\r\n     * this component node equals to the node or not.\r\n     *\r\n     * @param {T} node\r\n     * @returns {boolean}\r\n     *@memberof GComposite\r\n     */\r\n    equals(node: T): boolean;\r\n\r\n    /**\r\n     * get empty node.\r\n     *\r\n     * @returns {T}\r\n     *@memberof GComposite\r\n     */\r\n    empty(): T\r\n\r\n    /**\r\n     * check this node is empty or not.\r\n     *\r\n     * @returns {boolean}\r\n     *@memberof GComposite\r\n     */\r\n    isEmpty(): boolean;\r\n}\r\n"]}