"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@ts-ioc/core");
const IAdvisor_1 = require("../IAdvisor");
const AopActions_1 = require("./AopActions");
const joinpoints_1 = require("../joinpoints");
const isValideAspectTarget_1 = require("../isValideAspectTarget");
/**
 * actions invoke before constructor.
 *
 * @export
 * @class InvokeBeforeConstructorAction
 * @extends {ActionComposite}
 */
class InvokeBeforeConstructorAction extends core_1.ActionComposite {
    constructor() {
        super(AopActions_1.AopActions.registAspect);
    }
    working(container, data) {
        // aspect class do nothing.
        if (!isValideAspectTarget_1.isValideAspectTarget(data.targetType)) {
            return;
        }
        let advisor = container.get(IAdvisor_1.AdvisorToken);
        let className = core_1.lang.getClassName(data.targetType);
        let advices = advisor.getAdvices(className + '.constructor');
        if (!advices) {
            return;
        }
        let targetType = data.targetType;
        let target = data.target;
        let joinPoint = container.resolve(joinpoints_1.Joinpoint, core_1.Provider.create('options', {
            name: 'constructor',
            state: joinpoints_1.JoinpointState.Before,
            fullName: className + '.constructor',
            target: target,
            args: data.args,
            params: data.params,
            targetType: targetType
        }));
        let providers = [core_1.Provider.create(joinpoints_1.Joinpoint, joinPoint)];
        if (data.providerMap) {
            providers.push(data.providerMap);
        }
        advices.Before.forEach(advicer => {
            advisor.getContainer(advicer.aspectType, container).syncInvoke(advicer.aspectType, advicer.advice.propertyKey, null, ...providers); // new Joinpoint(joinPoint) // container.resolve(Joinpoint, { json: joinPoint })
        });
        advices.Around.forEach(advicer => {
            advisor.getContainer(advicer.aspectType, container).syncInvoke(advicer.aspectType, advicer.advice.propertyKey, null, ...providers);
        });
    }
    static getClassAnnations() {
        return { "name": "InvokeBeforeConstructorAction", "params": { "constructor": [], "working": ["container", "data"] } };
    }
}
exports.InvokeBeforeConstructorAction = InvokeBeforeConstructorAction;

//# sourceMappingURL=../sourcemaps/actions/InvokeBeforeConstructorAction.js.map
