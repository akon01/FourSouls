"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Registration_1 = require("../Registration");
const lang_1 = require("./lang");
/**
 * check target is function or not.
 *
 * @export
 * @param {*} target
 * @returns
 */
function isFunction(target) {
    if (!target) {
        return false;
    }
    return typeof target === 'function';
}
exports.isFunction = isFunction;
/**
 * check Abstract class with @Abstract or not
 *
 * @export
 * @param {*} target
 * @returns {target is AbstractType<any>}
 */
function isAbstractClass(target) {
    return classCheck(target) && Reflect.hasOwnMetadata('@Abstract', target);
}
exports.isAbstractClass = isAbstractClass;
/**
 * check target is class or not.
 *
 * @export
 * @param {*} target
 * @returns {target is Type<any>}
 */
function isClass(target) {
    return classCheck(target) && (!Reflect.hasOwnMetadata('@Abstract', target));
}
exports.isClass = isClass;
function isClassType(target) {
    return classCheck(target);
}
exports.isClassType = isClassType;
function classCheck(target) {
    if (!isFunction(target)) {
        return false;
    }
    if (target.prototype) {
        if (!target.name || target.name === 'Object') {
            return false;
        }
        let type = target;
        // for uglify
        if (/^[a-z]$/.test(type.name)) {
            if (lang_1.lang.hasClassAnnations(type)) {
                return true;
            }
            else {
                return false;
            }
        }
        else {
            if (lang_1.lang.hasClassAnnations(type)) {
                return true;
            }
            if (!/^[A-Z@]/.test(target.name)) {
                return false;
            }
        }
        // for IE 8, 9
        if (!isNodejsEnv() && /MSIE [6-9]/.test(navigator.userAgent)) {
            return true;
        }
        try {
            target.arguments && target.caller;
            return false;
        }
        catch (e) {
            return true;
        }
    }
    return false;
}
/**
 * is run in nodejs or not.
 *
 * @export
 * @returns {boolean}
 */
function isNodejsEnv() {
    return (typeof process !== 'undefined') && (typeof process.versions.node !== 'undefined');
}
exports.isNodejsEnv = isNodejsEnv;
/**
 * check target is token or not.
 *
 * @export
 * @param {*} target
 * @returns {target is Token<any>}
 */
function isToken(target) {
    if (!target) {
        return false;
    }
    if (isString(target) || isSymbol(target) || classCheck(target) || (target instanceof Registration_1.Registration)) {
        return true;
    }
    return false;
}
exports.isToken = isToken;
/**
 * is target promise or not. now check is es6 Promise only.
 *
 * @export
 * @param {*} target
 * @returns {target is Promise<any>}
 */
function isPromise(target) {
    if (!target) {
        return false;
    }
    let type = target.constructor || target.prototype.constructor;
    if (type && type.name === 'Promise') {
        return true;
    }
    return false;
}
exports.isPromise = isPromise;
/**
 * is target rxjs observable or not.
 *
 * @export
 * @param {*} target
 * @returns {boolean}
 */
function isObservable(target) {
    if (!target && !isObject(target)) {
        return false;
    }
    let type = target.constructor || target.prototype.constructor;
    if (type && type.name === 'Observable') {
        return true;
    }
    return false;
}
exports.isObservable = isObservable;
/**
 * is target base object or not.
 * eg. {}, have not self constructor;
 * @export
 * @param {*} target
 * @returns {target is Promise<any>}
 */
function isBaseObject(target) {
    if (!target) {
        return false;
    }
    if (target.constructor && target.constructor.name === 'Object') {
        return true;
    }
    return false;
}
exports.isBaseObject = isBaseObject;
/**
 * is metadata object or not.
 *
 * @export
 * @param {*} target
 * @param {...(string|string[])[]} props
 * @returns {boolean}
 */
function isMetadataObject(target, ...props) {
    if (!isBaseObject(target)) {
        return false;
    }
    if (props.length) {
        return lang_1.lang.keys(target).some(n => props.some(ps => isString(ps) ? ps === n : ps.indexOf(n) > 0));
    }
    return true;
}
exports.isMetadataObject = isMetadataObject;
/**
 * is reftarget options or not.
 *
 * @export
 * @param {*} target
 * @returns {target is IRefTarget}
 */
function isRefTarget(target) {
    if (isBaseObject(target) !== true) {
        return false;
    }
    return isToken(target.target);
}
exports.isRefTarget = isRefTarget;
/**
 * check object is class metadata or not.
 *
 * @export
 * @param {*} target
 * @param {...(string | string[])[]} extendsProps
 * @returns {boolean}
 */
function isClassMetadata(target, ...extendsProps) {
    return isMetadataObject(target, ...extendsProps.concat(['singleton', 'provide', 'alias', 'type']));
}
exports.isClassMetadata = isClassMetadata;
/**
 * check object is property metadata or not.
 *
 * @export
 * @param {*} target
 * @param {...(string | string[])[]} extendsProps
 * @returns {boolean}
 */
function isProvideMetadata(target, ...extendsProps) {
    return isMetadataObject(target, ...extendsProps.concat(['type', 'provider']));
}
exports.isProvideMetadata = isProvideMetadata;
/**
 * check target is string or not.
 *
 * @export
 * @param {*} target
 * @returns {target is string}
 */
function isString(target) {
    return typeof target === 'string';
}
exports.isString = isString;
/**
 * check target is boolean or not.
 *
 * @export
 * @param {*} target
 * @returns {target is boolean}
 */
function isBoolean(target) {
    return typeof target === 'boolean' || (target === true || target === false);
}
exports.isBoolean = isBoolean;
/**
 * check target is number or not.
 *
 * @export
 * @param {*} target
 * @returns {target is number}
 */
function isNumber(target) {
    return typeof target === 'number';
}
exports.isNumber = isNumber;
/**
 * check target is undefined or not.
 *
 * @export
 * @param {*} target
 * @returns {target is undefined}
 */
function isUndefined(target) {
    return typeof target === 'undefined' || target === undefined;
}
exports.isUndefined = isUndefined;
/**
 * check target is unll or not.
 *
 * @export
 * @param {*} target
 * @returns {target is null}
 */
function isNull(target) {
    return target === null;
}
exports.isNull = isNull;
/**
 * is target null or undefined.
 *
 * @export
 * @param {*} target
 * @returns {boolean}
 */
function isNullOrUndefined(target) {
    return isNull(target) || isUndefined(target);
}
exports.isNullOrUndefined = isNullOrUndefined;
/**
 * check target is array or not.
 *
 * @export
 * @param {*} target
 * @returns {target is Array<any>}
 */
function isArray(target) {
    return Array.isArray(target);
}
exports.isArray = isArray;
/**
 * check target is object or not.
 *
 * @export
 * @param {*} target
 * @returns {target is object}
 */
function isObject(target) {
    if (isNullOrUndefined(target)) {
        return false;
    }
    let type = typeof target;
    return type === 'object' || type === 'function';
}
exports.isObject = isObject;
/**
 * is custom class type instance or not.
 *
 * @export
 * @param {*} target
 * @returns {boolean}
 */
function isTypeObject(target) {
    if (isNullOrUndefined(target)) {
        return false;
    }
    if (typeof target !== 'object') {
        return false;
    }
    let type = lang_1.lang.getClass(target);
    if (isBaseType(type)) {
        return false;
    }
    return true;
}
exports.isTypeObject = isTypeObject;
/**
 * check target is date or not.
 *
 * @export
 * @param {*} target
 * @returns {target is Date}
 */
function isDate(target) {
    return isObject(target) && target instanceof Date;
}
exports.isDate = isDate;
/**
 * check target is symbol or not.
 *
 * @export
 * @param {*} target
 * @returns {target is Symbol}
 */
function isSymbol(target) {
    return typeof target === 'symbol' || (isObject(target) && /^Symbol\(/.test(target.toString()));
}
exports.isSymbol = isSymbol;
/**
 * check target is regexp or not.
 *
 * @export
 * @param {*} target
 * @returns {target is RegExp}
 */
function isRegExp(target) {
    return target && target instanceof RegExp;
}
exports.isRegExp = isRegExp;
/**
 * is base type or not.
 *
 * @export
 * @param {*} target
 * @returns {boolean}
 */
function isBaseType(target) {
    if (!isFunction(target)) {
        return false;
    }
    return target === Object
        || target === Boolean
        || target === String
        || target === Number
        || target === Date;
}
exports.isBaseType = isBaseType;

//# sourceMappingURL=../sourcemaps/utils/typeCheck.js.map
