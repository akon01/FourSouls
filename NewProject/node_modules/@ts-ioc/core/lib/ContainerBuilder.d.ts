import { IContainer } from './IContainer';
import { Type, Modules, LoadType, Express } from './types';
import { IContainerBuilder } from './IContainerBuilder';
import { IModuleLoader, IModuleInjectorChain } from './injectors';
/**
 * default container builder.
 *
 * @export
 * @class DefaultContainerBuilder
 * @implements {IContainerBuilder}
 */
export declare class ContainerBuilder implements IContainerBuilder {
    private _loader;
    filter: Express<Type<any>, boolean>;
    constructor(loader?: IModuleLoader);
    readonly loader: IModuleLoader;
    create(): IContainer;
    /**
     * build container.
     *
     * @param {...LoadType[]} [modules]
     * @returns
     * @memberof DefaultContainerBuilder
     */
    build(...modules: LoadType[]): Promise<IContainer>;
    /**
     * load modules for container.
     *
     * @param {IContainer} container
     * @param {...LoadType[]} modules
     * @returns {Promise<Type<any>[]>}
     * @memberof DefaultContainerBuilder
     */
    loadModule(container: IContainer, ...modules: LoadType[]): Promise<Type<any>[]>;
    syncBuild(...modules: Modules[]): IContainer;
    syncLoadModule(container: IContainer, ...modules: Modules[]): Type<any>[];
    getInjectorChain(container: IContainer): IModuleInjectorChain;
    static getClassAnnations(): any;
}
