{"version":3,"sources":["decorators/Aspect.ts"],"names":[],"mappings":";;AAAA,qCAAoH;AAoCpH;;;;GAIG;AACU,QAAA,MAAM,GAAqB,2BAAoB,CAAiB,QAAQ,EAAE,UAAA,IAAI;IACvF,IAAI,CAAC,IAAI,CAAiB;QACtB,KAAK,EAAE,UAAC,GAAG,IAAK,OAAA,eAAQ,CAAC,GAAG,CAAC,EAAb,CAAa;QAC7B,WAAW,EAAE,UAAC,QAAQ,EAAE,GAAG;YACvB,QAAQ,CAAC,UAAU,GAAG,GAAG,CAAC;QAC9B,CAAC;KACJ,CAAC,CAAC;IAEH,IAAI,CAAC,IAAI,CAAiB;QACtB,KAAK,EAAE,UAAC,GAAG,IAAK,OAAA,cAAO,CAAC,GAAG,CAAC,IAAI,cAAO,CAAC,GAAG,CAAC,EAA5B,CAA4B;QAC5C,WAAW,EAAE,UAAC,QAAQ,EAAE,GAAG;YACvB,QAAQ,CAAC,MAAM,GAAG,GAAG,CAAC;QAC1B,CAAC;KACJ,CAAC,CAAC;AACP,CAAC,CAAqB,CAAC","file":"../../decorators/Aspect.js","sourcesContent":["import { createClassDecorator, ITypeDecorator, Registration, Type, isString, isClass, isArray } from '@ts-ioc/core';\r\nimport { AspectMetadata } from '../metadatas';\r\n\r\n/**\r\n * Aspect decorator\r\n *\r\n * @export\r\n * @interface IAspectDecorator\r\n * @extends {ITypeDecorator<AspectMetadata>}\r\n */\r\nexport interface IAspectDecorator extends ITypeDecorator<AspectMetadata> {\r\n    /**\r\n     * Aspect decorator, define for class.  use to define class as aspect. it can setting provider to some token, singleton or not.\r\n     *\r\n     * @Aspect\r\n     *\r\n     * @param {string} annotation set pointcut in the class with the annotation decorator only.\r\n     * @param {(Type<any> | Type<any>[])>} [within]  set pointcut in the class with the annotation decorator only.\r\n     * @param {(Registration<any> | symbol | string)} [provide] define this class provider for provide.\r\n     * @param {string} [alias] define this class provider with alias for provide.\r\n     * @param {boolean} [singlton] define this class as singlton.\r\n     * @param {number} [cache]  define class cahce expris when is not singlton.\r\n     */\r\n    (annotation: string, within?: Type<any> | Type<any>[], provide?: Registration<any> | symbol | string, alias?: string, singlton?: boolean, cache?: number): ClassDecorator;\r\n\r\n    /**\r\n     * Aspect decorator, define for class.  use to define the class. it can setting provider to some token, singleton or not.\r\n     *\r\n     * @Aspect\r\n     *\r\n     * @param {AspectMetadata} [metadata] metadata map.\r\n     */\r\n    (metadata?: AspectMetadata): ClassDecorator;\r\n}\r\n\r\n\r\n/**\r\n * Aspect decorator. define aspect service.\r\n *\r\n * @Aspect\r\n */\r\nexport const Aspect: IAspectDecorator = createClassDecorator<AspectMetadata>('Aspect', args => {\r\n    args.next<AspectMetadata>({\r\n        match: (arg) => isString(arg),\r\n        setMetadata: (metadata, arg) => {\r\n            metadata.annotation = arg;\r\n        }\r\n    });\r\n\r\n    args.next<AspectMetadata>({\r\n        match: (arg) => isArray(arg) || isClass(arg),\r\n        setMetadata: (metadata, arg) => {\r\n            metadata.within = arg;\r\n        }\r\n    });\r\n}) as IAspectDecorator;\r\n\r\n"]}