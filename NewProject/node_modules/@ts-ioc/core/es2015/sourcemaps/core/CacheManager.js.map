{"version":3,"sources":["core/CacheManager.ts"],"names":[],"mappings":"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","file":"../../core/CacheManager.js","sourcesContent":["import { isFunction, isNumber } from '../utils';\r\nimport { Type } from '../types';\r\nimport { IContainer } from '../IContainer';\r\nimport { OnDestroy } from './ComponentLifecycle';\r\nimport { ICacheManager } from '../ICacheManager';\r\n\r\n/**\r\n * cache target.\r\n *\r\n * @export\r\n * @interface CacheTarget\r\n */\r\nexport interface CacheTarget {\r\n    target: any;\r\n    expires: number;\r\n}\r\n\r\n/**\r\n * cache manager.\r\n *\r\n * @export\r\n * @class CacheManager\r\n * @implements {ICacheManager}\r\n */\r\nexport class CacheManager implements ICacheManager {\r\n\r\n    cacheTokens: Map<Type<any>, CacheTarget>;\r\n    constructor(private container: IContainer) {\r\n        this.cacheTokens = new Map();\r\n    }\r\n\r\n    isChecking() {\r\n        return !!this.timeout;\r\n    }\r\n\r\n    hasCache(targetType: Type<any>) {\r\n        return this.cacheTokens.has(targetType);\r\n    }\r\n\r\n    cache(targetType: Type<any>, target: any, expires: number) {\r\n        let cache: CacheTarget;\r\n        if (this.hasCache(targetType)) {\r\n            cache = this.cacheTokens.get(targetType)\r\n            cache.expires = Date.now() + expires;\r\n        } else {\r\n            cache = {\r\n                target: target,\r\n                expires: Date.now() + expires\r\n            }\r\n        }\r\n        this.cacheTokens.set(targetType, cache);\r\n        if (!this.isChecking()) {\r\n            this.checkExpires();\r\n        }\r\n    }\r\n\r\n    get(targetType: Type<any>, expires?: number) {\r\n        let result = null;\r\n        if (!this.cacheTokens.has(targetType)) {\r\n            return null;\r\n        }\r\n        let cache = this.cacheTokens.get(targetType);\r\n        if (cache.expires <= Date.now()) {\r\n            result = cache.target;\r\n            if (isNumber(expires) && expires > 0) {\r\n                cache.expires = Date.now() + expires;\r\n                this.cacheTokens.set(targetType, cache);\r\n            }\r\n        } else {\r\n            this.destroy(targetType, cache.target);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    private timeout;\r\n    checkExpires() {\r\n        if (this.timeout) {\r\n            clearTimeout(this.timeout);\r\n            this.timeout = 0;\r\n        }\r\n        if (this.cacheTokens.size > 0) {\r\n            let timeoutCaches = [];\r\n            this.cacheTokens.forEach((cache, targetType) => {\r\n                if (cache.expires >= Date.now()) {\r\n                    timeoutCaches.push(targetType);\r\n                }\r\n            });\r\n\r\n            if (timeoutCaches.length) {\r\n                timeoutCaches.forEach(targetType => {\r\n                    this.destroy(targetType, this.cacheTokens.get(targetType).target);\r\n                });\r\n            }\r\n\r\n            this.timeout = setTimeout(() => {\r\n                this.checkExpires();\r\n            }, 60000);\r\n        }\r\n    }\r\n\r\n    destroy(targetType: Type<any>, target?: any) {\r\n\r\n        if (!this.hasCache(targetType)) {\r\n            return;\r\n        }\r\n        if (!target) {\r\n            target = this.cacheTokens.get(targetType).target;\r\n        }\r\n\r\n        try {\r\n            let component = target as OnDestroy;\r\n            if (isFunction(component.onDestroy)) {\r\n                this.container.syncInvoke(target || targetType, 'onDestroy', target);\r\n            }\r\n            this.cacheTokens.delete(targetType);\r\n        } catch (err) {\r\n            console.error && console.error(err);\r\n        }\r\n    }\r\n\n                        static getClassAnnations():any  {\n                            return {\"name\":\"CacheManager\",\"params\":{\"constructor\":[\"container\"],\"isChecking\":[],\"hasCache\":[\"targetType\"],\"cache\":[\"targetType\",\"target\",\"expires\"],\"get\":[\"targetType\",\"expires\"],\"checkExpires\":[],\"destroy\":[\"targetType\",\"target\"]}};\n                        }\n                   }\r\n"]}