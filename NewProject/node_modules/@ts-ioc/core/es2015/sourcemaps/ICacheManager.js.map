{"version":3,"sources":["ICacheManager.ts"],"names":[],"mappings":";;AACA,+CAA4C;AAE5C;;;GAGG;AACU,QAAA,iBAAiB,GAAG,IAAI,yBAAW,CAAgB,kBAAkB,CAAC,CAAC","file":"../ICacheManager.js","sourcesContent":["import { Type } from './types';\r\nimport { InjectToken } from './InjectToken';\r\n\r\n/**\r\n * ICacheManager interface token.\r\n * it is a token id, you can register yourself ICacheManager for this.\r\n */\r\nexport const CacheManagerToken = new InjectToken<ICacheManager>('DI_ICacheManager');\r\n\r\n/**\r\n * cache manager inteface.\r\n *\r\n * @export\r\n * @interface ICacheManager\r\n */\r\nexport interface ICacheManager {\r\n    /**\r\n     * has cache\r\n     *\r\n     * @param {Type<any>} targetType\r\n     * @returns {boolean}\r\n     * @memberof ICacheManager\r\n     */\r\n    hasCache(targetType: Type<any>): boolean;\r\n    /**\r\n     * cache target.\r\n     *\r\n     * @param {Type<any>} targetType\r\n     * @param {*} target\r\n     * @param {number} expires\r\n     * @memberof ICacheManager\r\n     */\r\n    cache(targetType: Type<any>, target: any, expires: number);\r\n    /**\r\n     * get cache target, if set expires will refresh cache timeout.\r\n     *\r\n     * @param {Type<any>} targetType\r\n     * @param {number} [expires] if set number will reset cache timeout.\r\n     * @returns {*}\r\n     * @memberof ICacheManager\r\n     */\r\n    get(targetType: Type<any>, expires?: number): any;\r\n    /**\r\n     * is check expires or not.\r\n     *\r\n     * @returns {boolean}\r\n     * @memberof ICacheManager\r\n     */\r\n    isChecking(): boolean;\r\n    /**\r\n     * run check expires.\r\n     *\r\n     * @memberof ICacheManager\r\n     */\r\n    checkExpires();\r\n    /**\r\n     * destory cache\r\n     *\r\n     * @param {Type<any>} targetType\r\n     * @param {*} [target]\r\n     * @memberof ICacheManager\r\n     */\r\n    destroy(targetType: Type<any>, target?: any);\r\n}\r\n"]}