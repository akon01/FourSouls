{"version":3,"sources":["core/decorators/Injectable.ts"],"names":[],"mappings":";;AAAA,0CAAqE;AAkCrE;;;;GAIG;AACU,QAAA,UAAU,GAAyB,gCAAoB,CAAqB,YAAY,CAAC,CAAC","file":"../../../core/decorators/Injectable.js","sourcesContent":["import { createClassDecorator, IClassDecorator } from '../factories';\r\nimport { InjectableMetadata } from '../metadatas';\r\n\r\n/**\r\n * Injectable decorator\r\n *\r\n * @export\r\n * @interface IInjectableDecorator\r\n * @extends {IClassDecorator<InjectableMetadata>}\r\n */\r\nexport interface IInjectableDecorator extends IClassDecorator<InjectableMetadata> {\r\n    // /**\r\n    //  * Injectable decorator, define for class.  use to define the class. it can setting provider to some token, singleton or not.\r\n    //  *\r\n    //  * @Injectable\r\n    //  *\r\n    //  * @param {(Registration<any> | symbol | string)} provide define this class provider for provide.\r\n    //  * @param {string} [alias] define this class provider with alias for provide.\r\n    //  * @param {boolean} [singlton] define this class as singlton.\r\n    //  * @param {number} [cache]  define class cahce expris when is not singlton.\r\n    //  */\r\n    // (provide: Registration<any> | symbol | string, alias?: string, singlton?: boolean, cache?: number): ClassDecorator;\r\n\r\n    /**\r\n     * Injectable decorator, define for class.  use to define the class. it can setting provider to some token, singleton or not.\r\n     *\r\n     * @Injectable\r\n     *\r\n     * @param {InjectableMetadata} [metadata] metadata map.\r\n     */\r\n    (metadata?: InjectableMetadata): ClassDecorator;\r\n}\r\n\r\n\r\n/**\r\n * Injectable decorator, define for class.  use to define the class. it can setting provider to some token, singleton or not.\r\n *\r\n * @Injectable\r\n */\r\nexport const Injectable: IInjectableDecorator = createClassDecorator<InjectableMetadata>('Injectable');\r\n\r\n"]}