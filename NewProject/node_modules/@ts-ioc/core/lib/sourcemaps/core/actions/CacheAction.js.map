{"version":3,"sources":["core/actions/CacheAction.ts"],"names":[],"mappings":"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","file":"../../../core/actions/CacheAction.js","sourcesContent":["import { ActionData } from '../ActionData';\r\nimport { ClassMetadata } from '../metadatas';\r\nimport { ActionComposite } from './ActionComposite';\r\nimport { IContainer } from '../../IContainer';\r\nimport { isNumber, isClass } from '../../utils';\r\nimport { CoreActions } from './CoreActions';\r\nimport { getOwnTypeMetadata } from '../factories';\r\nimport { CacheManagerToken } from '../../ICacheManager';\r\n\r\n\r\n/**\r\n * cache action data.\r\n *\r\n * @export\r\n * @interface CacheActionData\r\n * @extends {ActionData<ClassMetadata>}\r\n */\r\nexport interface CacheActionData extends ActionData<ClassMetadata> {\r\n\r\n}\r\n\r\n/**\r\n * cache action. To cache instance of Token. define cache expires in decorator.\r\n *\r\n * @export\r\n * @class CacheAction\r\n * @extends {ActionComposite}\r\n */\r\nexport class CacheAction extends ActionComposite {\r\n\r\n    constructor() {\r\n        super(CoreActions.cache)\r\n    }\r\n\r\n    protected working(container: IContainer, data: CacheActionData) {\r\n\r\n        if (data.raiseContainer && data.raiseContainer !== container) {\r\n            return data;\r\n        }\r\n\r\n        if (data.singleton || !data.targetType || !isClass(data.targetType)) {\r\n            return data;\r\n        }\r\n        let cacheManager = container.get(CacheManagerToken);\r\n\r\n        if (data.target) {\r\n            if (!cacheManager.hasCache(data.targetType)) {\r\n                let cacheMetadata = this.getCacheMetadata(container, data);\r\n                if (cacheMetadata) {\r\n                    cacheManager.cache(data.targetType, data.target, cacheMetadata.expires);\r\n                }\r\n            }\r\n        } else {\r\n            let target = cacheManager.get(data.targetType);\r\n            if (target) {\r\n                let cacheMetadata = this.getCacheMetadata(container, data);\r\n                if (cacheMetadata) {\r\n                    cacheManager.cache(data.targetType, target, cacheMetadata.expires);\r\n                    data.execResult = target;\r\n                }\r\n            }\r\n        }\r\n\r\n        return data;\r\n    }\r\n\r\n    getCacheMetadata(container: IContainer, data: CacheActionData): ClassMetadata {\r\n        let lifeScope = container.getLifeScope();\r\n        let matchs = lifeScope.getClassDecorators(data.targetType);\r\n        let cacheMetadata: ClassMetadata;\r\n        for (let i = 0; i < matchs.length; i++) {\r\n            let surm = matchs[i];\r\n            let metadata = getOwnTypeMetadata<ClassMetadata>(surm.name, data.targetType);\r\n            if (Array.isArray(metadata) && metadata.length > 0) {\r\n                cacheMetadata = metadata.find(c => c && isNumber(c.expires) && c.expires > 0);\r\n                if (cacheMetadata) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return cacheMetadata;\r\n    }\r\n\n                        static getClassAnnations():any  {\n                            return {\"name\":\"CacheAction\",\"params\":{\"constructor\":[],\"working\":[\"container\",\"data\"],\"getCacheMetadata\":[\"container\",\"data\"]}};\n                        }\n                   }\r\n\r\n"]}