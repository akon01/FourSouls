{"version":3,"sources":["actions/MatchPointcutAction.ts"],"names":[],"mappings":"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","file":"../../actions/MatchPointcutAction.js","sourcesContent":["\r\nimport {\r\n    IContainer, ActionData, ActionComposite, lang\r\n} from '@ts-ioc/core';\r\nimport { AdvisorToken } from '../IAdvisor';\r\nimport { AopActions } from './AopActions';\r\nimport { AdviceMetadata } from '../metadatas'\r\nimport { AdviceMatcherToken } from '../IAdviceMatcher';\r\nimport { Joinpoint } from '../joinpoints';\r\nimport { Advices, Advicer } from '../advices';\r\nimport { isValideAspectTarget } from '../isValideAspectTarget';\r\n\r\n\r\n/**\r\n * match pointcut action data.\r\n *\r\n * @export\r\n * @interface MatchPointcutActionData\r\n * @extends {ActionData<Joinpoint>}\r\n */\r\nexport interface MatchPointcutActionData extends ActionData<Joinpoint> {\r\n}\r\n\r\n/**\r\n *  match pointcut action.\r\n *\r\n * @export\r\n * @class MatchPointcutAction\r\n * @extends {ActionComposite}\r\n */\r\nexport class MatchPointcutAction extends ActionComposite {\r\n\r\n    constructor() {\r\n        super(AopActions.matchPointcut);\r\n    }\r\n\r\n    protected working(container: IContainer, data: MatchPointcutActionData) {\r\n        // aspect class do nothing.\r\n        if (!isValideAspectTarget(data.targetType)) {\r\n            return;\r\n        }\r\n\r\n        let advisor = container.get(AdvisorToken);\r\n        let matcher = container.get(AdviceMatcherToken);\r\n        advisor.aspects.forEach((adviceMetas, type) => {\r\n            let matchpoints = matcher.match(type, data.targetType, adviceMetas, data.target);\r\n            matchpoints.forEach(mpt => {\r\n                let fullName = mpt.fullName;\r\n                let advice = mpt.advice;\r\n\r\n                let advices = advisor.getAdvices(fullName);\r\n                if (!advices) {\r\n                    advices = {\r\n                        Before: [],\r\n                        Pointcut: [],\r\n                        After: [],\r\n                        Around: [],\r\n                        AfterThrowing: [],\r\n                        AfterReturning: []\r\n                    } as Advices;\r\n                    advisor.setAdvices(fullName, advices);\r\n                }\r\n                let advicer = lang.assign(mpt, {\r\n                    aspectType: type\r\n                }) as Advicer;\r\n\r\n                if (advice.adviceName === 'Before') {\r\n                    if (!advices.Before.some(a => this.isAdviceEquals(a.advice, advice))) {\r\n                        advices.Before.push(advicer);\r\n                    }\r\n                } else if (advice.adviceName === 'Pointcut') {\r\n                    if (!advices.Pointcut.some(a => this.isAdviceEquals(a.advice, advice))) {\r\n                        advices.Pointcut.push(advicer);\r\n                    }\r\n                } else if (advice.adviceName === 'Around') {\r\n                    if (!advices.Around.some(a => this.isAdviceEquals(a.advice, advice))) {\r\n                        advices.Around.push(advicer);\r\n                    }\r\n                } else if (advice.adviceName === 'After') {\r\n                    if (!advices.After.some(a => this.isAdviceEquals(a.advice, advice))) {\r\n                        advices.After.push(advicer);\r\n                    }\r\n                } else if (advice.adviceName === 'AfterThrowing') {\r\n                    if (!advices.AfterThrowing.some(a => this.isAdviceEquals(a.advice, advice))) {\r\n                        advices.AfterThrowing.push(advicer);\r\n                    }\r\n                } else if (advice.adviceName === 'AfterReturning') {\r\n                    if (!advices.AfterReturning.some(a => this.isAdviceEquals(a.advice, advice))) {\r\n                        advices.AfterReturning.push(advicer);\r\n                    }\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    isAdviceEquals(advice1: AdviceMetadata, advice2: AdviceMetadata) {\r\n        if (!advice1 || !advice2) {\r\n            return false;\r\n        }\r\n        if (advice1 === advice2) {\r\n            return true;\r\n        }\r\n\r\n        return advice1.adviceName === advice2.adviceName\r\n            && advice1.pointcut === advice2.pointcut\r\n            && advice1.propertyKey === advice2.propertyKey;\r\n    }\r\n\n                        static getClassAnnations():any  {\n                            return {\"name\":\"MatchPointcutAction\",\"params\":{\"constructor\":[],\"working\":[\"container\",\"data\"],\"isAdviceEquals\":[\"advice1\",\"advice2\"]}};\n                        }\n                   }\r\n"]}