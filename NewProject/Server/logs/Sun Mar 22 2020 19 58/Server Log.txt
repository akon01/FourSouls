Start Log 

 Player 1 19:58:47 $MATCH:  

 Player 1 19:58:48 $START_GAME:  

 Player 2 19:58:48 $MOVE_TO_TABLE:  

 Player 1 19:58:48 $MOVE_TO_TABLE:  

 Player 2 19:58:58 $FINISH_LOAD:  
{"id":2,"turnPlayerId":2} 

 Player 1 19:58:58 $FINISH_LOAD:  
{"id":1,"turnPlayerId":2} 

 Player 2 19:58:58 $SET_CHAR:  
{"originPlayerId":2,"playerId":1,"charCardId":314,"itemCardId":317} 

 Player 1 19:58:58 $ASSIGN_CHAR_TO_PLAYER:  
{"playerId":1,"charCardId":314,"itemCardId":317} 

 Player 1 19:58:58 $SET_CHAR_END:  
{"playerId":2} 

 Player 2 19:58:58 $CHOOSE_FOR_EDEN:  
{"playerId":2,"originPlayerId":2} 

 Player 2 19:58:58 $DECK_ARRAGMENT:  
{"deckType":5,"arrangement":[217,194,185,175,158,154,146,157,213,204,145,214,183,206,192,222,198,193,180,186,144,218,181,161,205,156,202,220,162,209,208,199,197,171,215,188,168,182,179,143,160,172,211,212,187,210,149,174,164,153,150,200,166,201,152,169,191,167,170,159,207,203,177,173,165,184,221,151,219,147,178,195,196,176,216,190,163,155,189,148]} 

 Player 2 19:59:52 $EDEN_CHOSEN:  
{"cardId":194,"playerId":2} 

 Player 2 19:59:52 $DECK_ARRAGMENT:  
{"deckType":5,"arrangement":[217,185,175,158,154,146,157,213,204,145,214,183,206,192,222,198,193,180,186,144,218,181,161,205,156,202,220,162,209,208,199,197,171,215,188,168,182,179,143,160,172,211,212,187,210,149,174,164,153,150,200,166,201,152,169,191,167,170,159,207,203,177,173,165,184,221,151,219,147,178,195,196,176,216,190,163,155,189,148]} 

 Player 2 19:59:52 $FLIP_CARD:  
{"cardId":194} 

 Player 2 19:59:52 $REGISTER_PASSIVE_ITEM:  
{"cardId":194} 

 Player 2 19:59:52 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"PLAYER_ADD_ITEM","args":[{"type":0,"number":194}],"result":true,"preventMethod":false,"methodScopeId":316,"scopeIsPlayer":true,"index":1,"originStackId":-1},"isAfterActivation":true,"index":1} 

 Player 2 19:59:52 $NEXT_STACK_ID:  

 Player 2 19:59:52 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 19:59:52 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Activate Placenta effect GainStats<GainStats>"} 

 Player 2 19:59:52 $ADD_TO_STACK:  
{"stackEffect":{"effectCollectedData":null,"entityId":1,"creatorCardId":316,"hasLockingStackEffect":false,"cardActivatorId":2,"cardWithEffectId":194,"effectToDo":{"effectName":"GainStats","cardEffectNum":0,"cardPlayerId":2,"cardId":194,"effctType":0},"isAfterActivation":true,"index":1,"hasDataBeenCollectedYet":false,"stackEffectType":14}} 

 Player 2 19:59:52 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Activate Placenta effect GainStats<GainStats>"} 

 Player 2 19:59:52 $ADD_SE_VIS_PREV:  
{"stackEffect":{"effectCollectedData":null,"entityId":1,"creatorCardId":316,"hasLockingStackEffect":false,"cardActivatorId":2,"cardWithEffectId":194,"effectToDo":{"effectName":"GainStats","cardEffectNum":0,"cardPlayerId":2,"cardId":194,"effctType":0},"isAfterActivation":true,"index":1,"hasDataBeenCollectedYet":false,"stackEffectType":14}} 

 Player 2 19:59:52 $SET_STACK_ICON:  
{"iconIndex":0} 

 Player 2 19:59:52 $SHOW_STACK_EFFECT:  
{"effectId":1} 

 Player 1 19:59:53 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 19:59:53 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 19:59:53 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Activate Placenta "} 

 Player 1 19:59:53 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Activate Placenta "} 

 Player 2 19:59:55 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":0,"_text":"Add ActivatePassiveEffect 1 "}} 

 Player 2 19:59:55 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Activate Placenta effect GainStats<GainStats>"} 

 Player 2 19:59:55 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Activate Placenta effect GainStats<GainStats>"} 

 Player 2 19:59:55 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"effectCollectedData":{"effectTargets":[316],"chainEffectsData":[],"methodArgs":[],"isPassive":true,"terminateOriginal":false,"effectCardOwner":316,"effectCardPlayer":316},"entityId":1,"creatorCardId":316,"hasLockingStackEffect":false,"cardActivatorId":2,"cardWithEffectId":194,"effectToDo":{"effectName":"GainStats","cardEffectNum":0,"cardPlayerId":2,"cardId":194,"effctType":0},"isAfterActivation":true,"index":1,"hasDataBeenCollectedYet":true,"stackEffectType":14}} 

 Player 2 19:59:55 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":1,"_text":"Response Adding ActivatePassiveEffect 1"},"childOfId":0} 

 Player 2 19:59:55 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":2,"_text":"Resolve ActivatePassiveEffect 1 "}} 

 Player 2 19:59:55 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Activate Placenta effect GainStats<GainStats>"} 

 Player 2 19:59:55 $ADD_RESOLVING_STACK_EFFECT:  
{"stackEffect":{"effectCollectedData":{"effectTargets":[316],"chainEffectsData":[],"methodArgs":[],"isPassive":true,"terminateOriginal":false,"effectCardOwner":316,"effectCardPlayer":316},"entityId":1,"creatorCardId":316,"hasLockingStackEffect":false,"cardActivatorId":2,"cardWithEffectId":194,"effectToDo":{"effectName":"GainStats","cardEffectNum":0,"cardPlayerId":2,"cardId":194,"effctType":0},"isAfterActivation":true,"index":1,"hasDataBeenCollectedYet":true,"stackEffectType":14}} 

 Player 2 19:59:55 $ACTIVATE_PARTICLE_EFFECT:  
{"cardId":194,"particleType":6} 

 Player 1 19:59:55 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Activate Placenta "} 

 Player 1 19:59:55 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Activate Placenta "} 

 Player 1 19:59:56 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Activate Placenta "} 

 Player 1 19:59:56 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Activate Placenta "} 

 Player 2 19:59:57 $DISABLE_PARTICLE_EFFECT:  
{"cardId":194,"particleType":6} 

 Player 2 19:59:57 $PLAYER_GAIN_HP:  
{"playerId":2,"hpToGain":1,"isTemp":false} 

 Player 2 19:59:57 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"PLAYER_ADD_ITEM","args":[{"type":0,"number":194}],"result":true,"preventMethod":false,"methodScopeId":316,"scopeIsPlayer":true,"index":1,"originStackId":-1},"isAfterActivation":true,"index":1} 

 Player 2 19:59:57 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Activate Placenta effect GainStats<GainStats>"} 

 Player 2 19:59:57 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"effectCollectedData":{"effectTargets":[316],"chainEffectsData":[],"methodArgs":[],"isPassive":true,"terminateOriginal":false,"effectCardOwner":316,"effectCardPlayer":316},"entityId":1,"creatorCardId":316,"hasLockingStackEffect":false,"cardActivatorId":2,"cardWithEffectId":194,"isAfterActivation":true,"index":1,"hasDataBeenCollectedYet":true,"stackEffectType":14}} 

 Player 2 19:59:57 $REMOVE_RESOLVING_STACK_EFFECT:  
{"stackEffectId":1} 

 Player 2 19:59:57 $SET_STACK_ICON:  
{"iconIndex":1} 

 Player 2 19:59:57 $SHOW_STACK_EFFECT:  
{"effectId":1} 

 Player 1 19:59:57 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Activate Placenta "} 

 Player 1 19:59:57 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Activate Placenta "} 

 Player 2 20:00:00 $REMOVE_SE_VIS_PREV:  
{"stackEffectId":1} 

 Player 2 20:00:00 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":3,"_text":"Remove After Resolve ActivatePassiveEffect 1  "}} 

 Player 2 20:00:00 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 20:00:00 $REMOVE_FROM_STACK:  
{"stackEffect":{"effectCollectedData":{"effectTargets":[316],"chainEffectsData":[],"methodArgs":[],"isPassive":true,"terminateOriginal":false,"effectCardOwner":316,"effectCardPlayer":316},"entityId":1,"creatorCardId":316,"hasLockingStackEffect":false,"cardActivatorId":2,"cardWithEffectId":194,"isAfterActivation":true,"index":1,"hasDataBeenCollectedYet":true,"stackEffectType":14}} 

 Player 2 20:00:00 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":4,"_text":"Response Remove After Resolve ActivatePassiveEffect 1"},"childOfId":3} 

 Player 2 20:00:00 $ACTION_MASSAGE_REMOVE:  
{"id":4} 

 Player 2 20:00:00 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":5,"_text":"Stack Was Emptied "}} 

 Player 2 20:00:00 $CLEAR_SE_VIS:  

 Player 2 20:00:00 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 20:00:00 $ASSIGN_CHAR_TO_PLAYER:  
{"playerId":2,"charCardId":316,"itemCardId":194} 

 Player 2 20:00:00 $DECK_ARRAGMENT:  
{"deckType":1,"arrangement":[110,70,89,102,141,54,22,139,67,106,112,138,122,32,28,40,101,121,69,119,103,94,38,9,37,35,124,73,26,20,92,111,34,42,68,99,135,14,52,60,8,57,64,116,113,83,140,78,50,93,43,12,137,51,29,77,61,65,49,15,75,98,90,66,125,63,74,79,108,86,41,44,13,24,53,62,129,17,7,58,76,10,11,126,96,56,91,109,131,81,80,127,133,85,16,21,107,55,18,95,46,123,6,118,88,30,104,130,87,114,136,45,47,97,25,100,48,36,23,72,82,115,132,19,71,134,39,33,120,27,59,128,105,117,84,31]} 

 Player 2 20:00:00 $DECK_ARRAGMENT:  
{"deckType":2,"arrangement":[299,263,305,259,275,232,280,304,240,278,246,274,227,230,237,241,238,265,303,255,289,308,294,292,247,309,291,235,297,283,281,233,225,258,257,249,256,277,229,285,288,248,296,272,245,306,267,273,242,290,282,260,261,236,268,254,284,293,243,250,231,295,286,287,279,266,262,271,251,234,226,239,301,264,224,300,269,244,302,252,253,276,298,228,307,270]} 

 Player 2 20:00:01 $DECK_ARRAGMENT:  
{"deckType":5,"arrangement":[198,189,183,208,192,151,218,175,145,200,179,160,169,163,186,143,154,170,184,203,171,146,209,199,214,221,161,215,165,166,168,193,178,207,153,150,220,167,174,185,210,180,195,147,177,187,205,188,213,196,176,158,219,164,173,190,211,206,172,181,201,159,216,191,204,155,156,149,222,197,212,182,152,217,148,162,144,202,157]} 

 Player 2 20:00:01 $DRAW_CARD:  
{"deckType":5} 

 Player 2 20:00:01 $FLIP_CARD:  
{"cardId":157} 

 Player 2 20:00:01 $ADD_STORE_CARD:  
{"cardId":157} 

 Player 2 20:00:01 $DRAW_CARD:  
{"deckType":5} 

 Player 2 20:00:01 $FLIP_CARD:  
{"cardId":202} 

 Player 2 20:00:01 $ADD_STORE_CARD:  
{"cardId":202} 

 Player 2 20:00:01 $DRAW_CARD:  
{"deckType":2} 

 Player 2 20:00:01 $FLIP_CARD:  
{"cardId":270} 

 Player 2 20:00:01 $REGISTER_PASSIVE_ITEM:  
{"cardId":270} 

 Player 2 20:00:01 $ADD_MONSTER:  
{"monsterPlaceId":1,"monsterId":270} 

 Player 2 20:00:01 $NEW_MONSTER_ON_PLACE:  
{"cardId":270,"monsterPlaceId":1} 

 Player 2 20:00:01 $DRAW_CARD:  
{"deckType":2} 

 Player 2 20:00:01 $FLIP_CARD:  
{"cardId":307} 

 Player 2 20:00:01 $REGISTER_PASSIVE_ITEM:  
{"cardId":307} 

 Player 2 20:00:01 $ADD_MONSTER:  
{"monsterPlaceId":2,"monsterId":307} 

 Player 2 20:00:01 $NEW_MONSTER_ON_PLACE:  
{"cardId":307,"monsterPlaceId":2} 

 Player 2 20:00:01 $SET_MONEY:  
{"playerId":1,"numOfCoins":3} 

 Player 2 20:00:01 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"PLAYER_CHANGE_MONEY","args":[{"type":2,"number":3}],"result":null,"preventMethod":false,"methodScopeId":314,"scopeIsPlayer":true,"index":2,"originStackId":-1},"isAfterActivation":true,"index":2} 

 Player 2 20:00:01 $DRAW_CARD:  
{"deckType":1} 

 Player 2 20:00:01 $MOVE_CARD:  
{"moveIndex":1,"cardId":31,"placeID":1,"flipIfFlipped":false,"firstPos":{"x":1,"y":-5,"z":0},"playerId":2,"placeType":"Hand"} 

 Player 1 20:00:01 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Activate Placenta "} 

 Player 1 20:00:01 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Activate Placenta "} 

 Player 1 20:00:02 $MOVE_CARD_END:  
{"moveIndex":1,"cardId":31,"flipIfFlipped":false,"playerId":2} 

 Player 2 20:00:02 $CARD_DRAWN:  
{"playerId":1,"deckType":1,"drawnCardId":31} 

 Player 2 20:00:02 $FLIP_CARD:  
{"cardId":31} 

 Player 2 20:00:02 $FLIP_CARD:  
{"cardId":31} 

 Player 2 20:00:02 $PLAYER_GET_LOOT:  
{"playerId":1,"cardId":31} 

 Player 2 20:00:02 $DRAW_CARD:  
{"deckType":1} 

 Player 2 20:00:02 $MOVE_CARD:  
{"moveIndex":2,"cardId":84,"placeID":1,"flipIfFlipped":false,"firstPos":{"x":1,"y":-5,"z":0},"playerId":2,"placeType":"Hand"} 

 Player 1 20:00:02 $MOVE_CARD_END:  
{"moveIndex":2,"cardId":84,"flipIfFlipped":false,"playerId":2} 

 Player 2 20:00:02 $CARD_DRAWN:  
{"playerId":1,"deckType":1,"drawnCardId":84} 

 Player 2 20:00:02 $FLIP_CARD:  
{"cardId":84} 

 Player 2 20:00:02 $FLIP_CARD:  
{"cardId":84} 

 Player 2 20:00:02 $PLAYER_GET_LOOT:  
{"playerId":1,"cardId":84} 

 Player 2 20:00:02 $DRAW_CARD:  
{"deckType":1} 

 Player 2 20:00:02 $MOVE_CARD:  
{"moveIndex":3,"cardId":117,"placeID":1,"flipIfFlipped":false,"firstPos":{"x":1,"y":-5,"z":0},"playerId":2,"placeType":"Hand"} 

 Player 1 20:00:03 $MOVE_CARD_END:  
{"moveIndex":3,"cardId":117,"flipIfFlipped":false,"playerId":2} 

 Player 2 20:00:03 $CARD_DRAWN:  
{"playerId":1,"deckType":1,"drawnCardId":117} 

 Player 2 20:00:03 $FLIP_CARD:  
{"cardId":117} 

 Player 2 20:00:03 $FLIP_CARD:  
{"cardId":117} 

 Player 2 20:00:03 $PLAYER_GET_LOOT:  
{"playerId":1,"cardId":117} 

 Player 2 20:00:03 $SET_MONEY:  
{"playerId":2,"numOfCoins":3} 

 Player 2 20:00:03 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"PLAYER_CHANGE_MONEY","args":[{"type":2,"number":3}],"result":null,"preventMethod":false,"methodScopeId":316,"scopeIsPlayer":true,"index":3,"originStackId":-1},"isAfterActivation":true,"index":3} 

 Player 2 20:00:03 $DRAW_CARD:  
{"deckType":1} 

 Player 2 20:00:03 $MOVE_CARD:  
{"moveIndex":4,"cardId":105,"placeID":2,"flipIfFlipped":false,"firstPos":{"x":1,"y":-5,"z":0},"playerId":2,"placeType":"Hand"} 

 Player 1 20:00:03 $MOVE_CARD_END:  
{"moveIndex":4,"cardId":105,"flipIfFlipped":false,"playerId":2} 

 Player 2 20:00:03 $CARD_DRAWN:  
{"playerId":2,"deckType":1,"drawnCardId":105} 

 Player 2 20:00:03 $FLIP_CARD:  
{"cardId":105} 

 Player 2 20:00:04 $PLAYER_GET_LOOT:  
{"playerId":2,"cardId":105} 

 Player 2 20:00:04 $DRAW_CARD:  
{"deckType":1} 

 Player 2 20:00:04 $MOVE_CARD:  
{"moveIndex":5,"cardId":128,"placeID":2,"flipIfFlipped":false,"firstPos":{"x":1,"y":-5,"z":0},"playerId":2,"placeType":"Hand"} 

 Player 1 20:00:04 $MOVE_CARD_END:  
{"moveIndex":5,"cardId":128,"flipIfFlipped":false,"playerId":2} 

 Player 2 20:00:04 $CARD_DRAWN:  
{"playerId":2,"deckType":1,"drawnCardId":128} 

 Player 2 20:00:04 $FLIP_CARD:  
{"cardId":128} 

 Player 2 20:00:04 $PLAYER_GET_LOOT:  
{"playerId":2,"cardId":128} 

 Player 2 20:00:04 $DRAW_CARD:  
{"deckType":1} 

 Player 2 20:00:04 $MOVE_CARD:  
{"moveIndex":6,"cardId":59,"placeID":2,"flipIfFlipped":false,"firstPos":{"x":1,"y":-5,"z":0},"playerId":2,"placeType":"Hand"} 

 Player 1 20:00:05 $MOVE_CARD_END:  
{"moveIndex":6,"cardId":59,"flipIfFlipped":false,"playerId":2} 

 Player 2 20:00:05 $CARD_DRAWN:  
{"playerId":2,"deckType":1,"drawnCardId":59} 

 Player 2 20:00:05 $FLIP_CARD:  
{"cardId":59} 

 Player 2 20:00:05 $PLAYER_GET_LOOT:  
{"playerId":2,"cardId":59} 

 Player 2 20:00:05 $GAME_HAS_STARTED:  

 Player 2 20:00:05 $SET_TURN:  
{"playerId":1} 

 Player 2 20:00:05 $START_TURN:  
{"playerId":1} 

 Player 2 20:00:05 $UPDATE_ACTIONS:  

 Player 1 20:00:05 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 20:00:05 $NEXT_STACK_ID:  

 Player 1 20:00:05 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 20:00:05 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 start turn loot"} 

 Player 1 20:00:05 $ADD_TO_STACK:  
{"stackEffect":{"entityId":2,"creatorCardId":314,"turnPlayerCardId":314,"stackEffectType":13}} 

 Player 1 20:00:05 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 start turn loot"} 

 Player 1 20:00:05 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":2,"creatorCardId":314,"turnPlayerCardId":314,"stackEffectType":13}} 

 Player 1 20:00:05 $SET_STACK_ICON:  
{"iconIndex":0} 

 Player 1 20:00:05 $SHOW_STACK_EFFECT:  
{"effectId":2} 

 Player 2 20:00:05 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 20:00:05 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 20:00:05 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 start turn loot"} 

 Player 2 20:00:05 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 start turn loot"} 

 Player 1 20:00:08 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":6,"_text":"Add StartTurnLoot 2 "}} 

 Player 1 20:00:08 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 20:00:08 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 start turn loot"} 

 Player 1 20:00:08 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":2,"creatorCardId":314,"turnPlayerCardId":314,"stackEffectType":13}} 

 Player 1 20:00:08 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":7,"_text":"Response Adding StartTurnLoot 2"},"childOfId":6} 

 Player 1 20:00:08 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":8,"_text":"Wait For Response From Player 1 "},"childOfId":6} 

 Player 1 20:00:08 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 20:00:08 $ACTION_MASSAGE_REMOVE:  
{"id":8} 

 Player 1 20:00:08 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":9,"_text":"Wait For Response From Player 2 "},"childOfId":6} 

 Player 1 20:00:08 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 20:00:08 $GET_REACTION:  
{"playerId":2,"activePlayerId":1} 

 Player 2 20:00:08 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 start turn loot"} 

 Player 2 20:00:08 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 start turn loot"} 

 Player 2 20:00:08 $HIDE_REACTIONS:  
{"playerId":2,"cardsIds":[316]} 

 Player 2 20:00:08 $RESPOND_TO:  
{"playerId":1,"stackEffectResponse":false} 

 Player 1 20:00:08 $ACTION_MASSAGE_REMOVE:  
{"id":9} 

 Player 1 20:00:09 $ACTION_MASSAGE_REMOVE:  
{"id":7} 

 Player 1 20:00:09 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":10,"_text":"Resolve StartTurnLoot 2 "}} 

 Player 1 20:00:09 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 start turn loot"} 

 Player 1 20:00:09 $ADD_RESOLVING_STACK_EFFECT:  
{"stackEffect":{"entityId":2,"creatorCardId":314,"turnPlayerCardId":314,"stackEffectType":13}} 

 Player 1 20:00:09 $DRAW_CARD:  
{"deckType":1} 

 Player 1 20:00:09 $MOVE_CARD:  
{"moveIndex":7,"cardId":27,"placeID":1,"flipIfFlipped":false,"firstPos":{"x":1,"y":-5,"z":0},"playerId":1,"placeType":"Hand"} 

 Player 2 20:00:09 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 start turn loot"} 

 Player 2 20:00:09 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 start turn loot"} 

 Player 2 20:00:09 $MOVE_CARD_END:  
{"moveIndex":7,"cardId":27,"flipIfFlipped":false,"playerId":1} 

 Player 1 20:00:09 $CARD_DRAWN:  
{"playerId":1,"deckType":1,"drawnCardId":27} 

 Player 1 20:00:09 $FLIP_CARD:  
{"cardId":27} 

 Player 1 20:00:09 $PLAYER_GET_LOOT:  
{"playerId":1,"cardId":27} 

 Player 1 20:00:09 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 start turn loot"} 

 Player 1 20:00:09 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":2,"creatorCardId":314,"turnPlayerCardId":314,"stackEffectType":13}} 

 Player 1 20:00:09 $REMOVE_RESOLVING_STACK_EFFECT:  
{"stackEffectId":2} 

 Player 1 20:00:09 $SET_STACK_ICON:  
{"iconIndex":1} 

 Player 1 20:00:09 $SHOW_STACK_EFFECT:  
{"effectId":2} 

 Player 2 20:00:09 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 start turn loot"} 

 Player 2 20:00:10 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 start turn loot"} 

 Player 1 20:00:12 $REMOVE_SE_VIS_PREV:  
{"stackEffectId":2} 

 Player 1 20:00:12 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":11,"_text":"Remove After Resolve StartTurnLoot 2  "}} 

 Player 1 20:00:12 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 20:00:12 $REMOVE_FROM_STACK:  
{"stackEffect":{"entityId":2,"creatorCardId":314,"turnPlayerCardId":314,"stackEffectType":13}} 

 Player 1 20:00:12 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":12,"_text":"Response Remove After Resolve StartTurnLoot 2"},"childOfId":11} 

 Player 1 20:00:12 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":13,"_text":"Wait For Response From Player 2 "},"childOfId":11} 

 Player 1 20:00:12 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 20:00:12 $GET_REACTION:  
{"playerId":2,"activePlayerId":1} 

 Player 2 20:00:12 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 start turn loot"} 

 Player 2 20:00:13 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 start turn loot"} 

 Player 2 20:00:13 $HIDE_REACTIONS:  
{"playerId":2,"cardsIds":[316]} 

 Player 2 20:00:13 $RESPOND_TO:  
{"playerId":1,"stackEffectResponse":false} 

 Player 1 20:00:13 $ACTION_MASSAGE_REMOVE:  
{"id":13} 

 Player 1 20:00:13 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":14,"_text":"Wait For Response From Player 1 "},"childOfId":11} 

 Player 1 20:00:13 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 20:00:13 $ACTION_MASSAGE_REMOVE:  
{"id":14} 

 Player 1 20:00:13 $ACTION_MASSAGE_REMOVE:  
{"id":12} 

 Player 1 20:00:13 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":15,"_text":"Stack Was Emptied "}} 

 Player 1 20:00:13 $CLEAR_SE_VIS:  

 Player 1 20:00:13 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 20:02:14 $NEXT_STACK_ID:  

 Player 1 20:02:14 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 20:02:14 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 play 2 Cents(12) "} 

 Player 1 20:02:14 $ADD_TO_STACK:  
{"stackEffect":{"entityId":3,"creatorCardId":314,"hasLockingStackEffect":false,"hasLockingStackEffectResolved":false,"lootToPlayCardId":31,"lootPlayerId":1,"hasDataBeenCollectedYet":false,"stackEffectType":8}} 

 Player 1 20:02:14 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 play 2 Cents(12) "} 

 Player 1 20:02:14 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":3,"creatorCardId":314,"hasLockingStackEffect":false,"hasLockingStackEffectResolved":false,"lootToPlayCardId":31,"lootPlayerId":1,"hasDataBeenCollectedYet":false,"stackEffectType":8}} 

 Player 1 20:02:14 $SET_STACK_ICON:  
{"iconIndex":0} 

 Player 1 20:02:14 $SHOW_STACK_EFFECT:  
{"effectId":3} 

 Player 2 20:02:14 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 20:02:15 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 20:02:15 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 play 2 Cents(12) "} 

 Player 2 20:02:15 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 play 2 Cents(12) "} 

 Player 1 20:02:17 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":16,"_text":"Add PlayLootCardStackEffect 3 "}} 

 Player 1 20:02:17 $PLAYER_LOSE_LOOT:  
{"playerId":1,"cardId":31} 

 Player 1 20:02:17 $MOVE_CARD:  
{"moveIndex":8,"cardId":31,"placeID":328,"flipIfFlipped":true,"playerId":1,"placeType":"Card"} 

 Player 2 20:02:17 $MOVE_CARD_END:  
{"moveIndex":8,"cardId":31,"flipIfFlipped":true,"playerId":1} 

 Player 1 20:02:17 $MOVE_CARD_TO_PILE:  
{"type":7,"cardId":31} 

 Player 1 20:02:17 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 play 2 Cents(12): addMoney"} 

 Player 1 20:02:17 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 20:02:18 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 play 2 Cents(12): addMoney"} 

 Player 1 20:02:18 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":3,"creatorCardId":314,"hasLockingStackEffect":false,"hasLockingStackEffectResolved":false,"lootToPlayCardId":31,"lootPlayerId":1,"effectToDo":{"effectName":"addMoney","cardEffectNum":0,"cardPlayerId":1,"cardId":31,"effctType":1},"hasDataBeenCollectedYet":true,"stackEffectType":8}} 

 Player 1 20:02:18 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":17,"_text":"Response Adding PlayLootCardStackEffect 3"},"childOfId":16} 

 Player 1 20:02:18 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":18,"_text":"Wait For Response From Player 1 "},"childOfId":16} 

 Player 1 20:02:18 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 20:02:18 $ACTION_MASSAGE_REMOVE:  
{"id":18} 

 Player 1 20:02:18 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":19,"_text":"Wait For Response From Player 2 "},"childOfId":16} 

 Player 1 20:02:18 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 20:02:18 $GET_REACTION:  
{"playerId":2,"activePlayerId":1} 

 Player 2 20:02:18 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 play 2 Cents(12) "} 

 Player 2 20:02:18 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 play 2 Cents(12) "} 

 Player 2 20:02:18 $HIDE_REACTIONS:  
{"playerId":2,"cardsIds":[316]} 

 Player 2 20:02:18 $RESPOND_TO:  
{"playerId":1,"stackEffectResponse":false} 

 Player 1 20:02:18 $ACTION_MASSAGE_REMOVE:  
{"id":19} 

 Player 1 20:02:18 $ACTION_MASSAGE_REMOVE:  
{"id":17} 

 Player 1 20:02:18 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":20,"_text":"Resolve PlayLootCardStackEffect 3 "}} 

 Player 1 20:02:18 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 play 2 Cents(12): addMoney"} 

 Player 1 20:02:18 $ADD_RESOLVING_STACK_EFFECT:  
{"stackEffect":{"entityId":3,"creatorCardId":314,"hasLockingStackEffect":false,"hasLockingStackEffectResolved":false,"lootToPlayCardId":31,"lootPlayerId":1,"effectToDo":{"effectName":"addMoney","cardEffectNum":0,"cardPlayerId":1,"cardId":31,"effctType":1},"hasDataBeenCollectedYet":true,"stackEffectType":8}} 

 Player 1 20:02:18 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 play 2 Cents(12): addMoney"} 

 Player 1 20:02:18 $ACTIVATE_PARTICLE_EFFECT:  
{"cardId":31,"particleType":6} 

 Player 2 20:02:18 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 play 2 Cents(12) "} 

 Player 2 20:02:18 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 play 2 Cents(12) "} 

 Player 1 20:02:20 $DISABLE_PARTICLE_EFFECT:  
{"cardId":31,"particleType":6} 

 Player 1 20:02:20 $SET_MONEY:  
{"playerId":1,"numOfCoins":5} 

 Player 1 20:02:20 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"PLAYER_CHANGE_MONEY","args":[{"type":2,"number":2}],"result":null,"preventMethod":false,"methodScopeId":314,"scopeIsPlayer":true,"index":1,"originStackId":-1},"isAfterActivation":true,"index":1} 

 Player 1 20:02:20 $REMOVE_FROM_PILE:  
{"cardId":31} 

 Player 1 20:02:20 $MOVE_CARD:  
{"moveIndex":9,"cardId":31,"placeID":329,"flipIfFlipped":true,"playerId":1,"placeType":"Card"} 

 Player 2 20:02:20 $MOVE_CARD_END:  
{"moveIndex":9,"cardId":31,"flipIfFlipped":true,"playerId":1} 

 Player 1 20:02:21 $MOVE_CARD_TO_PILE:  
{"type":1,"cardId":31} 

 Player 1 20:02:21 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 play 2 Cents(12): addMoney"} 

 Player 1 20:02:21 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":3,"creatorCardId":314,"hasLockingStackEffect":false,"hasLockingStackEffectResolved":false,"lootToPlayCardId":31,"lootPlayerId":1,"hasDataBeenCollectedYet":true,"stackEffectType":8}} 

 Player 1 20:02:21 $REMOVE_RESOLVING_STACK_EFFECT:  
{"stackEffectId":3} 

 Player 1 20:02:21 $SET_STACK_ICON:  
{"iconIndex":1} 

 Player 1 20:02:21 $SHOW_STACK_EFFECT:  
{"effectId":3} 

 Player 2 20:02:21 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 play 2 Cents(12) "} 

 Player 2 20:02:21 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 play 2 Cents(12) "} 

 Player 1 20:02:24 $REMOVE_SE_VIS_PREV:  
{"stackEffectId":3} 

 Player 1 20:02:24 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":21,"_text":"Remove After Resolve PlayLootCardStackEffect 3  "}} 

 Player 1 20:02:24 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 20:02:24 $REMOVE_FROM_STACK:  
{"stackEffect":{"entityId":3,"creatorCardId":314,"hasLockingStackEffect":false,"hasLockingStackEffectResolved":false,"lootToPlayCardId":31,"lootPlayerId":1,"hasDataBeenCollectedYet":true,"stackEffectType":8}} 

 Player 1 20:02:24 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":22,"_text":"Response Remove After Resolve PlayLootCardStackEffect 3"},"childOfId":21} 

 Player 1 20:02:24 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":23,"_text":"Wait For Response From Player 2 "},"childOfId":21} 

 Player 1 20:02:24 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 20:02:24 $GET_REACTION:  
{"playerId":2,"activePlayerId":1} 

 Player 2 20:02:24 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 play 2 Cents(12) "} 

 Player 2 20:02:24 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 play 2 Cents(12) "} 

 Player 2 20:02:24 $HIDE_REACTIONS:  
{"playerId":2,"cardsIds":[316]} 

 Player 2 20:02:24 $RESPOND_TO:  
{"playerId":1,"stackEffectResponse":false} 

 Player 1 20:02:24 $ACTION_MASSAGE_REMOVE:  
{"id":23} 

 Player 1 20:02:24 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":24,"_text":"Wait For Response From Player 1 "},"childOfId":21} 

 Player 1 20:02:24 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 20:02:24 $ACTION_MASSAGE_REMOVE:  
{"id":24} 

 Player 1 20:02:24 $ACTION_MASSAGE_REMOVE:  
{"id":22} 

 Player 1 20:02:24 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":25,"_text":"Stack Was Emptied "}} 

 Player 1 20:02:24 $CLEAR_SE_VIS:  

 Player 1 20:02:24 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 20:06:14 $NEXT_STACK_ID:  

 Player 1 20:06:14 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 20:06:14 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1  declared attack on War"} 

 Player 1 20:06:14 $ADD_TO_STACK:  
{"stackEffect":{"entityId":4,"creatorCardId":314,"attackingPlayerCardId":314,"idOfCardBeingAttacked":307,"stackEffectType":4}} 

 Player 1 20:06:14 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1  declared attack on War"} 

 Player 1 20:06:14 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":4,"creatorCardId":314,"attackingPlayerCardId":314,"idOfCardBeingAttacked":307,"stackEffectType":4}} 

 Player 1 20:06:15 $SET_STACK_ICON:  
{"iconIndex":0} 

 Player 1 20:06:15 $SHOW_STACK_EFFECT:  
{"effectId":4} 

 Player 2 20:06:15 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 20:06:15 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 20:06:15 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1  declared attack on War"} 

 Player 2 20:06:15 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1  declared attack on War"} 

 Player 1 20:06:17 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":26,"_text":"Add DeclareAttack 4 "}} 

 Player 1 20:06:17 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 20:06:17 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1  declared attack on War"} 

 Player 1 20:06:17 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":4,"creatorCardId":314,"attackingPlayerCardId":314,"idOfCardBeingAttacked":307,"stackEffectType":4}} 

 Player 1 20:06:17 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":27,"_text":"Response Adding DeclareAttack 4"},"childOfId":26} 

 Player 1 20:06:17 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":28,"_text":"Wait For Response From Player 1 "},"childOfId":26} 

 Player 1 20:06:18 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 20:06:18 $ACTION_MASSAGE_REMOVE:  
{"id":28} 

 Player 1 20:06:18 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":29,"_text":"Wait For Response From Player 2 "},"childOfId":26} 

 Player 1 20:06:18 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 20:06:18 $GET_REACTION:  
{"playerId":2,"activePlayerId":1} 

 Player 2 20:06:18 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1  declared attack on War"} 

 Player 2 20:06:18 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1  declared attack on War"} 

 Player 2 20:06:18 $HIDE_REACTIONS:  
{"playerId":2,"cardsIds":[316]} 

 Player 2 20:06:18 $RESPOND_TO:  
{"playerId":1,"stackEffectResponse":false} 

 Player 1 20:06:18 $ACTION_MASSAGE_REMOVE:  
{"id":29} 

 Player 1 20:06:18 $ACTION_MASSAGE_REMOVE:  
{"id":27} 

 Player 1 20:06:18 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":30,"_text":"Resolve DeclareAttack 4 "}} 

 Player 1 20:06:18 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1  declared attack on War"} 

 Player 1 20:06:18 $ADD_RESOLVING_STACK_EFFECT:  
{"stackEffect":{"entityId":4,"creatorCardId":314,"attackingPlayerCardId":314,"idOfCardBeingAttacked":307,"stackEffectType":4}} 

 Player 1 20:06:18 $ACTIVATE_PARTICLE_EFFECT:  
{"cardId":307,"particleType":5} 

 Player 1 20:06:18 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"PLAYER_DECLARE_ATTACK","args":[],"result":null,"preventMethod":false,"methodScopeId":314,"scopeIsPlayer":true,"index":2,"originStackId":4},"isAfterActivation":true,"index":2} 

 Player 1 20:06:18 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1  declared attack on War"} 

 Player 1 20:06:18 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":4,"creatorCardId":314,"attackingPlayerCardId":314,"idOfCardBeingAttacked":307,"stackEffectType":4}} 

 Player 1 20:06:18 $REMOVE_RESOLVING_STACK_EFFECT:  
{"stackEffectId":4} 

 Player 1 20:06:18 $SET_STACK_ICON:  
{"iconIndex":1} 

 Player 1 20:06:18 $SHOW_STACK_EFFECT:  
{"effectId":4} 

 Player 2 20:06:18 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1  declared attack on War"} 

 Player 2 20:06:18 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1  declared attack on War"} 

 Player 2 20:06:18 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1  declared attack on War"} 

 Player 2 20:06:18 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1  declared attack on War"} 

 Player 1 20:06:21 $REMOVE_SE_VIS_PREV:  
{"stackEffectId":4} 

 Player 1 20:06:21 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":31,"_text":"Remove After Resolve DeclareAttack 4  "}} 

 Player 1 20:06:21 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 20:06:21 $REMOVE_FROM_STACK:  
{"stackEffect":{"entityId":4,"creatorCardId":314,"attackingPlayerCardId":314,"idOfCardBeingAttacked":307,"stackEffectType":4}} 

 Player 1 20:06:21 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":32,"_text":"Response Remove After Resolve DeclareAttack 4"},"childOfId":31} 

 Player 1 20:06:21 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":33,"_text":"Wait For Response From Player 2 "},"childOfId":31} 

 Player 1 20:06:21 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 20:06:21 $GET_REACTION:  
{"playerId":2,"activePlayerId":1} 

 Player 2 20:06:21 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1  declared attack on War"} 

 Player 2 20:06:21 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1  declared attack on War"} 

 Player 2 20:06:21 $HIDE_REACTIONS:  
{"playerId":2,"cardsIds":[316]} 

 Player 2 20:06:21 $RESPOND_TO:  
{"playerId":1,"stackEffectResponse":false} 

 Player 1 20:06:21 $ACTION_MASSAGE_REMOVE:  
{"id":33} 

 Player 1 20:06:21 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":34,"_text":"Wait For Response From Player 1 "},"childOfId":31} 

 Player 1 20:06:21 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 20:06:21 $ACTION_MASSAGE_REMOVE:  
{"id":34} 

 Player 1 20:06:21 $ACTION_MASSAGE_REMOVE:  
{"id":32} 

 Player 1 20:06:21 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":35,"_text":"Stack Was Emptied "}} 

 Player 1 20:06:21 $CLEAR_SE_VIS:  

 Player 1 20:06:21 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 20:06:28 $NEXT_STACK_ID:  

 Player 1 20:06:28 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 20:06:28 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against War<Monster>"} 

 Player 1 20:06:28 $ADD_TO_STACK:  
{"stackEffect":{"entityId":5,"creatorCardId":314,"rollingPlayerCardId":314,"stackEffectType":2,"attackedMonsterCardId":307}} 

 Player 1 20:06:28 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against War<Monster>"} 

 Player 1 20:06:28 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":5,"creatorCardId":314,"rollingPlayerCardId":314,"stackEffectType":2,"attackedMonsterCardId":307}} 

 Player 1 20:06:28 $SET_STACK_ICON:  
{"iconIndex":0} 

 Player 1 20:06:28 $SHOW_STACK_EFFECT:  
{"effectId":5} 

 Player 2 20:06:28 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 20:06:28 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 20:06:28 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against War<Monster>"} 

 Player 2 20:06:28 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against War<Monster>"} 

 Player 1 20:06:31 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":36,"_text":"Add AttackRoll 5 "}} 

 Player 1 20:06:31 $ROLL_DICE:  
{"playerId":1} 

 Player 1 20:06:33 $ROLL_DICE_ENDED:  
{"playerId":1,"numberRolled":5} 

 Player 1 20:06:33 $UPDATE_STACK_VIS:  
{"stackId":5,"text":"player rolled 5 vs War<Monster>"} 

 Player 1 20:06:33 $SHOW_DICE_ROLL:  
{"stackId":5} 

 Player 1 20:06:36 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 rolled 5 vs War<Monster>"} 

 Player 1 20:06:36 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 20:06:36 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 rolled 5 vs War<Monster>"} 

 Player 1 20:06:36 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":5,"creatorCardId":314,"numberRolled":5,"rollingPlayerCardId":314,"stackEffectType":2,"attackedMonsterCardId":307}} 

 Player 1 20:06:36 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":37,"_text":"Response Adding AttackRoll 5"},"childOfId":36} 

 Player 1 20:06:36 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":38,"_text":"Wait For Response From Player 1 "},"childOfId":36} 

 Player 1 20:06:36 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 20:06:36 $ACTION_MASSAGE_REMOVE:  
{"id":38} 

 Player 1 20:06:36 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":39,"_text":"Wait For Response From Player 2 "},"childOfId":36} 

 Player 1 20:06:36 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 20:06:36 $GET_REACTION:  
{"playerId":2,"activePlayerId":1} 

 Player 2 20:06:36 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against War<Monster>"} 

 Player 2 20:06:36 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against War<Monster>"} 

 Player 2 20:06:36 $HIDE_REACTIONS:  
{"playerId":2,"cardsIds":[316]} 

 Player 2 20:06:36 $RESPOND_TO:  
{"playerId":1,"stackEffectResponse":false} 

 Player 1 20:06:37 $ACTION_MASSAGE_REMOVE:  
{"id":39} 

 Player 1 20:06:37 $ACTION_MASSAGE_REMOVE:  
{"id":37} 

 Player 1 20:06:37 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":40,"_text":"Resolve AttackRoll 5 "}} 

 Player 1 20:06:37 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 rolled 5 vs War<Monster>"} 

 Player 1 20:06:37 $ADD_RESOLVING_STACK_EFFECT:  
{"stackEffect":{"entityId":5,"creatorCardId":314,"numberRolled":5,"rollingPlayerCardId":314,"stackEffectType":2,"attackedMonsterCardId":307}} 

 Player 1 20:06:37 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":41,"_text":"Added 0 to original roll"}} 

 Player 1 20:06:37 $NEXT_STACK_ID:  

 Player 1 20:06:37 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 rolled 5 vs War<Monster>"} 

 Player 1 20:06:37 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 20:06:37 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War \n2:Player 1 rolled 5 vs War<Monster>"} 

 Player 1 20:06:37 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":6,"creatorCardId":314,"entityToDoDamageCardId":314,"entityToTakeDamageCardId":307,"isMonsterDoDamage":false,"isMonsterTakeDamage":true,"isPlayerDoDamage":false,"stackEffectType":3,"numberRolled":5}} 

 Player 1 20:06:37 $SET_STACK_ICON:  
{"iconIndex":0} 

 Player 1 20:06:37 $SHOW_STACK_EFFECT:  
{"effectId":6} 

 Player 2 20:06:37 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against War<Monster>"} 

 Player 2 20:06:37 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against War<Monster>"} 

 Player 2 20:06:37 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against War<Monster>"} 

 Player 2 20:06:37 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against War<Monster>"} 

 Player 1 20:06:40 $CLEAR_SE_VIS:  

 Player 1 20:06:40 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War \n2:Player 1 rolled 5 vs War<Monster>"} 

 Player 1 20:06:40 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":6,"creatorCardId":314,"entityToDoDamageCardId":314,"entityToTakeDamageCardId":307,"isMonsterDoDamage":false,"isMonsterTakeDamage":true,"isPlayerDoDamage":false,"stackEffectType":3,"numberRolled":5}} 

 Player 1 20:06:40 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War \n2:Player 1 rolled 5 vs War<Monster>"} 

 Player 1 20:06:40 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":5,"creatorCardId":314,"numberRolled":5,"rollingPlayerCardId":314,"stackEffectType":2,"attackedMonsterCardId":307}} 

 Player 1 20:06:40 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War \n2:Player 1 rolled 5 vs War<Monster>"} 

 Player 1 20:06:40 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War \n2:Player 1 rolled 5 vs War<Monster>"} 

 Player 1 20:06:40 $REPLACE_STACK:  
{"currentStack":[{"entityId":6,"creatorCardId":314,"entityToDoDamageCardId":314,"entityToTakeDamageCardId":307,"isMonsterDoDamage":false,"isMonsterTakeDamage":true,"isPlayerDoDamage":false,"stackEffectType":3,"numberRolled":5},{"entityId":5,"creatorCardId":314,"numberRolled":5,"rollingPlayerCardId":314,"stackEffectType":2,"attackedMonsterCardId":307}]} 

 Player 1 20:06:40 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"PLAYER_ROLL_DICE","args":[{"type":2,"number":5},{"type":2,"number":2},{"type":2,"number":3}],"result":null,"preventMethod":false,"methodScopeId":314,"scopeIsPlayer":true,"index":3,"originStackId":5},"isAfterActivation":true,"index":3} 

 Player 1 20:06:40 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War \n2:Player 1 rolled 5 vs War<Monster>"} 

 Player 1 20:06:40 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":5,"creatorCardId":314,"numberRolled":5,"rollingPlayerCardId":314,"stackEffectType":2,"attackedMonsterCardId":307}} 

 Player 1 20:06:40 $REMOVE_RESOLVING_STACK_EFFECT:  
{"stackEffectId":5} 

 Player 1 20:06:40 $SET_STACK_ICON:  
{"iconIndex":1} 

 Player 1 20:06:40 $SHOW_STACK_EFFECT:  
{"effectId":5} 

 Player 2 20:06:40 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against War<Monster>"} 

 Player 2 20:06:40 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against War<Monster>"} 

 Player 2 20:06:40 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against War<Monster>"} 

 Player 2 20:06:40 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against War<Monster>"} 

 Player 2 20:06:40 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against War<Monster>"} 

 Player 2 20:06:40 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against War<Monster>"} 

 Player 2 20:06:40 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against War<Monster>"} 

 Player 2 20:06:40 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against War<Monster>"} 

 Player 2 20:06:40 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War \n2:Player 1 is rolling against War<Monster>"} 

 Player 2 20:06:40 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War \n2:Player 1 is rolling against War<Monster>"} 

 Player 1 20:06:43 $REMOVE_SE_VIS_PREV:  
{"stackEffectId":5} 

 Player 1 20:06:43 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":42,"_text":"Remove After Resolve AttackRoll 5  "}} 

 Player 1 20:06:43 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War"} 

 Player 1 20:06:43 $REMOVE_FROM_STACK:  
{"stackEffect":{"entityId":5,"creatorCardId":314,"numberRolled":5,"rollingPlayerCardId":314,"stackEffectType":2,"attackedMonsterCardId":307}} 

 Player 1 20:06:43 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":43,"_text":"Response Remove After Resolve AttackRoll 5"},"childOfId":42} 

 Player 1 20:06:43 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":44,"_text":"Wait For Response From Player 1 "},"childOfId":42} 

 Player 1 20:06:43 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 20:06:43 $ACTION_MASSAGE_REMOVE:  
{"id":44} 

 Player 1 20:06:43 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":45,"_text":"Wait For Response From Player 2 "},"childOfId":42} 

 Player 1 20:06:43 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 20:06:43 $GET_REACTION:  
{"playerId":2,"activePlayerId":1} 

 Player 2 20:06:43 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War \n2:Player 1 is rolling against War<Monster>"} 

 Player 2 20:06:43 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War \n2:Player 1 is rolling against War<Monster>"} 

 Player 2 20:06:43 $HIDE_REACTIONS:  
{"playerId":2,"cardsIds":[316]} 

 Player 2 20:06:43 $RESPOND_TO:  
{"playerId":1,"stackEffectResponse":false} 

 Player 1 20:06:43 $ACTION_MASSAGE_REMOVE:  
{"id":45} 

 Player 1 20:06:43 $ACTION_MASSAGE_REMOVE:  
{"id":43} 

 Player 1 20:06:43 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":46,"_text":"Resolve CombatDamage 6 "}} 

 Player 1 20:06:43 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War"} 

 Player 1 20:06:43 $ADD_RESOLVING_STACK_EFFECT:  
{"stackEffect":{"entityId":6,"creatorCardId":314,"entityToDoDamageCardId":314,"entityToTakeDamageCardId":307,"isMonsterDoDamage":false,"isMonsterTakeDamage":true,"isPlayerDoDamage":false,"stackEffectType":3,"numberRolled":5}} 

 Player 1 20:06:43 $UPDATE_STACK_VIS:  
{"stackId":6,"text":"Cain will deal 1 combat damage to War"} 

 Player 1 20:06:43 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"MONSTER_GET_HIT","args":[{"type":2,"number":1},{"type":0,"number":314},{"type":2}],"result":null,"preventMethod":false,"methodScopeId":307,"scopeIsPlayer":false,"index":1,"originStackId":-1},"isAfterActivation":false,"index":1} 

 Player 1 20:06:43 $NEXT_STACK_ID:  

 Player 1 20:06:43 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War"} 

 Player 1 20:06:43 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War \n2:Activate War effect GainStats<GainStats>"} 

 Player 1 20:06:43 $ADD_TO_STACK:  
{"stackEffect":{"effectCollectedData":null,"entityId":7,"creatorCardId":314,"hasLockingStackEffect":false,"cardActivatorId":1,"cardWithEffectId":307,"effectToDo":{"effectName":"GainStats","cardEffectNum":0,"cardPlayerId":1,"cardId":307,"effctType":0},"isAfterActivation":false,"index":1,"hasDataBeenCollectedYet":false,"stackEffectType":14}} 

 Player 1 20:06:43 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War \n2:Activate War effect GainStats<GainStats>"} 

 Player 1 20:06:43 $ADD_SE_VIS_PREV:  
{"stackEffect":{"effectCollectedData":null,"entityId":7,"creatorCardId":314,"hasLockingStackEffect":false,"cardActivatorId":1,"cardWithEffectId":307,"effectToDo":{"effectName":"GainStats","cardEffectNum":0,"cardPlayerId":1,"cardId":307,"effctType":0},"isAfterActivation":false,"index":1,"hasDataBeenCollectedYet":false,"stackEffectType":14}} 

 Player 1 20:06:44 $SET_STACK_ICON:  
{"iconIndex":0} 

 Player 1 20:06:44 $SHOW_STACK_EFFECT:  
{"effectId":7} 

 Player 2 20:06:44 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War"} 

 Player 2 20:06:44 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War"} 

 Player 2 20:06:44 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War"} 

 Player 2 20:06:44 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War"} 

 Player 2 20:06:44 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War \n2:Activate War "} 

 Player 2 20:06:44 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War \n2:Activate War "} 

 Player 1 20:06:46 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":47,"_text":"Add ActivatePassiveEffect 7 "}} 

 Player 1 20:06:46 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War \n2:Activate War effect GainStats<GainStats>"} 

 Player 1 20:06:46 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War \n2:Activate War effect GainStats<GainStats>"} 

 Player 1 20:06:46 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"effectCollectedData":{"effectTargets":[307],"chainEffectsData":[],"methodArgs":[],"isPassive":true,"terminateOriginal":false,"effectCardOwner":307,"effectCardPlayer":307},"entityId":7,"creatorCardId":314,"hasLockingStackEffect":false,"cardActivatorId":1,"cardWithEffectId":307,"effectToDo":{"effectName":"GainStats","cardEffectNum":0,"cardPlayerId":1,"cardId":307,"effctType":0},"isAfterActivation":false,"index":1,"hasDataBeenCollectedYet":true,"stackEffectType":14}} 

 Player 1 20:06:46 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":48,"_text":"Response Adding ActivatePassiveEffect 7"},"childOfId":47} 

 Player 1 20:06:46 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":49,"_text":"Wait For Response From Player 2 "},"childOfId":47} 

 Player 1 20:06:46 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 20:06:46 $GET_REACTION:  
{"playerId":2,"activePlayerId":1} 

 Player 2 20:06:46 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War \n2:Activate War "} 

 Player 2 20:06:46 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War \n2:Activate War "} 

 Player 2 20:06:46 $HIDE_REACTIONS:  
{"playerId":2,"cardsIds":[316]} 

 Player 2 20:06:46 $RESPOND_TO:  
{"playerId":1,"stackEffectResponse":false} 

 Player 1 20:06:47 $ACTION_MASSAGE_REMOVE:  
{"id":49} 

 Player 1 20:06:47 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":50,"_text":"Wait For Response From Player 1 "},"childOfId":47} 

 Player 1 20:06:47 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 20:06:47 $ACTION_MASSAGE_REMOVE:  
{"id":50} 

 Player 1 20:06:47 $ACTION_MASSAGE_REMOVE:  
{"id":48} 

 Player 1 20:06:47 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":51,"_text":"Resolve ActivatePassiveEffect 7 "}} 

 Player 1 20:06:47 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War \n2:Activate War effect GainStats<GainStats>"} 

 Player 1 20:06:47 $ADD_RESOLVING_STACK_EFFECT:  
{"stackEffect":{"effectCollectedData":{"effectTargets":[307],"chainEffectsData":[],"methodArgs":[],"isPassive":true,"terminateOriginal":false,"effectCardOwner":307,"effectCardPlayer":307},"entityId":7,"creatorCardId":314,"hasLockingStackEffect":false,"cardActivatorId":1,"cardWithEffectId":307,"effectToDo":{"effectName":"GainStats","cardEffectNum":0,"cardPlayerId":1,"cardId":307,"effctType":0},"isAfterActivation":false,"index":1,"hasDataBeenCollectedYet":true,"stackEffectType":14}} 

 Player 1 20:06:47 $ACTIVATE_PARTICLE_EFFECT:  
{"cardId":307,"particleType":6} 

 Player 2 20:06:47 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War \n2:Activate War "} 

 Player 2 20:06:47 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War \n2:Activate War "} 

 Player 1 20:06:49 $DISABLE_PARTICLE_EFFECT:  
{"cardId":307,"particleType":6} 

 Player 1 20:06:49 $MONSTER_GAIN_DMG:  
{"cardId":307,"DMGToGain":1} 

 Player 1 20:06:49 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"MONSTER_GET_HIT","args":[{"type":2,"number":1},{"type":0,"number":314},{"type":2}],"result":null,"preventMethod":false,"methodScopeId":307,"scopeIsPlayer":false,"index":1,"originStackId":-1},"isAfterActivation":false,"index":1} 

 Player 1 20:06:49 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War \n2:Activate War effect GainStats<GainStats>"} 

 Player 1 20:06:49 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"effectCollectedData":{"effectTargets":[307],"chainEffectsData":[],"methodArgs":[],"isPassive":true,"terminateOriginal":false,"effectCardOwner":307,"effectCardPlayer":307},"entityId":7,"creatorCardId":314,"hasLockingStackEffect":false,"cardActivatorId":1,"cardWithEffectId":307,"isAfterActivation":false,"index":1,"hasDataBeenCollectedYet":true,"stackEffectType":14}} 

 Player 1 20:06:49 $REMOVE_RESOLVING_STACK_EFFECT:  
{"stackEffectId":7} 

 Player 1 20:06:49 $SET_STACK_ICON:  
{"iconIndex":1} 

 Player 1 20:06:49 $SHOW_STACK_EFFECT:  
{"effectId":7} 

 Player 2 20:06:49 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War \n2:Activate War "} 

 Player 2 20:06:49 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War \n2:Activate War "} 

 Player 1 20:06:52 $REMOVE_SE_VIS_PREV:  
{"stackEffectId":7} 

 Player 1 20:06:52 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":52,"_text":"Remove After Resolve ActivatePassiveEffect 7  "}} 

 Player 1 20:06:52 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War"} 

 Player 1 20:06:52 $REMOVE_FROM_STACK:  
{"stackEffect":{"effectCollectedData":{"effectTargets":[307],"chainEffectsData":[],"methodArgs":[],"isPassive":true,"terminateOriginal":false,"effectCardOwner":307,"effectCardPlayer":307},"entityId":7,"creatorCardId":314,"hasLockingStackEffect":false,"cardActivatorId":1,"cardWithEffectId":307,"isAfterActivation":false,"index":1,"hasDataBeenCollectedYet":true,"stackEffectType":14}} 

 Player 1 20:06:52 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":53,"_text":"Response Remove After Resolve ActivatePassiveEffect 7"},"childOfId":52} 

 Player 1 20:06:52 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":54,"_text":"Wait For Response From Player 1 "},"childOfId":52} 

 Player 1 20:06:52 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 20:06:52 $ACTION_MASSAGE_REMOVE:  
{"id":54} 

 Player 1 20:06:52 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":55,"_text":"Wait For Response From Player 2 "},"childOfId":52} 

 Player 1 20:06:52 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 20:06:52 $GET_REACTION:  
{"playerId":2,"activePlayerId":1} 

 Player 2 20:06:52 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War \n2:Activate War "} 

 Player 2 20:06:52 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War \n2:Activate War "} 

 Player 2 20:06:52 $HIDE_REACTIONS:  
{"playerId":2,"cardsIds":[316]} 

 Player 2 20:06:52 $RESPOND_TO:  
{"playerId":1,"stackEffectResponse":false} 

 Player 1 20:06:52 $ACTION_MASSAGE_REMOVE:  
{"id":55} 

 Player 1 20:06:52 $ACTION_MASSAGE_REMOVE:  
{"id":53} 

 Player 1 20:06:52 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":56,"_text":"Resolve CombatDamage 6 "}} 

 Player 1 20:06:52 $MONSTER_GET_DAMAGED:  
{"cardId":307,"hpLeft":2,"damageDealerId":314} 

 Player 1 20:06:52 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"MONSTER_GET_HIT","args":[{"type":2,"number":1},{"type":0,"number":314},{"type":2}],"result":null,"preventMethod":false,"methodScopeId":307,"scopeIsPlayer":false,"index":1,"originStackId":-1},"isAfterActivation":true,"index":1} 

 Player 1 20:06:52 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"PLAYER_COMBAT_DAMAGE_GIVEN","args":[{"type":2,"number":1},{"type":2,"number":5},{"type":0,"number":314},{"type":0,"number":307}],"result":null,"preventMethod":false,"methodScopeId":314,"scopeIsPlayer":true,"index":4,"originStackId":6},"isAfterActivation":true,"index":4} 

 Player 1 20:06:52 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War"} 

 Player 1 20:06:52 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":6,"creatorCardId":314,"entityToDoDamageCardId":314,"entityToTakeDamageCardId":307,"isMonsterDoDamage":false,"isMonsterTakeDamage":true,"isPlayerDoDamage":false,"stackEffectType":3,"numberRolled":5}} 

 Player 1 20:06:52 $REMOVE_RESOLVING_STACK_EFFECT:  
{"stackEffectId":6} 

 Player 1 20:06:52 $SET_STACK_ICON:  
{"iconIndex":1} 

 Player 1 20:06:52 $SHOW_STACK_EFFECT:  
{"effectId":6} 

 Player 2 20:06:53 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War"} 

 Player 2 20:06:53 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War"} 

 Player 1 20:06:55 $REMOVE_SE_VIS_PREV:  
{"stackEffectId":6} 

 Player 1 20:06:55 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":57,"_text":"Remove After Resolve CombatDamage 6  "}} 

 Player 1 20:06:55 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 20:06:55 $REMOVE_FROM_STACK:  
{"stackEffect":{"entityId":6,"creatorCardId":314,"entityToDoDamageCardId":314,"entityToTakeDamageCardId":307,"isMonsterDoDamage":false,"isMonsterTakeDamage":true,"isPlayerDoDamage":false,"stackEffectType":3,"numberRolled":5}} 

 Player 1 20:06:55 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":58,"_text":"Response Remove After Resolve CombatDamage 6"},"childOfId":57} 

 Player 1 20:06:55 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":59,"_text":"Wait For Response From Player 2 "},"childOfId":57} 

 Player 1 20:06:55 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 20:06:55 $GET_REACTION:  
{"playerId":2,"activePlayerId":1} 

 Player 2 20:06:55 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War"} 

 Player 2 20:06:55 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War"} 

 Player 2 20:06:55 $HIDE_REACTIONS:  
{"playerId":2,"cardsIds":[316]} 

 Player 2 20:06:55 $RESPOND_TO:  
{"playerId":1,"stackEffectResponse":false} 

 Player 1 20:06:56 $ACTION_MASSAGE_REMOVE:  
{"id":59} 

 Player 1 20:06:56 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":60,"_text":"Wait For Response From Player 1 "},"childOfId":57} 

 Player 1 20:06:56 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 20:06:56 $ACTION_MASSAGE_REMOVE:  
{"id":60} 

 Player 1 20:06:56 $ACTION_MASSAGE_REMOVE:  
{"id":58} 

 Player 1 20:06:56 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":61,"_text":"Stack Was Emptied "}} 

 Player 1 20:06:56 $CLEAR_SE_VIS:  

 Player 1 20:06:56 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 20:07:17 $NEXT_STACK_ID:  

 Player 1 20:07:17 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 20:07:17 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against War<Monster>"} 

 Player 1 20:07:17 $ADD_TO_STACK:  
{"stackEffect":{"entityId":8,"creatorCardId":314,"rollingPlayerCardId":314,"stackEffectType":2,"attackedMonsterCardId":307}} 

 Player 1 20:07:17 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against War<Monster>"} 

 Player 1 20:07:17 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":8,"creatorCardId":314,"rollingPlayerCardId":314,"stackEffectType":2,"attackedMonsterCardId":307}} 

 Player 1 20:07:17 $SET_STACK_ICON:  
{"iconIndex":0} 

 Player 1 20:07:17 $SHOW_STACK_EFFECT:  
{"effectId":8} 

 Player 2 20:07:17 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 20:07:17 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 20:07:17 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against War<Monster>"} 

 Player 2 20:07:17 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against War<Monster>"} 

 Player 1 20:07:20 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":62,"_text":"Add AttackRoll 8 "}} 

 Player 1 20:07:20 $ROLL_DICE:  
{"playerId":1} 

 Player 1 20:07:21 $ROLL_DICE_ENDED:  
{"playerId":1,"numberRolled":6} 

 Player 1 20:07:21 $UPDATE_STACK_VIS:  
{"stackId":8,"text":"player rolled 6 vs War<Monster>"} 

 Player 1 20:07:21 $SHOW_DICE_ROLL:  
{"stackId":8} 

 Player 1 20:07:24 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 rolled 6 vs War<Monster>"} 

 Player 1 20:07:24 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 20:07:24 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 rolled 6 vs War<Monster>"} 

 Player 1 20:07:24 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":8,"creatorCardId":314,"numberRolled":6,"rollingPlayerCardId":314,"stackEffectType":2,"attackedMonsterCardId":307}} 

 Player 1 20:07:24 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":63,"_text":"Response Adding AttackRoll 8"},"childOfId":62} 

 Player 1 20:07:24 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":64,"_text":"Wait For Response From Player 1 "},"childOfId":62} 

 Player 1 20:07:24 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 20:07:25 $ACTION_MASSAGE_REMOVE:  
{"id":64} 

 Player 1 20:07:25 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":65,"_text":"Wait For Response From Player 2 "},"childOfId":62} 

 Player 1 20:07:25 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 20:07:25 $GET_REACTION:  
{"playerId":2,"activePlayerId":1} 

 Player 2 20:07:25 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against War<Monster>"} 

 Player 2 20:07:25 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against War<Monster>"} 

 Player 2 20:07:25 $HIDE_REACTIONS:  
{"playerId":2,"cardsIds":[316]} 

 Player 2 20:07:25 $RESPOND_TO:  
{"playerId":1,"stackEffectResponse":false} 

 Player 1 20:07:25 $ACTION_MASSAGE_REMOVE:  
{"id":65} 

 Player 1 20:07:25 $ACTION_MASSAGE_REMOVE:  
{"id":63} 

 Player 1 20:07:25 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":66,"_text":"Resolve AttackRoll 8 "}} 

 Player 1 20:07:25 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 rolled 6 vs War<Monster>"} 

 Player 1 20:07:25 $ADD_RESOLVING_STACK_EFFECT:  
{"stackEffect":{"entityId":8,"creatorCardId":314,"numberRolled":6,"rollingPlayerCardId":314,"stackEffectType":2,"attackedMonsterCardId":307}} 

 Player 1 20:07:25 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":67,"_text":"Added 0 to original roll"}} 

 Player 1 20:07:25 $NEXT_STACK_ID:  

 Player 1 20:07:25 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 rolled 6 vs War<Monster>"} 

 Player 1 20:07:25 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 20:07:25 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War \n2:Player 1 rolled 6 vs War<Monster>"} 

 Player 1 20:07:25 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":9,"creatorCardId":314,"entityToDoDamageCardId":314,"entityToTakeDamageCardId":307,"isMonsterDoDamage":false,"isMonsterTakeDamage":true,"isPlayerDoDamage":false,"stackEffectType":3,"numberRolled":6}} 

 Player 1 20:07:25 $SET_STACK_ICON:  
{"iconIndex":0} 

 Player 1 20:07:25 $SHOW_STACK_EFFECT:  
{"effectId":9} 

 Player 2 20:07:25 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against War<Monster>"} 

 Player 2 20:07:25 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against War<Monster>"} 

 Player 2 20:07:25 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against War<Monster>"} 

 Player 2 20:07:25 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against War<Monster>"} 

 Player 1 20:07:28 $CLEAR_SE_VIS:  

 Player 1 20:07:28 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War \n2:Player 1 rolled 6 vs War<Monster>"} 

 Player 1 20:07:28 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":9,"creatorCardId":314,"entityToDoDamageCardId":314,"entityToTakeDamageCardId":307,"isMonsterDoDamage":false,"isMonsterTakeDamage":true,"isPlayerDoDamage":false,"stackEffectType":3,"numberRolled":6}} 

 Player 1 20:07:28 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War \n2:Player 1 rolled 6 vs War<Monster>"} 

 Player 1 20:07:28 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":8,"creatorCardId":314,"numberRolled":6,"rollingPlayerCardId":314,"stackEffectType":2,"attackedMonsterCardId":307}} 

 Player 1 20:07:28 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War \n2:Player 1 rolled 6 vs War<Monster>"} 

 Player 1 20:07:28 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War \n2:Player 1 rolled 6 vs War<Monster>"} 

 Player 1 20:07:28 $REPLACE_STACK:  
{"currentStack":[{"entityId":9,"creatorCardId":314,"entityToDoDamageCardId":314,"entityToTakeDamageCardId":307,"isMonsterDoDamage":false,"isMonsterTakeDamage":true,"isPlayerDoDamage":false,"stackEffectType":3,"numberRolled":6},{"entityId":8,"creatorCardId":314,"numberRolled":6,"rollingPlayerCardId":314,"stackEffectType":2,"attackedMonsterCardId":307}]} 

 Player 1 20:07:28 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"PLAYER_ROLL_DICE","args":[{"type":2,"number":6},{"type":2,"number":1},{"type":2,"number":3}],"result":null,"preventMethod":false,"methodScopeId":314,"scopeIsPlayer":true,"index":5,"originStackId":8},"isAfterActivation":true,"index":5} 

 Player 1 20:07:28 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War \n2:Player 1 rolled 6 vs War<Monster>"} 

 Player 1 20:07:28 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":8,"creatorCardId":314,"numberRolled":6,"rollingPlayerCardId":314,"stackEffectType":2,"attackedMonsterCardId":307}} 

 Player 1 20:07:28 $REMOVE_RESOLVING_STACK_EFFECT:  
{"stackEffectId":8} 

 Player 1 20:07:28 $SET_STACK_ICON:  
{"iconIndex":1} 

 Player 1 20:07:28 $SHOW_STACK_EFFECT:  
{"effectId":8} 

 Player 2 20:07:28 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against War<Monster>"} 

 Player 2 20:07:28 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against War<Monster>"} 

 Player 2 20:07:28 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against War<Monster>"} 

 Player 2 20:07:28 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against War<Monster>"} 

 Player 2 20:07:28 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against War<Monster>"} 

 Player 2 20:07:29 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against War<Monster>"} 

 Player 2 20:07:29 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against War<Monster>"} 

 Player 2 20:07:29 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against War<Monster>"} 

 Player 2 20:07:29 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War \n2:Player 1 is rolling against War<Monster>"} 

 Player 2 20:07:29 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War \n2:Player 1 is rolling against War<Monster>"} 

 Player 1 20:07:31 $REMOVE_SE_VIS_PREV:  
{"stackEffectId":8} 

 Player 1 20:07:31 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":68,"_text":"Remove After Resolve AttackRoll 8  "}} 

 Player 1 20:07:31 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War"} 

 Player 1 20:07:31 $REMOVE_FROM_STACK:  
{"stackEffect":{"entityId":8,"creatorCardId":314,"numberRolled":6,"rollingPlayerCardId":314,"stackEffectType":2,"attackedMonsterCardId":307}} 

 Player 1 20:07:31 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":69,"_text":"Response Remove After Resolve AttackRoll 8"},"childOfId":68} 

 Player 1 20:07:31 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":70,"_text":"Wait For Response From Player 1 "},"childOfId":68} 

 Player 1 20:07:31 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 20:07:31 $ACTION_MASSAGE_REMOVE:  
{"id":70} 

 Player 1 20:07:31 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":71,"_text":"Wait For Response From Player 2 "},"childOfId":68} 

 Player 1 20:07:31 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 20:07:31 $GET_REACTION:  
{"playerId":2,"activePlayerId":1} 

 Player 2 20:07:31 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War \n2:Player 1 is rolling against War<Monster>"} 

 Player 2 20:07:31 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War \n2:Player 1 is rolling against War<Monster>"} 

 Player 2 20:07:31 $HIDE_REACTIONS:  
{"playerId":2,"cardsIds":[316]} 

 Player 2 20:07:31 $RESPOND_TO:  
{"playerId":1,"stackEffectResponse":false} 

 Player 1 20:07:31 $ACTION_MASSAGE_REMOVE:  
{"id":71} 

 Player 1 20:07:31 $ACTION_MASSAGE_REMOVE:  
{"id":69} 

 Player 1 20:07:32 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":72,"_text":"Resolve CombatDamage 9 "}} 

 Player 1 20:07:32 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War"} 

 Player 1 20:07:32 $ADD_RESOLVING_STACK_EFFECT:  
{"stackEffect":{"entityId":9,"creatorCardId":314,"entityToDoDamageCardId":314,"entityToTakeDamageCardId":307,"isMonsterDoDamage":false,"isMonsterTakeDamage":true,"isPlayerDoDamage":false,"stackEffectType":3,"numberRolled":6}} 

 Player 1 20:07:32 $UPDATE_STACK_VIS:  
{"stackId":9,"text":"Cain will deal 1 combat damage to War"} 

 Player 1 20:07:32 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"MONSTER_GET_HIT","args":[{"type":2,"number":1},{"type":0,"number":314},{"type":2}],"result":null,"preventMethod":false,"methodScopeId":307,"scopeIsPlayer":false,"index":2,"originStackId":-1},"isAfterActivation":false,"index":2} 

 Player 1 20:07:32 $NEXT_STACK_ID:  

 Player 1 20:07:32 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War"} 

 Player 1 20:07:32 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War \n2:Activate War effect GainStats<GainStats>"} 

 Player 1 20:07:32 $ADD_TO_STACK:  
{"stackEffect":{"effectCollectedData":null,"entityId":10,"creatorCardId":314,"hasLockingStackEffect":false,"cardActivatorId":1,"cardWithEffectId":307,"effectToDo":{"effectName":"GainStats","cardEffectNum":0,"cardPlayerId":1,"cardId":307,"effctType":0},"isAfterActivation":false,"index":2,"hasDataBeenCollectedYet":false,"stackEffectType":14}} 

 Player 1 20:07:32 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War \n2:Activate War effect GainStats<GainStats>"} 

 Player 1 20:07:32 $ADD_SE_VIS_PREV:  
{"stackEffect":{"effectCollectedData":null,"entityId":10,"creatorCardId":314,"hasLockingStackEffect":false,"cardActivatorId":1,"cardWithEffectId":307,"effectToDo":{"effectName":"GainStats","cardEffectNum":0,"cardPlayerId":1,"cardId":307,"effctType":0},"isAfterActivation":false,"index":2,"hasDataBeenCollectedYet":false,"stackEffectType":14}} 

 Player 1 20:07:32 $SET_STACK_ICON:  
{"iconIndex":0} 

 Player 1 20:07:32 $SHOW_STACK_EFFECT:  
{"effectId":10} 

 Player 2 20:07:32 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War"} 

 Player 2 20:07:32 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War"} 

 Player 2 20:07:32 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War"} 

 Player 2 20:07:32 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War"} 

 Player 2 20:07:32 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War \n2:Activate War "} 

 Player 2 20:07:32 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War \n2:Activate War "} 

 Player 1 20:07:34 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":73,"_text":"Add ActivatePassiveEffect 10 "}} 

 Player 1 20:07:34 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War \n2:Activate War effect GainStats<GainStats>"} 

 Player 1 20:07:35 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War \n2:Activate War effect GainStats<GainStats>"} 

 Player 1 20:07:35 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"effectCollectedData":{"effectTargets":[307],"chainEffectsData":[],"methodArgs":[],"isPassive":true,"terminateOriginal":false,"effectCardOwner":307,"effectCardPlayer":307},"entityId":10,"creatorCardId":314,"hasLockingStackEffect":false,"cardActivatorId":1,"cardWithEffectId":307,"effectToDo":{"effectName":"GainStats","cardEffectNum":0,"cardPlayerId":1,"cardId":307,"effctType":0},"isAfterActivation":false,"index":2,"hasDataBeenCollectedYet":true,"stackEffectType":14}} 

 Player 1 20:07:35 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":74,"_text":"Response Adding ActivatePassiveEffect 10"},"childOfId":73} 

 Player 1 20:07:35 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":75,"_text":"Wait For Response From Player 2 "},"childOfId":73} 

 Player 1 20:07:35 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 20:07:35 $GET_REACTION:  
{"playerId":2,"activePlayerId":1} 

 Player 2 20:07:35 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War \n2:Activate War "} 

 Player 2 20:07:35 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War \n2:Activate War "} 

 Player 2 20:07:35 $HIDE_REACTIONS:  
{"playerId":2,"cardsIds":[316]} 

 Player 2 20:07:35 $RESPOND_TO:  
{"playerId":1,"stackEffectResponse":false} 

 Player 1 20:07:35 $ACTION_MASSAGE_REMOVE:  
{"id":75} 

 Player 1 20:07:35 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":76,"_text":"Wait For Response From Player 1 "},"childOfId":73} 

 Player 1 20:07:35 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 20:07:35 $ACTION_MASSAGE_REMOVE:  
{"id":76} 

 Player 1 20:07:35 $ACTION_MASSAGE_REMOVE:  
{"id":74} 

 Player 1 20:07:35 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":77,"_text":"Resolve ActivatePassiveEffect 10 "}} 

 Player 1 20:07:35 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War \n2:Activate War effect GainStats<GainStats>"} 

 Player 1 20:07:35 $ADD_RESOLVING_STACK_EFFECT:  
{"stackEffect":{"effectCollectedData":{"effectTargets":[307],"chainEffectsData":[],"methodArgs":[],"isPassive":true,"terminateOriginal":false,"effectCardOwner":307,"effectCardPlayer":307},"entityId":10,"creatorCardId":314,"hasLockingStackEffect":false,"cardActivatorId":1,"cardWithEffectId":307,"effectToDo":{"effectName":"GainStats","cardEffectNum":0,"cardPlayerId":1,"cardId":307,"effctType":0},"isAfterActivation":false,"index":2,"hasDataBeenCollectedYet":true,"stackEffectType":14}} 

 Player 1 20:07:35 $ACTIVATE_PARTICLE_EFFECT:  
{"cardId":307,"particleType":6} 

 Player 2 20:07:35 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War \n2:Activate War "} 

 Player 2 20:07:35 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War \n2:Activate War "} 

 Player 1 20:07:37 $DISABLE_PARTICLE_EFFECT:  
{"cardId":307,"particleType":6} 

 Player 1 20:07:37 $MONSTER_GAIN_DMG:  
{"cardId":307,"DMGToGain":1} 

 Player 1 20:07:37 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"MONSTER_GET_HIT","args":[{"type":2,"number":1},{"type":0,"number":314},{"type":2}],"result":null,"preventMethod":false,"methodScopeId":307,"scopeIsPlayer":false,"index":2,"originStackId":-1},"isAfterActivation":false,"index":2} 

 Player 1 20:07:37 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War \n2:Activate War effect GainStats<GainStats>"} 

 Player 1 20:07:37 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"effectCollectedData":{"effectTargets":[307],"chainEffectsData":[],"methodArgs":[],"isPassive":true,"terminateOriginal":false,"effectCardOwner":307,"effectCardPlayer":307},"entityId":10,"creatorCardId":314,"hasLockingStackEffect":false,"cardActivatorId":1,"cardWithEffectId":307,"isAfterActivation":false,"index":2,"hasDataBeenCollectedYet":true,"stackEffectType":14}} 

 Player 1 20:07:37 $REMOVE_RESOLVING_STACK_EFFECT:  
{"stackEffectId":10} 

 Player 1 20:07:37 $SET_STACK_ICON:  
{"iconIndex":1} 

 Player 1 20:07:37 $SHOW_STACK_EFFECT:  
{"effectId":10} 

 Player 2 20:07:37 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War \n2:Activate War "} 

 Player 2 20:07:37 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War \n2:Activate War "} 

 Player 1 20:07:40 $REMOVE_SE_VIS_PREV:  
{"stackEffectId":10} 

 Player 1 20:07:40 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":78,"_text":"Remove After Resolve ActivatePassiveEffect 10  "}} 

 Player 1 20:07:40 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War"} 

 Player 1 20:07:40 $REMOVE_FROM_STACK:  
{"stackEffect":{"effectCollectedData":{"effectTargets":[307],"chainEffectsData":[],"methodArgs":[],"isPassive":true,"terminateOriginal":false,"effectCardOwner":307,"effectCardPlayer":307},"entityId":10,"creatorCardId":314,"hasLockingStackEffect":false,"cardActivatorId":1,"cardWithEffectId":307,"isAfterActivation":false,"index":2,"hasDataBeenCollectedYet":true,"stackEffectType":14}} 

 Player 1 20:07:40 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":79,"_text":"Response Remove After Resolve ActivatePassiveEffect 10"},"childOfId":78} 

 Player 1 20:07:40 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":80,"_text":"Wait For Response From Player 1 "},"childOfId":78} 

 Player 1 20:07:40 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 20:07:40 $ACTION_MASSAGE_REMOVE:  
{"id":80} 

 Player 1 20:07:40 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":81,"_text":"Wait For Response From Player 2 "},"childOfId":78} 

 Player 1 20:07:40 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 20:07:40 $GET_REACTION:  
{"playerId":2,"activePlayerId":1} 

 Player 2 20:07:40 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War \n2:Activate War "} 

 Player 2 20:07:40 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War \n2:Activate War "} 

 Player 2 20:07:40 $HIDE_REACTIONS:  
{"playerId":2,"cardsIds":[316]} 

 Player 2 20:07:40 $RESPOND_TO:  
{"playerId":1,"stackEffectResponse":false} 

 Player 1 20:07:41 $ACTION_MASSAGE_REMOVE:  
{"id":81} 

 Player 1 20:07:41 $ACTION_MASSAGE_REMOVE:  
{"id":79} 

 Player 1 20:07:41 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":82,"_text":"Resolve CombatDamage 9 "}} 

 Player 1 20:07:41 $MONSTER_GET_DAMAGED:  
{"cardId":307,"hpLeft":1,"damageDealerId":314} 

 Player 1 20:07:41 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"MONSTER_GET_HIT","args":[{"type":2,"number":1},{"type":0,"number":314},{"type":2}],"result":null,"preventMethod":false,"methodScopeId":307,"scopeIsPlayer":false,"index":2,"originStackId":-1},"isAfterActivation":true,"index":2} 

 Player 1 20:07:41 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"PLAYER_COMBAT_DAMAGE_GIVEN","args":[{"type":2,"number":1},{"type":2,"number":6},{"type":0,"number":314},{"type":0,"number":307}],"result":null,"preventMethod":false,"methodScopeId":314,"scopeIsPlayer":true,"index":6,"originStackId":9},"isAfterActivation":true,"index":6} 

 Player 1 20:07:41 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War"} 

 Player 1 20:07:41 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":9,"creatorCardId":314,"entityToDoDamageCardId":314,"entityToTakeDamageCardId":307,"isMonsterDoDamage":false,"isMonsterTakeDamage":true,"isPlayerDoDamage":false,"stackEffectType":3,"numberRolled":6}} 

 Player 1 20:07:41 $REMOVE_RESOLVING_STACK_EFFECT:  
{"stackEffectId":9} 

 Player 1 20:07:41 $SET_STACK_ICON:  
{"iconIndex":1} 

 Player 1 20:07:41 $SHOW_STACK_EFFECT:  
{"effectId":9} 

 Player 2 20:07:41 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War"} 

 Player 2 20:07:41 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War"} 

 Player 1 20:07:44 $REMOVE_SE_VIS_PREV:  
{"stackEffectId":9} 

 Player 1 20:07:44 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":83,"_text":"Remove After Resolve CombatDamage 9  "}} 

 Player 1 20:07:44 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 20:07:44 $REMOVE_FROM_STACK:  
{"stackEffect":{"entityId":9,"creatorCardId":314,"entityToDoDamageCardId":314,"entityToTakeDamageCardId":307,"isMonsterDoDamage":false,"isMonsterTakeDamage":true,"isPlayerDoDamage":false,"stackEffectType":3,"numberRolled":6}} 

 Player 1 20:07:44 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":84,"_text":"Response Remove After Resolve CombatDamage 9"},"childOfId":83} 

 Player 1 20:07:44 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":85,"_text":"Wait For Response From Player 2 "},"childOfId":83} 

 Player 1 20:07:44 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 20:07:44 $GET_REACTION:  
{"playerId":2,"activePlayerId":1} 

 Player 2 20:07:44 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War"} 

 Player 2 20:07:44 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War"} 

 Player 2 20:07:44 $HIDE_REACTIONS:  
{"playerId":2,"cardsIds":[316]} 

 Player 2 20:07:44 $RESPOND_TO:  
{"playerId":1,"stackEffectResponse":false} 

 Player 1 20:07:44 $ACTION_MASSAGE_REMOVE:  
{"id":85} 

 Player 1 20:07:44 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":86,"_text":"Wait For Response From Player 1 "},"childOfId":83} 

 Player 1 20:07:44 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 20:07:44 $ACTION_MASSAGE_REMOVE:  
{"id":86} 

 Player 1 20:07:44 $ACTION_MASSAGE_REMOVE:  
{"id":84} 

 Player 1 20:07:44 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":87,"_text":"Stack Was Emptied "}} 

 Player 1 20:07:44 $CLEAR_SE_VIS:  

 Player 1 20:07:44 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 20:07:47 $NEXT_STACK_ID:  

 Player 1 20:07:47 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 20:07:47 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against War<Monster>"} 

 Player 1 20:07:47 $ADD_TO_STACK:  
{"stackEffect":{"entityId":11,"creatorCardId":314,"rollingPlayerCardId":314,"stackEffectType":2,"attackedMonsterCardId":307}} 

 Player 1 20:07:47 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against War<Monster>"} 

 Player 1 20:07:47 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":11,"creatorCardId":314,"rollingPlayerCardId":314,"stackEffectType":2,"attackedMonsterCardId":307}} 

 Player 1 20:07:48 $SET_STACK_ICON:  
{"iconIndex":0} 

 Player 1 20:07:48 $SHOW_STACK_EFFECT:  
{"effectId":11} 

 Player 2 20:07:48 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 20:07:48 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 20:07:48 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against War<Monster>"} 

 Player 2 20:07:48 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against War<Monster>"} 

 Player 1 20:07:50 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":88,"_text":"Add AttackRoll 11 "}} 

 Player 1 20:07:50 $ROLL_DICE:  
{"playerId":1} 

 Player 1 20:07:52 $ROLL_DICE_ENDED:  
{"playerId":1,"numberRolled":4} 

 Player 1 20:07:52 $UPDATE_STACK_VIS:  
{"stackId":11,"text":"player rolled 4 vs War<Monster>"} 

 Player 1 20:07:53 $SHOW_DICE_ROLL:  
{"stackId":11} 

 Player 1 20:07:55 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 rolled 4 vs War<Monster>"} 

 Player 1 20:07:56 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 20:07:56 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 rolled 4 vs War<Monster>"} 

 Player 1 20:07:56 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":11,"creatorCardId":314,"numberRolled":4,"rollingPlayerCardId":314,"stackEffectType":2,"attackedMonsterCardId":307}} 

 Player 1 20:07:56 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":89,"_text":"Response Adding AttackRoll 11"},"childOfId":88} 

 Player 1 20:07:56 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":90,"_text":"Wait For Response From Player 1 "},"childOfId":88} 

 Player 1 20:07:56 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 20:07:56 $ACTION_MASSAGE_REMOVE:  
{"id":90} 

 Player 1 20:07:56 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":91,"_text":"Wait For Response From Player 2 "},"childOfId":88} 

 Player 1 20:07:56 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 20:07:56 $GET_REACTION:  
{"playerId":2,"activePlayerId":1} 

 Player 2 20:07:56 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against War<Monster>"} 

 Player 2 20:07:56 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against War<Monster>"} 

 Player 2 20:07:56 $HIDE_REACTIONS:  
{"playerId":2,"cardsIds":[316]} 

 Player 2 20:07:56 $RESPOND_TO:  
{"playerId":1,"stackEffectResponse":false} 

 Player 1 20:07:56 $ACTION_MASSAGE_REMOVE:  
{"id":91} 

 Player 1 20:07:56 $ACTION_MASSAGE_REMOVE:  
{"id":89} 

 Player 1 20:07:56 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":92,"_text":"Resolve AttackRoll 11 "}} 

 Player 1 20:07:56 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 rolled 4 vs War<Monster>"} 

 Player 1 20:07:56 $ADD_RESOLVING_STACK_EFFECT:  
{"stackEffect":{"entityId":11,"creatorCardId":314,"numberRolled":4,"rollingPlayerCardId":314,"stackEffectType":2,"attackedMonsterCardId":307}} 

 Player 1 20:07:56 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":93,"_text":"Added 0 to original roll"}} 

 Player 1 20:07:56 $NEXT_STACK_ID:  

 Player 1 20:07:56 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 rolled 4 vs War<Monster>"} 

 Player 1 20:07:56 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 20:07:56 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War \n2:Player 1 rolled 4 vs War<Monster>"} 

 Player 1 20:07:56 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":12,"creatorCardId":314,"entityToDoDamageCardId":314,"entityToTakeDamageCardId":307,"isMonsterDoDamage":false,"isMonsterTakeDamage":true,"isPlayerDoDamage":false,"stackEffectType":3,"numberRolled":4}} 

 Player 1 20:07:56 $SET_STACK_ICON:  
{"iconIndex":0} 

 Player 1 20:07:56 $SHOW_STACK_EFFECT:  
{"effectId":12} 

 Player 2 20:07:56 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against War<Monster>"} 

 Player 2 20:07:57 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against War<Monster>"} 

 Player 2 20:07:57 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against War<Monster>"} 

 Player 2 20:07:57 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against War<Monster>"} 

 Player 1 20:07:59 $CLEAR_SE_VIS:  

 Player 1 20:07:59 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War \n2:Player 1 rolled 4 vs War<Monster>"} 

 Player 1 20:07:59 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":12,"creatorCardId":314,"entityToDoDamageCardId":314,"entityToTakeDamageCardId":307,"isMonsterDoDamage":false,"isMonsterTakeDamage":true,"isPlayerDoDamage":false,"stackEffectType":3,"numberRolled":4}} 

 Player 1 20:07:59 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War \n2:Player 1 rolled 4 vs War<Monster>"} 

 Player 1 20:07:59 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":11,"creatorCardId":314,"numberRolled":4,"rollingPlayerCardId":314,"stackEffectType":2,"attackedMonsterCardId":307}} 

 Player 1 20:07:59 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War \n2:Player 1 rolled 4 vs War<Monster>"} 

 Player 1 20:07:59 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War \n2:Player 1 rolled 4 vs War<Monster>"} 

 Player 1 20:07:59 $REPLACE_STACK:  
{"currentStack":[{"entityId":12,"creatorCardId":314,"entityToDoDamageCardId":314,"entityToTakeDamageCardId":307,"isMonsterDoDamage":false,"isMonsterTakeDamage":true,"isPlayerDoDamage":false,"stackEffectType":3,"numberRolled":4},{"entityId":11,"creatorCardId":314,"numberRolled":4,"rollingPlayerCardId":314,"stackEffectType":2,"attackedMonsterCardId":307}]} 

 Player 1 20:07:59 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"PLAYER_ROLL_DICE","args":[{"type":2,"number":4},{"type":2,"number":1},{"type":2,"number":3}],"result":null,"preventMethod":false,"methodScopeId":314,"scopeIsPlayer":true,"index":7,"originStackId":11},"isAfterActivation":true,"index":7} 

 Player 1 20:07:59 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War \n2:Player 1 rolled 4 vs War<Monster>"} 

 Player 1 20:07:59 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":11,"creatorCardId":314,"numberRolled":4,"rollingPlayerCardId":314,"stackEffectType":2,"attackedMonsterCardId":307}} 

 Player 1 20:07:59 $REMOVE_RESOLVING_STACK_EFFECT:  
{"stackEffectId":11} 

 Player 1 20:07:59 $SET_STACK_ICON:  
{"iconIndex":1} 

 Player 1 20:08:00 $SHOW_STACK_EFFECT:  
{"effectId":11} 

 Player 2 20:08:00 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against War<Monster>"} 

 Player 2 20:08:00 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against War<Monster>"} 

 Player 2 20:08:00 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against War<Monster>"} 

 Player 2 20:08:00 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against War<Monster>"} 

 Player 2 20:08:00 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against War<Monster>"} 

 Player 2 20:08:00 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against War<Monster>"} 

 Player 2 20:08:00 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against War<Monster>"} 

 Player 2 20:08:00 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against War<Monster>"} 

 Player 2 20:08:00 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War \n2:Player 1 is rolling against War<Monster>"} 

 Player 2 20:08:00 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War \n2:Player 1 is rolling against War<Monster>"} 

 Player 1 20:08:02 $REMOVE_SE_VIS_PREV:  
{"stackEffectId":11} 

 Player 1 20:08:02 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":94,"_text":"Remove After Resolve AttackRoll 11  "}} 

 Player 1 20:08:02 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War"} 

 Player 1 20:08:02 $REMOVE_FROM_STACK:  
{"stackEffect":{"entityId":11,"creatorCardId":314,"numberRolled":4,"rollingPlayerCardId":314,"stackEffectType":2,"attackedMonsterCardId":307}} 

 Player 1 20:08:02 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":95,"_text":"Response Remove After Resolve AttackRoll 11"},"childOfId":94} 

 Player 1 20:08:02 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":96,"_text":"Wait For Response From Player 1 "},"childOfId":94} 

 Player 1 20:08:02 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 20:08:02 $ACTION_MASSAGE_REMOVE:  
{"id":96} 

 Player 1 20:08:02 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":97,"_text":"Wait For Response From Player 2 "},"childOfId":94} 

 Player 1 20:08:02 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 20:08:02 $GET_REACTION:  
{"playerId":2,"activePlayerId":1} 

 Player 2 20:08:02 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War \n2:Player 1 is rolling against War<Monster>"} 

 Player 2 20:08:02 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War \n2:Player 1 is rolling against War<Monster>"} 

 Player 2 20:08:03 $HIDE_REACTIONS:  
{"playerId":2,"cardsIds":[316]} 

 Player 2 20:08:03 $RESPOND_TO:  
{"playerId":1,"stackEffectResponse":false} 

 Player 1 20:08:03 $ACTION_MASSAGE_REMOVE:  
{"id":97} 

 Player 1 20:08:03 $ACTION_MASSAGE_REMOVE:  
{"id":95} 

 Player 1 20:08:03 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":98,"_text":"Resolve CombatDamage 12 "}} 

 Player 1 20:08:03 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War"} 

 Player 1 20:08:03 $ADD_RESOLVING_STACK_EFFECT:  
{"stackEffect":{"entityId":12,"creatorCardId":314,"entityToDoDamageCardId":314,"entityToTakeDamageCardId":307,"isMonsterDoDamage":false,"isMonsterTakeDamage":true,"isPlayerDoDamage":false,"stackEffectType":3,"numberRolled":4}} 

 Player 1 20:08:03 $UPDATE_STACK_VIS:  
{"stackId":12,"text":"Cain will deal 1 combat damage to War"} 

 Player 1 20:08:03 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"MONSTER_GET_HIT","args":[{"type":2,"number":1},{"type":0,"number":314},{"type":2}],"result":null,"preventMethod":false,"methodScopeId":307,"scopeIsPlayer":false,"index":3,"originStackId":-1},"isAfterActivation":false,"index":3} 

 Player 1 20:08:03 $NEXT_STACK_ID:  

 Player 1 20:08:03 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War"} 

 Player 1 20:08:03 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War \n2:Activate War effect GainStats<GainStats>"} 

 Player 1 20:08:03 $ADD_TO_STACK:  
{"stackEffect":{"effectCollectedData":null,"entityId":13,"creatorCardId":314,"hasLockingStackEffect":false,"cardActivatorId":1,"cardWithEffectId":307,"effectToDo":{"effectName":"GainStats","cardEffectNum":0,"cardPlayerId":1,"cardId":307,"effctType":0},"isAfterActivation":false,"index":3,"hasDataBeenCollectedYet":false,"stackEffectType":14}} 

 Player 1 20:08:03 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War \n2:Activate War effect GainStats<GainStats>"} 

 Player 1 20:08:03 $ADD_SE_VIS_PREV:  
{"stackEffect":{"effectCollectedData":null,"entityId":13,"creatorCardId":314,"hasLockingStackEffect":false,"cardActivatorId":1,"cardWithEffectId":307,"effectToDo":{"effectName":"GainStats","cardEffectNum":0,"cardPlayerId":1,"cardId":307,"effctType":0},"isAfterActivation":false,"index":3,"hasDataBeenCollectedYet":false,"stackEffectType":14}} 

 Player 1 20:08:03 $SET_STACK_ICON:  
{"iconIndex":0} 

 Player 1 20:08:03 $SHOW_STACK_EFFECT:  
{"effectId":13} 

 Player 2 20:08:03 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War"} 

 Player 2 20:08:03 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War"} 

 Player 2 20:08:03 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War"} 

 Player 2 20:08:03 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War"} 

 Player 2 20:08:03 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War \n2:Activate War "} 

 Player 2 20:08:03 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War \n2:Activate War "} 

 Player 1 20:08:06 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":99,"_text":"Add ActivatePassiveEffect 13 "}} 

 Player 1 20:08:06 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War \n2:Activate War effect GainStats<GainStats>"} 

 Player 1 20:08:06 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War \n2:Activate War effect GainStats<GainStats>"} 

 Player 1 20:08:06 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"effectCollectedData":{"effectTargets":[307],"chainEffectsData":[],"methodArgs":[],"isPassive":true,"terminateOriginal":false,"effectCardOwner":307,"effectCardPlayer":307},"entityId":13,"creatorCardId":314,"hasLockingStackEffect":false,"cardActivatorId":1,"cardWithEffectId":307,"effectToDo":{"effectName":"GainStats","cardEffectNum":0,"cardPlayerId":1,"cardId":307,"effctType":0},"isAfterActivation":false,"index":3,"hasDataBeenCollectedYet":true,"stackEffectType":14}} 

 Player 1 20:08:06 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":100,"_text":"Response Adding ActivatePassiveEffect 13"},"childOfId":99} 

 Player 1 20:08:06 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":101,"_text":"Wait For Response From Player 2 "},"childOfId":99} 

 Player 1 20:08:06 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 20:08:06 $GET_REACTION:  
{"playerId":2,"activePlayerId":1} 

 Player 2 20:08:06 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War \n2:Activate War "} 

 Player 2 20:08:06 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War \n2:Activate War "} 

 Player 2 20:08:06 $HIDE_REACTIONS:  
{"playerId":2,"cardsIds":[316]} 

 Player 2 20:08:06 $RESPOND_TO:  
{"playerId":1,"stackEffectResponse":false} 

 Player 1 20:08:06 $ACTION_MASSAGE_REMOVE:  
{"id":101} 

 Player 1 20:08:06 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":102,"_text":"Wait For Response From Player 1 "},"childOfId":99} 

 Player 1 20:08:06 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 20:08:06 $ACTION_MASSAGE_REMOVE:  
{"id":102} 

 Player 1 20:08:06 $ACTION_MASSAGE_REMOVE:  
{"id":100} 

 Player 1 20:08:06 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":103,"_text":"Resolve ActivatePassiveEffect 13 "}} 

 Player 1 20:08:06 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War \n2:Activate War effect GainStats<GainStats>"} 

 Player 1 20:08:06 $ADD_RESOLVING_STACK_EFFECT:  
{"stackEffect":{"effectCollectedData":{"effectTargets":[307],"chainEffectsData":[],"methodArgs":[],"isPassive":true,"terminateOriginal":false,"effectCardOwner":307,"effectCardPlayer":307},"entityId":13,"creatorCardId":314,"hasLockingStackEffect":false,"cardActivatorId":1,"cardWithEffectId":307,"effectToDo":{"effectName":"GainStats","cardEffectNum":0,"cardPlayerId":1,"cardId":307,"effctType":0},"isAfterActivation":false,"index":3,"hasDataBeenCollectedYet":true,"stackEffectType":14}} 

 Player 1 20:08:06 $ACTIVATE_PARTICLE_EFFECT:  
{"cardId":307,"particleType":6} 

 Player 2 20:08:06 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War \n2:Activate War "} 

 Player 2 20:08:07 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War \n2:Activate War "} 

 Player 1 20:08:08 $DISABLE_PARTICLE_EFFECT:  
{"cardId":307,"particleType":6} 

 Player 1 20:08:08 $MONSTER_GAIN_DMG:  
{"cardId":307,"DMGToGain":1} 

 Player 1 20:08:08 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"MONSTER_GET_HIT","args":[{"type":2,"number":1},{"type":0,"number":314},{"type":2}],"result":null,"preventMethod":false,"methodScopeId":307,"scopeIsPlayer":false,"index":3,"originStackId":-1},"isAfterActivation":false,"index":3} 

 Player 1 20:08:08 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War \n2:Activate War effect GainStats<GainStats>"} 

 Player 1 20:08:08 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"effectCollectedData":{"effectTargets":[307],"chainEffectsData":[],"methodArgs":[],"isPassive":true,"terminateOriginal":false,"effectCardOwner":307,"effectCardPlayer":307},"entityId":13,"creatorCardId":314,"hasLockingStackEffect":false,"cardActivatorId":1,"cardWithEffectId":307,"isAfterActivation":false,"index":3,"hasDataBeenCollectedYet":true,"stackEffectType":14}} 

 Player 1 20:08:08 $REMOVE_RESOLVING_STACK_EFFECT:  
{"stackEffectId":13} 

 Player 1 20:08:08 $SET_STACK_ICON:  
{"iconIndex":1} 

 Player 1 20:08:08 $SHOW_STACK_EFFECT:  
{"effectId":13} 

 Player 2 20:08:08 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War \n2:Activate War "} 

 Player 2 20:08:08 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War \n2:Activate War "} 

 Player 1 20:08:11 $REMOVE_SE_VIS_PREV:  
{"stackEffectId":13} 

 Player 1 20:08:11 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":104,"_text":"Remove After Resolve ActivatePassiveEffect 13  "}} 

 Player 1 20:08:11 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War"} 

 Player 1 20:08:11 $REMOVE_FROM_STACK:  
{"stackEffect":{"effectCollectedData":{"effectTargets":[307],"chainEffectsData":[],"methodArgs":[],"isPassive":true,"terminateOriginal":false,"effectCardOwner":307,"effectCardPlayer":307},"entityId":13,"creatorCardId":314,"hasLockingStackEffect":false,"cardActivatorId":1,"cardWithEffectId":307,"isAfterActivation":false,"index":3,"hasDataBeenCollectedYet":true,"stackEffectType":14}} 

 Player 1 20:08:11 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":105,"_text":"Response Remove After Resolve ActivatePassiveEffect 13"},"childOfId":104} 

 Player 1 20:08:11 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":106,"_text":"Wait For Response From Player 1 "},"childOfId":104} 

 Player 1 20:08:11 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 20:08:11 $ACTION_MASSAGE_REMOVE:  
{"id":106} 

 Player 1 20:08:12 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":107,"_text":"Wait For Response From Player 2 "},"childOfId":104} 

 Player 1 20:08:12 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 20:08:12 $GET_REACTION:  
{"playerId":2,"activePlayerId":1} 

 Player 2 20:08:12 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War \n2:Activate War "} 

 Player 2 20:08:12 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War \n2:Activate War "} 

 Player 2 20:08:12 $HIDE_REACTIONS:  
{"playerId":2,"cardsIds":[316]} 

 Player 2 20:08:12 $RESPOND_TO:  
{"playerId":1,"stackEffectResponse":false} 

 Player 1 20:08:12 $ACTION_MASSAGE_REMOVE:  
{"id":107} 

 Player 1 20:08:12 $ACTION_MASSAGE_REMOVE:  
{"id":105} 

 Player 1 20:08:12 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":108,"_text":"Resolve CombatDamage 12 "}} 

 Player 1 20:08:12 $MONSTER_GET_DAMAGED:  
{"cardId":307,"hpLeft":0,"damageDealerId":314} 

 Player 1 20:08:12 $NEXT_STACK_ID:  

 Player 1 20:08:12 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War"} 

 Player 1 20:08:12 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 20:08:12 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War \n2:[object Object] killed by Cain"} 

 Player 1 20:08:12 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":14,"creatorCardId":314,"monsterToDieCardId":307,"stackEffectType":5,"killerId":314}} 

 Player 1 20:08:12 $SET_STACK_ICON:  
{"iconIndex":0} 

 Player 1 20:08:12 $SHOW_STACK_EFFECT:  
{"effectId":14} 

 Player 2 20:08:12 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War"} 

 Player 2 20:08:12 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War"} 

 Player 1 20:08:15 $CLEAR_SE_VIS:  

 Player 1 20:08:15 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War \n2:[object Object] killed by Cain"} 

 Player 1 20:08:15 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":12,"creatorCardId":314,"entityToDoDamageCardId":314,"entityToTakeDamageCardId":307,"isMonsterDoDamage":false,"isMonsterTakeDamage":true,"isPlayerDoDamage":false,"stackEffectType":3,"numberRolled":4}} 

 Player 1 20:08:15 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War \n2:[object Object] killed by Cain"} 

 Player 1 20:08:16 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":14,"creatorCardId":314,"monsterToDieCardId":307,"stackEffectType":5,"killerId":314}} 

 Player 1 20:08:16 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War \n2:[object Object] killed by Cain"} 

 Player 1 20:08:16 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War \n2:[object Object] killed by Cain"} 

 Player 1 20:08:16 $REPLACE_STACK:  
{"currentStack":[{"entityId":12,"creatorCardId":314,"entityToDoDamageCardId":314,"entityToTakeDamageCardId":307,"isMonsterDoDamage":false,"isMonsterTakeDamage":true,"isPlayerDoDamage":false,"stackEffectType":3,"numberRolled":4},{"entityId":14,"creatorCardId":314,"monsterToDieCardId":307,"stackEffectType":5,"killerId":314}]} 

 Player 1 20:08:16 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"MONSTER_GET_HIT","args":[{"type":2,"number":1},{"type":0,"number":314},{"type":2}],"result":null,"preventMethod":false,"methodScopeId":307,"scopeIsPlayer":false,"index":3,"originStackId":-1},"isAfterActivation":true,"index":3} 

 Player 1 20:08:16 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"PLAYER_COMBAT_DAMAGE_GIVEN","args":[{"type":2,"number":1},{"type":2,"number":4},{"type":0,"number":314},{"type":0,"number":307}],"result":null,"preventMethod":false,"methodScopeId":314,"scopeIsPlayer":true,"index":8,"originStackId":12},"isAfterActivation":true,"index":8} 

 Player 1 20:08:16 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War \n2:[object Object] killed by Cain"} 

 Player 1 20:08:16 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":12,"creatorCardId":314,"entityToDoDamageCardId":314,"entityToTakeDamageCardId":307,"isMonsterDoDamage":false,"isMonsterTakeDamage":true,"isPlayerDoDamage":false,"stackEffectType":3,"numberRolled":4}} 

 Player 1 20:08:16 $REMOVE_RESOLVING_STACK_EFFECT:  
{"stackEffectId":12} 

 Player 1 20:08:16 $SET_STACK_ICON:  
{"iconIndex":1} 

 Player 1 20:08:16 $SHOW_STACK_EFFECT:  
{"effectId":12} 

 Player 2 20:08:16 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War"} 

 Player 2 20:08:16 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War"} 

 Player 2 20:08:16 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War"} 

 Player 2 20:08:16 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War"} 

 Player 2 20:08:16 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War"} 

 Player 2 20:08:16 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War"} 

 Player 2 20:08:16 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War"} 

 Player 2 20:08:16 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War"} 

 Player 2 20:08:17 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War \n2:[object Object] killed by Cain"} 

 Player 2 20:08:17 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War \n2:[object Object] killed by Cain"} 

 Player 1 20:08:18 $REMOVE_SE_VIS_PREV:  
{"stackEffectId":12} 

 Player 1 20:08:18 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":109,"_text":"Remove After Resolve CombatDamage 12  "}} 

 Player 1 20:08:18 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:[object Object] killed by Cain"} 

 Player 1 20:08:18 $REMOVE_FROM_STACK:  
{"stackEffect":{"entityId":12,"creatorCardId":314,"entityToDoDamageCardId":314,"entityToTakeDamageCardId":307,"isMonsterDoDamage":false,"isMonsterTakeDamage":true,"isPlayerDoDamage":false,"stackEffectType":3,"numberRolled":4}} 

 Player 1 20:08:18 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":110,"_text":"Response Remove After Resolve CombatDamage 12"},"childOfId":109} 

 Player 1 20:08:18 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":111,"_text":"Wait For Response From Player 1 "},"childOfId":109} 

 Player 1 20:08:18 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 20:08:18 $ACTION_MASSAGE_REMOVE:  
{"id":111} 

 Player 1 20:08:18 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":112,"_text":"Wait For Response From Player 2 "},"childOfId":109} 

 Player 1 20:08:18 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 20:08:18 $GET_REACTION:  
{"playerId":2,"activePlayerId":1} 

 Player 2 20:08:18 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War \n2:[object Object] killed by Cain"} 

 Player 2 20:08:18 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War \n2:[object Object] killed by Cain"} 

 Player 2 20:08:18 $HIDE_REACTIONS:  
{"playerId":2,"cardsIds":[316]} 

 Player 2 20:08:18 $RESPOND_TO:  
{"playerId":1,"stackEffectResponse":false} 

 Player 1 20:08:18 $ACTION_MASSAGE_REMOVE:  
{"id":112} 

 Player 1 20:08:18 $ACTION_MASSAGE_REMOVE:  
{"id":110} 

 Player 1 20:08:18 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":113,"_text":"Resolve MonsterDeath 14 "}} 

 Player 1 20:08:18 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:[object Object] killed by Cain"} 

 Player 1 20:08:19 $ADD_RESOLVING_STACK_EFFECT:  
{"stackEffect":{"entityId":14,"creatorCardId":314,"monsterToDieCardId":307,"stackEffectType":5,"killerId":314}} 

 Player 1 20:08:19 $DISABLE_PARTICLE_EFFECT:  
{"cardId":307,"particleType":5} 

 Player 1 20:08:19 $CANCEL_ATTACK:  

 Player 1 20:08:19 $NEXT_STACK_ID:  

 Player 1 20:08:19 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:[object Object] killed by Cain"} 

 Player 1 20:08:19 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 20:08:19 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 get War<Monster> reward \n2:[object Object] killed by Cain"} 

 Player 1 20:08:19 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":15,"creatorCardId":314,"monsterCardWithRewardId":307,"playerCardIdToReward":314,"stackEffectType":7}} 

 Player 1 20:08:19 $SET_STACK_ICON:  
{"iconIndex":0} 

 Player 1 20:08:19 $SHOW_STACK_EFFECT:  
{"effectId":15} 

 Player 2 20:08:19 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War"} 

 Player 2 20:08:19 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War"} 

 Player 2 20:08:19 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War"} 

 Player 2 20:08:19 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War"} 

 Player 1 20:08:21 $CLEAR_SE_VIS:  

 Player 1 20:08:21 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 get War<Monster> reward \n2:[object Object] killed by Cain"} 

 Player 1 20:08:21 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":15,"creatorCardId":314,"monsterCardWithRewardId":307,"playerCardIdToReward":314,"stackEffectType":7}} 

 Player 1 20:08:21 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 get War<Monster> reward \n2:[object Object] killed by Cain"} 

 Player 1 20:08:22 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":14,"creatorCardId":314,"monsterToDieCardId":307,"stackEffectType":5,"killerId":314}} 

 Player 1 20:08:22 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 get War<Monster> reward \n2:[object Object] killed by Cain"} 

 Player 1 20:08:22 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 get War<Monster> reward \n2:[object Object] killed by Cain"} 

 Player 1 20:08:22 $REPLACE_STACK:  
{"currentStack":[{"entityId":15,"creatorCardId":314,"monsterCardWithRewardId":307,"playerCardIdToReward":314,"stackEffectType":7},{"entityId":14,"creatorCardId":314,"monsterToDieCardId":307,"stackEffectType":5,"killerId":314}]} 

 Player 1 20:08:22 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 get War<Monster> reward \n2:[object Object] killed by Cain"} 

 Player 1 20:08:22 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":14,"creatorCardId":314,"monsterToDieCardId":307,"stackEffectType":5,"killerId":314}} 

 Player 1 20:08:22 $REMOVE_RESOLVING_STACK_EFFECT:  
{"stackEffectId":14} 

 Player 1 20:08:22 $SET_STACK_ICON:  
{"iconIndex":1} 

 Player 1 20:08:22 $SHOW_STACK_EFFECT:  
{"effectId":14} 

 Player 2 20:08:22 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War"} 

 Player 2 20:08:22 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War"} 

 Player 2 20:08:22 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War"} 

 Player 2 20:08:22 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War"} 

 Player 2 20:08:22 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War"} 

 Player 2 20:08:22 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War"} 

 Player 2 20:08:22 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War"} 

 Player 2 20:08:22 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to War"} 

 Player 2 20:08:22 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 get War<Monster> reward \n2:[object Object] killed by Cain"} 

 Player 2 20:08:22 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 get War<Monster> reward \n2:[object Object] killed by Cain"} 

 Player 1 20:08:24 $REMOVE_SE_VIS_PREV:  
{"stackEffectId":14} 

 Player 1 20:08:24 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":114,"_text":"Remove After Resolve MonsterDeath 14  "}} 

 Player 1 20:08:24 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 get War<Monster> reward"} 

 Player 1 20:08:24 $REMOVE_FROM_STACK:  
{"stackEffect":{"entityId":14,"creatorCardId":314,"monsterToDieCardId":307,"stackEffectType":5,"killerId":314}} 

 Player 1 20:08:25 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":115,"_text":"Response Remove After Resolve MonsterDeath 14"},"childOfId":114} 

 Player 1 20:08:25 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":116,"_text":"Wait For Response From Player 1 "},"childOfId":114} 

 Player 1 20:08:25 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 20:08:25 $ACTION_MASSAGE_REMOVE:  
{"id":116} 

 Player 1 20:08:25 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":117,"_text":"Wait For Response From Player 2 "},"childOfId":114} 

 Player 1 20:08:25 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 20:08:25 $GET_REACTION:  
{"playerId":2,"activePlayerId":1} 

 Player 2 20:08:25 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 get War<Monster> reward \n2:[object Object] killed by Cain"} 

 Player 2 20:08:25 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 get War<Monster> reward \n2:[object Object] killed by Cain"} 

 Player 2 20:08:25 $HIDE_REACTIONS:  
{"playerId":2,"cardsIds":[316]} 

 Player 2 20:08:25 $RESPOND_TO:  
{"playerId":1,"stackEffectResponse":false} 

 Player 1 20:08:25 $ACTION_MASSAGE_REMOVE:  
{"id":117} 

 Player 1 20:08:25 $ACTION_MASSAGE_REMOVE:  
{"id":115} 

 Player 1 20:08:25 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":118,"_text":"Resolve MonsterRewardStackEffect 15 "}} 

 Player 1 20:08:25 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 get War<Monster> reward"} 

 Player 1 20:08:25 $ADD_RESOLVING_STACK_EFFECT:  
{"stackEffect":{"entityId":15,"creatorCardId":314,"monsterCardWithRewardId":307,"playerCardIdToReward":314,"stackEffectType":7}} 

 Player 1 20:08:25 $SET_MONEY:  
{"playerId":1,"numOfCoins":13} 

 Player 1 20:08:25 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"PLAYER_CHANGE_MONEY","args":[{"type":2,"number":8}],"result":null,"preventMethod":false,"methodScopeId":314,"scopeIsPlayer":true,"index":9,"originStackId":-1},"isAfterActivation":true,"index":9} 

 Player 1 20:08:25 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"MONSTER_IS_KILLED","args":[],"result":null,"preventMethod":false,"methodScopeId":307,"scopeIsPlayer":false,"index":10,"originStackId":15},"isAfterActivation":true,"index":10} 

 Player 1 20:08:25 $CLEAR_SE_VIS:  

 Player 1 20:08:25 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 20:08:25 $REMOVE_RESOLVING_STACK_EFFECT:  
{"stackEffectId":15} 

 Player 1 20:08:25 $REMOVE_SE_VIS_PREV:  
{"stackEffectId":15} 

 Player 1 20:08:25 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":119,"_text":"Fizzle MonsterRewardStackEffect 15"}} 

 Player 1 20:08:25 $FIZZLE_STACK_EFFECT:  
{"entityId":15} 

 Player 1 20:08:25 $MOVE_CARD:  
{"moveIndex":10,"cardId":307,"placeID":1,"flipIfFlipped":true,"playerId":1,"placeType":"soulsLayout"} 

 Player 2 20:08:25 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 get War<Monster> reward"} 

 Player 2 20:08:25 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 get War<Monster> reward"} 

 Player 2 20:08:25 $STACK_EMPTIED:  
{"playerId":1} 

 Player 2 20:08:26 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 20:08:26 $CLEAR_SE_VIS:  

 Player 2 20:08:26 $MOVE_CARD_END:  
{"moveIndex":10,"cardId":307,"flipIfFlipped":true,"playerId":1} 

 Player 1 20:08:26 $GET_SOUL:  
{"playerId":1,"cardId":307} 

 Player 1 20:08:26 $REMOVE_FROM_PASSIVE_MANAGER:  
{"cardId":307} 

 Player 1 20:08:26 $REMOVE_MONSTER:  
{"holderId":2,"monsterId":307} 

 Player 1 20:08:26 $NEXT_STACK_ID:  

 Player 1 20:08:26 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 20:08:26 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Refill holder2 slot"} 

 Player 1 20:08:26 $ADD_TO_STACK:  
{"stackEffect":{"entityId":16,"creatorCardId":314,"slotType":2,"slotToFillId":2,"stackEffectType":10}} 

 Player 1 20:08:26 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Refill holder2 slot"} 

 Player 1 20:08:26 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":16,"creatorCardId":314,"slotType":2,"slotToFillId":2,"stackEffectType":10}} 

 Player 1 20:08:26 $SET_STACK_ICON:  
{"iconIndex":0} 

 Player 1 20:08:26 $SHOW_STACK_EFFECT:  
{"effectId":16} 

 Player 2 20:08:26 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 20:08:26 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 20:08:26 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Refill holder2 slot"} 

 Player 2 20:08:26 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Refill holder2 slot"} 

 Player 1 20:08:29 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":120,"_text":"Add RefillEmptySlot 16 "}} 

 Player 1 20:08:29 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 20:08:29 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Refill holder2 slot"} 

 Player 1 20:08:29 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":16,"creatorCardId":314,"slotType":2,"slotToFillId":2,"stackEffectType":10}} 

 Player 1 20:08:29 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":121,"_text":"Response Adding RefillEmptySlot 16"},"childOfId":120} 

 Player 1 20:08:29 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":122,"_text":"Wait For Response From Player 1 "},"childOfId":120} 

 Player 1 20:08:29 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 20:08:29 $ACTION_MASSAGE_REMOVE:  
{"id":122} 

 Player 1 20:08:29 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":123,"_text":"Wait For Response From Player 2 "},"childOfId":120} 

 Player 1 20:08:29 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 20:08:29 $GET_REACTION:  
{"playerId":2,"activePlayerId":1} 

 Player 2 20:08:29 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Refill holder2 slot"} 

 Player 2 20:08:29 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Refill holder2 slot"} 

 Player 2 20:08:29 $HIDE_REACTIONS:  
{"playerId":2,"cardsIds":[316]} 

 Player 2 20:08:29 $RESPOND_TO:  
{"playerId":1,"stackEffectResponse":false} 

 Player 1 20:08:29 $ACTION_MASSAGE_REMOVE:  
{"id":123} 

 Player 1 20:08:29 $ACTION_MASSAGE_REMOVE:  
{"id":121} 

 Player 1 20:08:29 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":124,"_text":"Resolve RefillEmptySlot 16 "}} 

 Player 1 20:08:29 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Refill holder2 slot"} 

 Player 1 20:08:29 $ADD_RESOLVING_STACK_EFFECT:  
{"stackEffect":{"entityId":16,"creatorCardId":314,"slotType":2,"slotToFillId":2,"stackEffectType":10}} 

 Player 1 20:08:29 $DRAW_CARD:  
{"deckType":2} 

 Player 1 20:08:29 $FLIP_CARD:  
{"cardId":228} 

 Player 1 20:08:29 $REGISTER_PASSIVE_ITEM:  
{"cardId":228} 

 Player 1 20:08:30 $ADD_MONSTER:  
{"monsterPlaceId":2,"monsterId":228} 

 Player 1 20:08:30 $NEW_MONSTER_ON_PLACE:  
{"cardId":228,"monsterPlaceId":2} 

 Player 1 20:08:30 $REMOVE_RESOLVING_STACK_EFFECT:  
{"stackEffectId":16} 

 Player 1 20:08:30 $SET_STACK_ICON:  
{"iconIndex":1} 

 Player 1 20:08:30 $SHOW_STACK_EFFECT:  
{"effectId":16} 

 Player 2 20:08:30 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Refill holder2 slot"} 

 Player 2 20:08:30 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Refill holder2 slot"} 

 Player 1 20:08:32 $REMOVE_SE_VIS_PREV:  
{"stackEffectId":16} 

 Player 1 20:08:32 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":125,"_text":"Remove After Resolve RefillEmptySlot 16  "}} 

 Player 1 20:08:32 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 20:08:32 $REMOVE_FROM_STACK:  
{"stackEffect":{"entityId":16,"creatorCardId":314,"slotType":2,"slotToFillId":2,"stackEffectType":10}} 

 Player 1 20:08:32 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":126,"_text":"Response Remove After Resolve RefillEmptySlot 16"},"childOfId":125} 

 Player 1 20:08:32 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":127,"_text":"Wait For Response From Player 2 "},"childOfId":125} 

 Player 1 20:08:33 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 20:08:33 $GET_REACTION:  
{"playerId":2,"activePlayerId":1} 

 Player 2 20:08:33 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Refill holder2 slot"} 

 Player 2 20:08:33 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Refill holder2 slot"} 

 Player 2 20:08:33 $HIDE_REACTIONS:  
{"playerId":2,"cardsIds":[316]} 

 Player 2 20:08:33 $RESPOND_TO:  
{"playerId":1,"stackEffectResponse":false} 

 Player 1 20:08:33 $ACTION_MASSAGE_REMOVE:  
{"id":127} 

 Player 1 20:08:33 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":128,"_text":"Wait For Response From Player 1 "},"childOfId":125} 

 Player 1 20:08:33 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 20:08:33 $ACTION_MASSAGE_REMOVE:  
{"id":128} 

 Player 1 20:08:33 $ACTION_MASSAGE_REMOVE:  
{"id":126} 

 Player 1 20:08:33 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":129,"_text":"Stack Was Emptied "}} 

 Player 1 20:08:33 $CLEAR_SE_VIS:  

 Player 1 20:08:33 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 20:08:33 $REMOVE_RESOLVING_STACK_EFFECT:  
{"stackEffectId":15} 

 Player 1 20:08:33 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":130,"_text":"Stack Was Emptied "}} 

 Player 1 20:08:33 $CLEAR_SE_VIS:  

 Player 1 20:08:33 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 20:17:46 $NEXT_STACK_ID:  

 Player 1 20:17:46 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 20:17:46 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 activated Sleight Of Hand"} 

 Player 1 20:17:46 $ADD_TO_STACK:  
{"stackEffect":{"entityId":17,"creatorCardId":314,"hasLockingStackEffect":false,"itemToPlayCardId":317,"itemPlayerId":1,"hasDataBeenCollectedYet":false,"stackEffectType":1}} 

 Player 1 20:17:46 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 activated Sleight Of Hand"} 

 Player 1 20:17:46 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":17,"creatorCardId":314,"hasLockingStackEffect":false,"itemToPlayCardId":317,"itemPlayerId":1,"hasDataBeenCollectedYet":false,"stackEffectType":1}} 

 Player 1 20:17:46 $SET_STACK_ICON:  
{"iconIndex":0} 

 Player 1 20:17:46 $SHOW_STACK_EFFECT:  
{"effectId":17} 

 Player 1 20:17:46 $NEXT_STACK_ID:  

 Player 1 20:17:46 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 activated Sleight Of Hand"} 

 Player 1 20:17:47 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 activated Sleight Of Hand \n2:Player 1 activated Sleight Of Hand"} 

 Player 1 20:17:47 $ADD_TO_STACK:  
{"stackEffect":{"entityId":18,"creatorCardId":314,"hasLockingStackEffect":false,"itemToPlayCardId":317,"itemPlayerId":1,"hasDataBeenCollectedYet":false,"stackEffectType":1}} 

 Player 1 20:17:47 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 activated Sleight Of Hand \n2:Player 1 activated Sleight Of Hand"} 

 Player 1 20:17:47 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":18,"creatorCardId":314,"hasLockingStackEffect":false,"itemToPlayCardId":317,"itemPlayerId":1,"hasDataBeenCollectedYet":false,"stackEffectType":1}} 

 Player 1 20:17:47 $SET_STACK_ICON:  
{"iconIndex":0} 

 Player 1 20:17:47 $SHOW_STACK_EFFECT:  
{"effectId":18} 

 Player 2 20:17:47 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 20:17:47 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 20:17:47 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 activated Sleight Of Hand"} 

 Player 2 20:17:47 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 activated Sleight Of Hand"} 

 Player 2 20:17:47 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 activated Sleight Of Hand"} 

 Player 2 20:17:47 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 activated Sleight Of Hand"} 

 Player 2 20:17:47 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 activated Sleight Of Hand \n2:Player 1 activated Sleight Of Hand"} 

 Player 2 20:17:47 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 activated Sleight Of Hand \n2:Player 1 activated Sleight Of Hand"} 

 Player 1 20:17:49 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":131,"_text":"Add ActivateItem 17 "}} 

 Player 1 20:17:49 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":132,"_text":"Add ActivateItem 18 "}} 

 Player 1 20:17:53 $SHOW_DECISION:  
{"startCardId":317,"endCardId":142} 

 Player 1 20:17:53 $SHOW_DECISION:  
{"startCardId":317,"endCardId":142} 

 Player 1 20:17:56 $USE_ITEM:  
{"cardId":317} 

 Player 1 20:17:56 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 20:17:56 $USE_ITEM:  
{"cardId":317} 

 Player 1 20:17:56 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 20:17:56 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 activated Sleight Of Hand \n2:Player 1 activated Sleight Of Hand"} 

 Player 1 20:17:56 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":17,"creatorCardId":314,"hasLockingStackEffect":false,"itemToPlayCardId":317,"itemPlayerId":1,"effectToDoData":{"type":1,"index":0},"hasDataBeenCollectedYet":true,"stackEffectType":1}} 

 Player 1 20:17:56 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":133,"_text":"Response Adding ActivateItem 17"},"childOfId":131} 

 Player 1 20:17:56 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":134,"_text":"Wait For Response From Player 1 "},"childOfId":131} 

 Player 1 20:17:56 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 20:17:56 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 activated Sleight Of Hand \n2:Player 1 activated Sleight Of Hand"} 

 Player 1 20:17:56 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":18,"creatorCardId":314,"hasLockingStackEffect":false,"itemToPlayCardId":317,"itemPlayerId":1,"effectToDoData":{"type":1,"index":0},"hasDataBeenCollectedYet":true,"stackEffectType":1}} 

 Player 1 20:17:56 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":135,"_text":"Response Adding ActivateItem 18"},"childOfId":132} 

 Player 1 20:17:56 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":136,"_text":"Wait For Response From Player 1 "},"childOfId":132} 

 Player 1 20:17:57 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 20:17:57 $ACTION_MASSAGE_REMOVE:  
{"id":134} 

 Player 1 20:17:57 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":137,"_text":"Wait For Response From Player 2 "},"childOfId":131} 

 Player 1 20:17:57 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 20:17:57 $GET_REACTION:  
{"playerId":2,"activePlayerId":1} 

 Player 1 20:17:57 $ACTION_MASSAGE_REMOVE:  
{"id":136} 

 Player 1 20:17:57 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":138,"_text":"Wait For Response From Player 2 "},"childOfId":132} 

 Player 1 20:17:57 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 20:17:57 $GET_REACTION:  
{"playerId":2,"activePlayerId":1} 

 Player 2 20:17:57 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 activated Sleight Of Hand \n2:Player 1 activated Sleight Of Hand"} 

 Player 2 20:17:57 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 activated Sleight Of Hand \n2:Player 1 activated Sleight Of Hand"} 

 Player 2 20:17:57 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 activated Sleight Of Hand \n2:Player 1 activated Sleight Of Hand"} 

 Player 2 20:17:57 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 activated Sleight Of Hand \n2:Player 1 activated Sleight Of Hand"} 

 Player 2 20:17:57 $HIDE_REACTIONS:  
{"playerId":2,"cardsIds":[316]} 

 Player 2 20:17:57 $RESPOND_TO:  
{"playerId":1,"stackEffectResponse":false} 

 Player 2 20:17:57 $HIDE_REACTIONS:  
{"playerId":2,"cardsIds":[316]} 

 Player 2 20:17:57 $RESPOND_TO:  
{"playerId":1,"stackEffectResponse":false} 

 Player 1 20:17:57 $ACTION_MASSAGE_REMOVE:  
{"id":137} 

 Player 1 20:17:57 $ACTION_MASSAGE_REMOVE:  
{"id":138} 

 Player 1 20:17:57 $ACTION_MASSAGE_REMOVE:  
{"id":133} 

 Player 1 20:17:57 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":139,"_text":"Resolve ActivateItem 18 "}} 

 Player 1 20:17:57 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 activated Sleight Of Hand \n2:Player 1 activated Sleight Of Hand"} 

 Player 1 20:17:57 $ADD_RESOLVING_STACK_EFFECT:  
{"stackEffect":{"entityId":18,"creatorCardId":314,"hasLockingStackEffect":false,"itemToPlayCardId":317,"itemPlayerId":1,"effectToDoData":{"type":1,"index":0},"hasDataBeenCollectedYet":true,"stackEffectType":1}} 

 Player 1 20:17:57 $ACTION_MASSAGE_REMOVE:  
{"id":135} 

 Player 1 20:17:57 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":140,"_text":"Resolve ActivateItem 18 "}} 

 Player 1 20:17:57 $ACTIVATE_PARTICLE_EFFECT:  
{"cardId":317,"particleType":6} 

 Player 2 20:17:57 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 activated Sleight Of Hand \n2:Player 1 activated Sleight Of Hand"} 

 Player 2 20:17:57 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 activated Sleight Of Hand \n2:Player 1 activated Sleight Of Hand"} 

 Player 1 20:17:59 $DISABLE_PARTICLE_EFFECT:  
{"cardId":317,"particleType":6} 

 Player 1 20:18:11 $DECK_ADD_TO_TOP:  
{"deckType":5,"cardId":144} 

 Player 1 20:18:11 $DECK_ADD_TO_TOP:  
{"deckType":5,"cardId":162} 

 Player 1 20:18:11 $DECK_ADD_TO_TOP:  
{"deckType":5,"cardId":148} 

 Player 1 20:18:11 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 activated Sleight Of Hand \n2:Player 1 activated Sleight Of Hand"} 

 Player 1 20:18:11 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":18,"creatorCardId":314,"hasLockingStackEffect":false,"itemToPlayCardId":317,"itemPlayerId":1,"hasDataBeenCollectedYet":true,"stackEffectType":1}} 

 Player 1 20:18:11 $REMOVE_RESOLVING_STACK_EFFECT:  
{"stackEffectId":18} 

 Player 1 20:18:11 $SET_STACK_ICON:  
{"iconIndex":1} 

 Player 1 20:18:11 $SHOW_STACK_EFFECT:  
{"effectId":18} 

 Player 2 20:18:11 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 activated Sleight Of Hand \n2:Player 1 activated Sleight Of Hand"} 

 Player 2 20:18:11 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 activated Sleight Of Hand \n2:Player 1 activated Sleight Of Hand"} 

 Player 1 20:18:14 $REMOVE_SE_VIS_PREV:  
{"stackEffectId":18} 

 Player 1 20:18:14 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":141,"_text":"Remove After Resolve ActivateItem 18  "}} 

 Player 1 20:18:14 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 activated Sleight Of Hand"} 

 Player 1 20:18:14 $REMOVE_FROM_STACK:  
{"stackEffect":{"entityId":18,"creatorCardId":314,"hasLockingStackEffect":false,"itemToPlayCardId":317,"itemPlayerId":1,"hasDataBeenCollectedYet":true,"stackEffectType":1}} 

 Player 1 20:18:14 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":142,"_text":"Response Remove After Resolve ActivateItem 18"},"childOfId":141} 

 Player 1 20:18:14 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":143,"_text":"Wait For Response From Player 2 "},"childOfId":141} 

 Player 1 20:18:14 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 20:18:14 $GET_REACTION:  
{"playerId":2,"activePlayerId":1} 

 Player 2 20:18:14 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 activated Sleight Of Hand \n2:Player 1 activated Sleight Of Hand"} 

 Player 2 20:18:14 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 activated Sleight Of Hand \n2:Player 1 activated Sleight Of Hand"} 

 Player 2 20:18:14 $HIDE_REACTIONS:  
{"playerId":2,"cardsIds":[316]} 

 Player 2 20:18:14 $RESPOND_TO:  
{"playerId":1,"stackEffectResponse":false} 

 Player 1 20:18:14 $ACTION_MASSAGE_REMOVE:  
{"id":143} 

 Player 1 20:18:14 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":144,"_text":"Wait For Response From Player 1 "},"childOfId":141} 

 Player 1 20:18:14 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 20:18:14 $ACTION_MASSAGE_REMOVE:  
{"id":144} 

 Player 1 20:18:14 $ACTION_MASSAGE_REMOVE:  
{"id":142} 

 Player 1 20:18:14 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":145,"_text":"Resolve ActivateItem 17 "}} 

 Player 1 20:18:14 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 activated Sleight Of Hand"} 

 Player 1 20:18:14 $ADD_RESOLVING_STACK_EFFECT:  
{"stackEffect":{"entityId":17,"creatorCardId":314,"hasLockingStackEffect":false,"itemToPlayCardId":317,"itemPlayerId":1,"effectToDoData":{"type":1,"index":0},"hasDataBeenCollectedYet":true,"stackEffectType":1}} 

 Player 1 20:18:14 $ACTIVATE_PARTICLE_EFFECT:  
{"cardId":317,"particleType":6} 

 Player 2 20:18:14 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 activated Sleight Of Hand"} 

 Player 2 20:18:14 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 activated Sleight Of Hand"} 

 Player 1 20:18:16 $DISABLE_PARTICLE_EFFECT:  
{"cardId":317,"particleType":6} 

 Player 1 20:18:16 $LOG_ERROR:  
{"message":"\"Cannot read property 'getTarget' of undefined\"","stack":"\"TypeError: Cannot read property 'getTarget' of undefined\\n    at LookAtTopDeckAndPutOnTop.<anonymous> (http://localhost:7456/preview-scripts/assets/Script/CardEffectComponents/CardEffects/LookAtTopDeckAndPutOnTop.js:66:41)\\n    at step (http://localhost:7456/app/engine/bin/cocos2d-js-for-preview.js:113111:21)\\n    at Object.next (http://localhost:7456/app/engine/bin/cocos2d-js-for-preview.js:113055:18)\\n    at http://localhost:7456/app/engine/bin/cocos2d-js-for-preview.js:113033:71\\n    at new Promise (<anonymous>)\\n    at 486.window.__awaiter (http://localhost:7456/app/engine/bin/cocos2d-js-for-preview.js:113013:14)\\n    at LookAtTopDeckAndPutOnTop.doEffect (http://localhost:7456/preview-scripts/assets/Script/CardEffectComponents/CardEffects/LookAtTopDeckAndPutOnTop.js:46:16)\\n    at CardEffect.<anonymous> (http://localhost:7456/preview-scripts/assets/Script/Entites/CardEffect.js:248:59)\\n    at step (http://localhost:7456/app/engine/bin/cocos2d-js-for-preview.js:113111:21)\\n    at Object.next (http://localhost:7456/app/engine/bin/cocos2d-js-for-preview.js:113055:18)\""} 
//////Error From Player 1////
  

 Player 1 20:18:16 $LOG_ERROR:  
//////Error From Player 1////

 "\"Cannot read property 'getTarget' of undefined\""

 + "\"TypeError: Cannot read property 'getTarget' of undefined\
    at LookAtTopDeckAndPutOnTop.<anonymous> (http://localhost:7456/preview-scripts/assets/Script/CardEffectComponents/CardEffects/LookAtTopDeckAndPutOnTop.js:66:41)\
    at step (http://localhost:7456/app/engine/bin/cocos2d-js-for-preview.js:113111:21)\
    at Object.next (http://localhost:7456/app/engine/bin/cocos2d-js-for-preview.js:113055:18)\
    at http://localhost:7456/app/engine/bin/cocos2d-js-for-preview.js:113033:71\
    at new Promise (<anonymous>)\
    at 486.window.__awaiter (http://localhost:7456/app/engine/bin/cocos2d-js-for-preview.js:113013:14)\
    at LookAtTopDeckAndPutOnTop.doEffect (http://localhost:7456/preview-scripts/assets/Script/CardEffectComponents/CardEffects/LookAtTopDeckAndPutOnTop.js:46:16)\
    at CardEffect.<anonymous> (http://localhost:7456/preview-scripts/assets/Script/Entites/CardEffect.js:248:59)\
    at step (http://localhost:7456/app/engine/bin/cocos2d-js-for-preview.js:113111:21)\
    at Object.next (http://localhost:7456/app/engine/bin/cocos2d-js-for-preview.js:113055:18)\""

////// 
//////Error From Player 1////

 "\"Cannot read property 'getTarget' of undefined\""

 + "\"TypeError: Cannot read property 'getTarget' of undefined\
    at LookAtTopDeckAndPutOnTop.<anonymous> (http://localhost:7456/preview-scripts/assets/Script/CardEffectComponents/CardEffects/LookAtTopDeckAndPutOnTop.js:66:41)\
    at step (http://localhost:7456/app/engine/bin/cocos2d-js-for-preview.js:113111:21)\
    at Object.next (http://localhost:7456/app/engine/bin/cocos2d-js-for-preview.js:113055:18)\
    at http://localhost:7456/app/engine/bin/cocos2d-js-for-preview.js:113033:71\
    at new Promise (<anonymous>)\
    at 486.window.__awaiter (http://localhost:7456/app/engine/bin/cocos2d-js-for-preview.js:113013:14)\
    at LookAtTopDeckAndPutOnTop.doEffect (http://localhost:7456/preview-scripts/assets/Script/CardEffectComponents/CardEffects/LookAtTopDeckAndPutOnTop.js:46:16)\
    at CardEffect.<anonymous> (http://localhost:7456/preview-scripts/assets/Script/Entites/CardEffect.js:248:59)\
    at step (http://localhost:7456/app/engine/bin/cocos2d-js-for-preview.js:113111:21)\
    at Object.next (http://localhost:7456/app/engine/bin/cocos2d-js-for-preview.js:113055:18)\""

////// 

 Player 1 20:18:16 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 activated Sleight Of Hand"} 

 Player 1 20:18:16 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":17,"creatorCardId":314,"hasLockingStackEffect":false,"itemToPlayCardId":317,"itemPlayerId":1,"hasDataBeenCollectedYet":true,"stackEffectType":1}} 

 Player 1 20:18:16 $REMOVE_RESOLVING_STACK_EFFECT:  
{"stackEffectId":17} 

 Player 1 20:18:16 $SET_STACK_ICON:  
{"iconIndex":1} 

 Player 1 20:18:16 $SHOW_STACK_EFFECT:  
{"effectId":17} 

 Player 2 20:18:17 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 activated Sleight Of Hand"} 

 Player 2 20:18:17 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 activated Sleight Of Hand"} 

 Player 1 20:18:19 $REMOVE_SE_VIS_PREV:  
{"stackEffectId":17} 

 Player 1 20:18:19 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":146,"_text":"Remove After Resolve ActivateItem 17  "}} 

 Player 1 20:18:19 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 20:18:19 $REMOVE_FROM_STACK:  
{"stackEffect":{"entityId":17,"creatorCardId":314,"hasLockingStackEffect":false,"itemToPlayCardId":317,"itemPlayerId":1,"hasDataBeenCollectedYet":true,"stackEffectType":1}} 

 Player 1 20:18:19 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":147,"_text":"Response Remove After Resolve ActivateItem 17"},"childOfId":146} 

 Player 1 20:18:19 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":148,"_text":"Wait For Response From Player 1 "},"childOfId":146} 

 Player 1 20:18:19 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 20:18:20 $ACTION_MASSAGE_REMOVE:  
{"id":148} 

 Player 1 20:18:20 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":149,"_text":"Wait For Response From Player 2 "},"childOfId":146} 

 Player 1 20:18:20 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 20:18:20 $GET_REACTION:  
{"playerId":2,"activePlayerId":1} 

 Player 2 20:18:20 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 activated Sleight Of Hand"} 

 Player 2 20:18:20 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 activated Sleight Of Hand"} 

 Player 2 20:18:20 $HIDE_REACTIONS:  
{"playerId":2,"cardsIds":[316]} 

 Player 2 20:18:20 $RESPOND_TO:  
{"playerId":1,"stackEffectResponse":false} 

 Player 1 20:18:20 $ACTION_MASSAGE_REMOVE:  
{"id":149} 

 Player 1 20:18:20 $ACTION_MASSAGE_REMOVE:  
{"id":147} 

 Player 1 20:18:20 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":150,"_text":"Stack Was Emptied "}} 

 Player 1 20:18:20 $CLEAR_SE_VIS:  

 Player 1 20:18:20 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 20:18:25 $NEXT_STACK_ID:  

 Player 1 20:18:25 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 20:18:25 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is about to buy Treasure Deck for 10"} 

 Player 1 20:18:25 $ADD_TO_STACK:  
{"stackEffect":{"entityId":19,"creatorCardId":314,"itemToPurchaseCardId":142,"playerWhoBuysCardId":314,"cost":10,"stackEffectType":9}} 

 Player 1 20:18:25 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is about to buy Treasure Deck for 10"} 

 Player 1 20:18:25 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":19,"creatorCardId":314,"itemToPurchaseCardId":142,"playerWhoBuysCardId":314,"cost":10,"stackEffectType":9}} 

 Player 1 20:18:25 $SET_STACK_ICON:  
{"iconIndex":0} 

 Player 1 20:18:25 $SHOW_STACK_EFFECT:  
{"effectId":19} 

 Player 2 20:18:25 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 20:18:25 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 20:18:25 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is about to buy Treasure Deck for 10"} 

 Player 2 20:18:25 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is about to buy Treasure Deck for 10"} 

 Player 1 20:18:28 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":151,"_text":"Add PurchaseItem 19 "}} 

 Player 1 20:18:28 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 20:18:28 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is about to buy Treasure Deck for 10"} 

 Player 1 20:18:28 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":19,"creatorCardId":314,"itemToPurchaseCardId":142,"playerWhoBuysCardId":314,"cost":10,"stackEffectType":9}} 

 Player 1 20:18:28 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":152,"_text":"Response Adding PurchaseItem 19"},"childOfId":151} 

 Player 1 20:18:28 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":153,"_text":"Wait For Response From Player 1 "},"childOfId":151} 

 Player 1 20:18:28 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 20:18:28 $ACTION_MASSAGE_REMOVE:  
{"id":153} 

 Player 1 20:18:28 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":154,"_text":"Wait For Response From Player 2 "},"childOfId":151} 

 Player 1 20:18:28 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 20:18:28 $GET_REACTION:  
{"playerId":2,"activePlayerId":1} 

 Player 2 20:18:28 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is about to buy Treasure Deck for 10"} 

 Player 2 20:18:28 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is about to buy Treasure Deck for 10"} 

 Player 2 20:18:28 $HIDE_REACTIONS:  
{"playerId":2,"cardsIds":[316]} 

 Player 2 20:18:28 $RESPOND_TO:  
{"playerId":1,"stackEffectResponse":false} 

 Player 1 20:18:28 $ACTION_MASSAGE_REMOVE:  
{"id":154} 

 Player 1 20:18:29 $ACTION_MASSAGE_REMOVE:  
{"id":152} 

 Player 1 20:18:29 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":155,"_text":"Resolve PurchaseItem 19 "}} 

 Player 1 20:18:29 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is about to buy Treasure Deck for 10"} 

 Player 1 20:18:29 $ADD_RESOLVING_STACK_EFFECT:  
{"stackEffect":{"entityId":19,"creatorCardId":314,"itemToPurchaseCardId":142,"playerWhoBuysCardId":314,"cost":10,"stackEffectType":9}} 

 Player 1 20:18:29 $SET_MONEY:  
{"playerId":1,"numOfCoins":3} 

 Player 1 20:18:29 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"PLAYER_CHANGE_MONEY","args":[{"type":2,"number":-10}],"result":null,"preventMethod":false,"methodScopeId":314,"scopeIsPlayer":true,"index":11,"originStackId":-1},"isAfterActivation":true,"index":11} 

 Player 1 20:18:29 $DRAW_CARD:  
{"deckType":5} 

 Player 1 20:18:29 $REGISTER_PASSIVE_ITEM:  
{"cardId":148} 

 Player 1 20:18:29 $MOVE_CARD:  
{"moveIndex":11,"cardId":148,"placeID":1,"flipIfFlipped":true,"playerId":1,"placeType":"Desk"} 

 Player 2 20:18:29 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is about to buy Treasure Deck for 10"} 

 Player 2 20:18:29 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is about to buy Treasure Deck for 10"} 

 Player 2 20:18:29 $MOVE_CARD_END:  
{"moveIndex":11,"cardId":148,"flipIfFlipped":true,"playerId":1} 

 Player 1 20:18:29 $ADD_AN_ITEM:  
{"playerId":1,"cardId":148,"isReward":false} 

 Player 1 20:18:29 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"PLAYER_ADD_ITEM","args":[{"type":0,"number":148}],"result":true,"preventMethod":false,"methodScopeId":314,"scopeIsPlayer":true,"index":12,"originStackId":-1},"isAfterActivation":true,"index":12} 

 Player 1 20:18:29 $NEXT_STACK_ID:  

 Player 1 20:18:29 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is about to buy Treasure Deck for 10"} 

 Player 1 20:18:29 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is about to buy Treasure Deck for 10 \n2:Activate Breakfast effect GainStats<GainStats>"} 

 Player 1 20:18:29 $ADD_TO_STACK:  
{"stackEffect":{"effectCollectedData":null,"entityId":20,"creatorCardId":314,"hasLockingStackEffect":false,"cardActivatorId":1,"cardWithEffectId":148,"effectToDo":{"effectName":"GainStats","cardEffectNum":0,"cardPlayerId":1,"cardId":148,"effctType":0},"isAfterActivation":true,"index":12,"hasDataBeenCollectedYet":false,"stackEffectType":14}} 

 Player 1 20:18:29 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is about to buy Treasure Deck for 10 \n2:Activate Breakfast effect GainStats<GainStats>"} 

 Player 1 20:18:29 $ADD_SE_VIS_PREV:  
{"stackEffect":{"effectCollectedData":null,"entityId":20,"creatorCardId":314,"hasLockingStackEffect":false,"cardActivatorId":1,"cardWithEffectId":148,"effectToDo":{"effectName":"GainStats","cardEffectNum":0,"cardPlayerId":1,"cardId":148,"effctType":0},"isAfterActivation":true,"index":12,"hasDataBeenCollectedYet":false,"stackEffectType":14}} 

 Player 1 20:18:30 $SET_STACK_ICON:  
{"iconIndex":0} 

 Player 1 20:18:30 $SHOW_STACK_EFFECT:  
{"effectId":20} 

 Player 2 20:18:30 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is about to buy Treasure Deck for 10"} 

 Player 2 20:18:30 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is about to buy Treasure Deck for 10"} 

 Player 2 20:18:30 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is about to buy Treasure Deck for 10 \n2:Activate Breakfast "} 

 Player 2 20:18:30 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is about to buy Treasure Deck for 10 \n2:Activate Breakfast "} 

 Player 1 20:18:32 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":156,"_text":"Add ActivatePassiveEffect 20 "}} 

 Player 1 20:18:32 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is about to buy Treasure Deck for 10 \n2:Activate Breakfast effect GainStats<GainStats>"} 

 Player 1 20:18:32 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is about to buy Treasure Deck for 10 \n2:Activate Breakfast effect GainStats<GainStats>"} 

 Player 1 20:18:32 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"effectCollectedData":{"effectTargets":[314],"chainEffectsData":[],"methodArgs":[],"isPassive":true,"terminateOriginal":false,"effectCardOwner":314,"effectCardPlayer":314},"entityId":20,"creatorCardId":314,"hasLockingStackEffect":false,"cardActivatorId":1,"cardWithEffectId":148,"effectToDo":{"effectName":"GainStats","cardEffectNum":0,"cardPlayerId":1,"cardId":148,"effctType":0},"isAfterActivation":true,"index":12,"hasDataBeenCollectedYet":true,"stackEffectType":14}} 

 Player 1 20:18:32 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":157,"_text":"Response Adding ActivatePassiveEffect 20"},"childOfId":156} 

 Player 1 20:18:32 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":158,"_text":"Wait For Response From Player 2 "},"childOfId":156} 

 Player 1 20:18:32 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 20:18:32 $GET_REACTION:  
{"playerId":2,"activePlayerId":1} 

 Player 2 20:18:33 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is about to buy Treasure Deck for 10 \n2:Activate Breakfast "} 

 Player 2 20:18:33 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is about to buy Treasure Deck for 10 \n2:Activate Breakfast "} 

 Player 2 20:18:33 $HIDE_REACTIONS:  
{"playerId":2,"cardsIds":[316]} 

 Player 2 20:18:33 $RESPOND_TO:  
{"playerId":1,"stackEffectResponse":false} 

 Player 1 20:18:33 $ACTION_MASSAGE_REMOVE:  
{"id":158} 

 Player 1 20:18:33 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":159,"_text":"Wait For Response From Player 1 "},"childOfId":156} 

 Player 1 20:18:33 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 20:18:33 $ACTION_MASSAGE_REMOVE:  
{"id":159} 

 Player 1 20:18:33 $ACTION_MASSAGE_REMOVE:  
{"id":157} 

 Player 1 20:18:33 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":160,"_text":"Resolve ActivatePassiveEffect 20 "}} 

 Player 1 20:18:33 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is about to buy Treasure Deck for 10 \n2:Activate Breakfast effect GainStats<GainStats>"} 

 Player 1 20:18:33 $ADD_RESOLVING_STACK_EFFECT:  
{"stackEffect":{"effectCollectedData":{"effectTargets":[314],"chainEffectsData":[],"methodArgs":[],"isPassive":true,"terminateOriginal":false,"effectCardOwner":314,"effectCardPlayer":314},"entityId":20,"creatorCardId":314,"hasLockingStackEffect":false,"cardActivatorId":1,"cardWithEffectId":148,"effectToDo":{"effectName":"GainStats","cardEffectNum":0,"cardPlayerId":1,"cardId":148,"effctType":0},"isAfterActivation":true,"index":12,"hasDataBeenCollectedYet":true,"stackEffectType":14}} 

 Player 1 20:18:33 $ACTIVATE_PARTICLE_EFFECT:  
{"cardId":148,"particleType":6} 

 Player 2 20:18:33 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is about to buy Treasure Deck for 10 \n2:Activate Breakfast "} 

 Player 2 20:18:33 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is about to buy Treasure Deck for 10 \n2:Activate Breakfast "} 

 Player 1 20:18:35 $DISABLE_PARTICLE_EFFECT:  
{"cardId":148,"particleType":6} 

 Player 1 20:18:35 $PLAYER_GAIN_HP:  
{"playerId":1,"hpToGain":1,"isTemp":false} 

 Player 1 20:18:35 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"PLAYER_ADD_ITEM","args":[{"type":0,"number":148}],"result":true,"preventMethod":false,"methodScopeId":314,"scopeIsPlayer":true,"index":12,"originStackId":-1},"isAfterActivation":true,"index":12} 

 Player 1 20:18:35 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is about to buy Treasure Deck for 10 \n2:Activate Breakfast effect GainStats<GainStats>"} 

 Player 1 20:18:35 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"effectCollectedData":{"effectTargets":[314],"chainEffectsData":[],"methodArgs":[],"isPassive":true,"terminateOriginal":false,"effectCardOwner":314,"effectCardPlayer":314},"entityId":20,"creatorCardId":314,"hasLockingStackEffect":false,"cardActivatorId":1,"cardWithEffectId":148,"isAfterActivation":true,"index":12,"hasDataBeenCollectedYet":true,"stackEffectType":14}} 

 Player 1 20:18:35 $REMOVE_RESOLVING_STACK_EFFECT:  
{"stackEffectId":20} 

 Player 1 20:18:35 $SET_STACK_ICON:  
{"iconIndex":1} 

 Player 1 20:18:35 $SHOW_STACK_EFFECT:  
{"effectId":20} 

 Player 2 20:18:35 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is about to buy Treasure Deck for 10 \n2:Activate Breakfast "} 

 Player 2 20:18:35 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is about to buy Treasure Deck for 10 \n2:Activate Breakfast "} 

 Player 1 20:18:38 $REMOVE_SE_VIS_PREV:  
{"stackEffectId":20} 

 Player 1 20:18:38 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":161,"_text":"Remove After Resolve ActivatePassiveEffect 20  "}} 

 Player 1 20:18:38 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is about to buy Treasure Deck for 10"} 

 Player 1 20:18:38 $REMOVE_FROM_STACK:  
{"stackEffect":{"effectCollectedData":{"effectTargets":[314],"chainEffectsData":[],"methodArgs":[],"isPassive":true,"terminateOriginal":false,"effectCardOwner":314,"effectCardPlayer":314},"entityId":20,"creatorCardId":314,"hasLockingStackEffect":false,"cardActivatorId":1,"cardWithEffectId":148,"isAfterActivation":true,"index":12,"hasDataBeenCollectedYet":true,"stackEffectType":14}} 

 Player 1 20:18:38 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":162,"_text":"Response Remove After Resolve ActivatePassiveEffect 20"},"childOfId":161} 

 Player 1 20:18:38 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":163,"_text":"Wait For Response From Player 1 "},"childOfId":161} 

 Player 1 20:18:38 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 20:18:38 $ACTION_MASSAGE_REMOVE:  
{"id":163} 

 Player 1 20:18:38 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":164,"_text":"Wait For Response From Player 2 "},"childOfId":161} 

 Player 1 20:18:38 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 20:18:38 $GET_REACTION:  
{"playerId":2,"activePlayerId":1} 

 Player 2 20:18:38 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is about to buy Treasure Deck for 10 \n2:Activate Breakfast "} 

 Player 2 20:18:38 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is about to buy Treasure Deck for 10 \n2:Activate Breakfast "} 

 Player 2 20:18:38 $HIDE_REACTIONS:  
{"playerId":2,"cardsIds":[316]} 

 Player 2 20:18:38 $RESPOND_TO:  
{"playerId":1,"stackEffectResponse":false} 

 Player 1 20:18:38 $ACTION_MASSAGE_REMOVE:  
{"id":164} 

 Player 1 20:18:38 $ACTION_MASSAGE_REMOVE:  
{"id":162} 

 Player 1 20:18:38 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":165,"_text":"Resolve PurchaseItem 19 "}} 

 Player 1 20:18:38 $REMOVE_RESOLVING_STACK_EFFECT:  
{"stackEffectId":19} 

 Player 1 20:18:38 $SET_STACK_ICON:  
{"iconIndex":1} 

 Player 1 20:18:38 $SHOW_STACK_EFFECT:  
{"effectId":19} 

 Player 1 20:18:41 $REMOVE_SE_VIS_PREV:  
{"stackEffectId":19} 

 Player 1 20:18:41 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":166,"_text":"Remove After Resolve PurchaseItem 19  "}} 

 Player 1 20:18:41 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 20:18:41 $REMOVE_FROM_STACK:  
{"stackEffect":{"entityId":19,"creatorCardId":314,"itemToPurchaseCardId":142,"playerWhoBuysCardId":314,"cost":10,"stackEffectType":9}} 

 Player 1 20:18:41 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":167,"_text":"Response Remove After Resolve PurchaseItem 19"},"childOfId":166} 

 Player 1 20:18:41 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":168,"_text":"Wait For Response From Player 2 "},"childOfId":166} 

 Player 1 20:18:41 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 20:18:42 $GET_REACTION:  
{"playerId":2,"activePlayerId":1} 

 Player 2 20:18:42 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is about to buy Treasure Deck for 10"} 

 Player 2 20:18:42 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is about to buy Treasure Deck for 10"} 

 Player 2 20:18:42 $HIDE_REACTIONS:  
{"playerId":2,"cardsIds":[316]} 

 Player 2 20:18:42 $RESPOND_TO:  
{"playerId":1,"stackEffectResponse":false} 

 Player 1 20:18:42 $ACTION_MASSAGE_REMOVE:  
{"id":168} 

 Player 1 20:18:42 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":169,"_text":"Wait For Response From Player 1 "},"childOfId":166} 

 Player 1 20:18:42 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 20:18:42 $ACTION_MASSAGE_REMOVE:  
{"id":169} 

 Player 1 20:18:42 $ACTION_MASSAGE_REMOVE:  
{"id":167} 

 Player 1 20:18:42 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":170,"_text":"Stack Was Emptied "}} 

 Player 1 20:18:42 $CLEAR_SE_VIS:  

 Player 1 20:18:42 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 20:19:29 $NEXT_STACK_ID:  

 Player 1 20:19:29 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 20:19:29 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is about to buy Treasure Deck for 10"} 

 Player 1 20:19:29 $ADD_TO_STACK:  
{"stackEffect":{"entityId":21,"creatorCardId":314,"itemToPurchaseCardId":142,"playerWhoBuysCardId":314,"cost":10,"stackEffectType":9}} 

 Player 1 20:19:29 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is about to buy Treasure Deck for 10"} 

 Player 1 20:19:29 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":21,"creatorCardId":314,"itemToPurchaseCardId":142,"playerWhoBuysCardId":314,"cost":10,"stackEffectType":9}} 

 Player 1 20:19:29 $SET_STACK_ICON:  
{"iconIndex":0} 

 Player 1 20:19:29 $SHOW_STACK_EFFECT:  
{"effectId":21} 

 Player 2 20:19:29 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 20:19:29 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 20:19:29 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is about to buy Treasure Deck for 10"} 

 Player 2 20:19:30 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is about to buy Treasure Deck for 10"} 

 Player 1 20:19:32 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":171,"_text":"Add PurchaseItem 21 "}} 

 Player 1 20:19:32 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 20:19:32 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is about to buy Treasure Deck for 10"} 

 Player 1 20:19:32 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":21,"creatorCardId":314,"itemToPurchaseCardId":142,"playerWhoBuysCardId":314,"cost":10,"stackEffectType":9}} 

 Player 1 20:19:32 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":172,"_text":"Response Adding PurchaseItem 21"},"childOfId":171} 

 Player 1 20:19:32 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":173,"_text":"Wait For Response From Player 1 "},"childOfId":171} 

 Player 1 20:19:32 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 20:19:32 $ACTION_MASSAGE_REMOVE:  
{"id":173} 

 Player 1 20:19:32 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":174,"_text":"Wait For Response From Player 2 "},"childOfId":171} 

 Player 1 20:19:33 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 20:19:33 $GET_REACTION:  
{"playerId":2,"activePlayerId":1} 

 Player 2 20:19:33 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is about to buy Treasure Deck for 10"} 

 Player 2 20:19:33 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is about to buy Treasure Deck for 10"} 

 Player 2 20:19:33 $HIDE_REACTIONS:  
{"playerId":2,"cardsIds":[316]} 

 Player 2 20:19:33 $RESPOND_TO:  
{"playerId":1,"stackEffectResponse":false} 

 Player 1 20:19:33 $ACTION_MASSAGE_REMOVE:  
{"id":174} 

 Player 1 20:19:33 $ACTION_MASSAGE_REMOVE:  
{"id":172} 

 Player 1 20:19:33 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":175,"_text":"Resolve PurchaseItem 21 "}} 

 Player 1 20:19:33 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is about to buy Treasure Deck for 10"} 

 Player 1 20:19:33 $ADD_RESOLVING_STACK_EFFECT:  
{"stackEffect":{"entityId":21,"creatorCardId":314,"itemToPurchaseCardId":142,"playerWhoBuysCardId":314,"cost":10,"stackEffectType":9}} 

 Player 1 20:19:33 $REMOVE_RESOLVING_STACK_EFFECT:  
{"stackEffectId":21} 

 Player 1 20:19:33 $SET_STACK_ICON:  
{"iconIndex":1} 

 Player 1 20:19:33 $SHOW_STACK_EFFECT:  
{"effectId":21} 

 Player 2 20:19:33 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is about to buy Treasure Deck for 10"} 

 Player 2 20:19:33 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is about to buy Treasure Deck for 10"} 

 Player 1 20:19:36 $REMOVE_SE_VIS_PREV:  
{"stackEffectId":21} 

 Player 1 20:19:36 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":176,"_text":"Remove After Resolve PurchaseItem 21  "}} 

 Player 1 20:19:36 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 20:19:36 $REMOVE_FROM_STACK:  
{"stackEffect":{"entityId":21,"creatorCardId":314,"itemToPurchaseCardId":142,"playerWhoBuysCardId":314,"cost":10,"stackEffectType":9}} 

 Player 1 20:19:36 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":177,"_text":"Response Remove After Resolve PurchaseItem 21"},"childOfId":176} 

 Player 1 20:19:36 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":178,"_text":"Wait For Response From Player 2 "},"childOfId":176} 

 Player 1 20:19:36 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 20:19:36 $GET_REACTION:  
{"playerId":2,"activePlayerId":1} 

 Player 2 20:19:36 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is about to buy Treasure Deck for 10"} 

 Player 2 20:19:36 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is about to buy Treasure Deck for 10"} 

 Player 2 20:19:36 $HIDE_REACTIONS:  
{"playerId":2,"cardsIds":[316]} 

 Player 2 20:19:36 $RESPOND_TO:  
{"playerId":1,"stackEffectResponse":false} 

 Player 1 20:19:36 $ACTION_MASSAGE_REMOVE:  
{"id":178} 

 Player 1 20:19:36 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":179,"_text":"Wait For Response From Player 1 "},"childOfId":176} 

 Player 1 20:19:36 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 20:19:36 $ACTION_MASSAGE_REMOVE:  
{"id":179} 

 Player 1 20:19:36 $ACTION_MASSAGE_REMOVE:  
{"id":177} 

 Player 1 20:19:36 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":180,"_text":"Stack Was Emptied "}} 

 Player 1 20:19:36 $CLEAR_SE_VIS:  

 Player 1 20:19:36 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 20:22:03 $MATCH: 