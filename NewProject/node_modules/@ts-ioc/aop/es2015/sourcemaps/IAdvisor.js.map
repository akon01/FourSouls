{"version":3,"sources":["IAdvisor.ts"],"names":[],"mappings":";;AACA,uCAAwF;AAGxF;;;GAGG;AACU,QAAA,YAAY,GAAG,IAAI,kBAAW,CAAW,aAAa,CAAC,CAAC","file":"../IAdvisor.js","sourcesContent":["import { AdviceMetadata } from './metadatas';\r\nimport { Type, ObjectMap, InjectToken, IContainer, ParamProviders } from '@ts-ioc/core';\r\nimport { Advices } from './advices';\r\n\r\n/**\r\n * Aop IAdvisor interface token.\r\n * it is a token id, you can register yourself IAdvisor for this.\r\n */\r\nexport const AdvisorToken = new InjectToken<IAdvisor>('DI_IAdvisor');\r\n\r\n/**\r\n * aspect and advices manager.\r\n *\r\n * @export\r\n * @interface IAdvisor\r\n */\r\nexport interface IAdvisor {\r\n    /**\r\n     * aspects\r\n     *\r\n     * @type {Map<Type<any>, ObjectMap<AdviceMetadata[]>>}\r\n     * @memberof IAdvisor\r\n     */\r\n    aspects: Map<Type<any>, ObjectMap<AdviceMetadata[]>>;\r\n    /**\r\n     * advices\r\n     *\r\n     * @type {Map<string, Advices>}\r\n     * @memberof IAdvisor\r\n     */\r\n    advices: Map<string, Advices>;\r\n\r\n    /**\r\n     * has register advices or not.\r\n     *\r\n     * @param {Type<any>} targetType\r\n     * @returns {boolean}\r\n     * @memberof IAdvisor\r\n     */\r\n    hasRegisterAdvices(targetType: Type<any>): boolean;\r\n    /**\r\n     * set advices.\r\n     *\r\n     * @param {string} key\r\n     * @param {Advices} advices\r\n     * @memberof IAdvisor\r\n     */\r\n    setAdvices(key: string, advices: Advices);\r\n    /**\r\n     * get advices.\r\n     *\r\n     * @param {string} key\r\n     * @returns {Advices}\r\n     * @memberof IAdvisor\r\n     */\r\n    getAdvices(key: string): Advices;\r\n\r\n    /**\r\n     * add aspect.\r\n     *\r\n     * @param {Type<any>} aspect\r\n     * @param {IContainer} raiseContainer\r\n     * @memberof IAdvisor\r\n     */\r\n    add(aspect: Type<any>, raiseContainer: IContainer);\r\n\r\n    /**\r\n     * get aspect registered container.\r\n     *\r\n     * @param {Type<any>} aspect\r\n     * @param {IContainer} [defaultContainer]\r\n     * @returns {IContainer}\r\n     * @memberof IAdvisor\r\n     */\r\n    getContainer(aspect: Type<any>, defaultContainer?: IContainer): IContainer;\r\n\r\n    /**\r\n     * resolve aspect.\r\n     *\r\n     * @template T\r\n     * @param {Type<T>} aspect\r\n     * @param {...ParamProviders[]} providers\r\n     * @returns {T}\r\n     * @memberof IAdvisor\r\n     */\r\n    resolve<T>(aspect: Type<T>, ...providers: ParamProviders[]): T;\r\n}\r\n"]}