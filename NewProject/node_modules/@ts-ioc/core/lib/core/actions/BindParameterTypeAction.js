"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var ActionComposite_1 = require("./ActionComposite");
var CoreActions_1 = require("./CoreActions");
var factories_1 = require("../factories");
var utils_1 = require("../../utils");
/**
 * bind parameter type action.
 *
 * @export
 * @class BindParameterTypeAction
 * @extends {ActionComposite}
 */
var BindParameterTypeAction = /** @class */ (function (_super) {
    tslib_1.__extends(BindParameterTypeAction, _super);
    function BindParameterTypeAction() {
        return _super.call(this, CoreActions_1.CoreActions.bindParameterType) || this;
    }
    BindParameterTypeAction.prototype.working = function (container, data) {
        if (data.raiseContainer && data.raiseContainer !== container) {
            return;
        }
        var target = data.target;
        var type = data.targetType;
        var propertyKey = data.propertyKey;
        var lifeScope = container.getLifeScope();
        var designParams;
        if (target && propertyKey) {
            designParams = Reflect.getMetadata('design:paramtypes', target, propertyKey) || [];
        }
        else {
            designParams = Reflect.getMetadata('design:paramtypes', type) || [];
        }
        designParams = designParams.slice(0);
        designParams.forEach(function (dtype) {
            if (lifeScope.isVaildDependence(dtype)) {
                if (!container.has(dtype)) {
                    container.register(dtype);
                }
            }
        });
        var matchs = lifeScope.getParameterDecorators(target || type, propertyKey, function (surm) { return surm.actions.includes(CoreActions_1.CoreActions.bindParameterType); });
        matchs.forEach(function (surm) {
            var parameters = (target || propertyKey !== 'constructor') ? factories_1.getParamMetadata(surm.name, target, propertyKey) : factories_1.getOwnParamMetadata(surm.name, type);
            if (utils_1.isArray(parameters) && parameters.length) {
                parameters.forEach(function (params) {
                    var parm = (utils_1.isArray(params) && params.length > 0) ? params[0] : null;
                    if (parm && parm.index >= 0) {
                        if (lifeScope.isVaildDependence(parm.provider)) {
                            if (!container.has(parm.provider, parm.alias)) {
                                container.register(container.getToken(parm.provider, parm.alias));
                            }
                        }
                        if (lifeScope.isVaildDependence(parm.type)) {
                            if (!container.has(parm.type)) {
                                container.register(parm.type);
                            }
                        }
                        var token = parm.provider ? container.getTokenKey(parm.provider, parm.alias) : parm.type;
                        if (token) {
                            designParams[parm.index] = token;
                        }
                    }
                });
            }
        });
        data.execResult = designParams;
    };
    BindParameterTypeAction.getClassAnnations = function () {
        return { "name": "BindParameterTypeAction", "params": { "constructor": [], "working": ["container", "data"] } };
    };
    return BindParameterTypeAction;
}(ActionComposite_1.ActionComposite));
exports.BindParameterTypeAction = BindParameterTypeAction;

//# sourceMappingURL=../../sourcemaps/core/actions/BindParameterTypeAction.js.map
