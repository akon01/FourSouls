Start Log 

 Player 1 15:23:44 $MATCH:  

 Player 1 15:23:45 $START_GAME:  

 Player 1 15:23:45 $MOVE_TO_TABLE:  

 Player 2 15:23:45 $MOVE_TO_TABLE:  

 Player 1 15:23:58 $FINISH_LOAD:  
{"id":1,"turnPlayerId":2} 

 Player 2 15:23:58 $FINISH_LOAD:  
{"id":2,"turnPlayerId":2} 

 Player 2 15:23:58 $ASSIGN_CHAR_TO_PLAYER:  
{"playerId":1,"charCardId":282,"itemCardId":285} 

 Player 2 15:23:58 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"PLAYER_ADD_ITEM","args":[{"type":0,"number":287}],"result":true,"preventMethod":false,"methodScopeId":286,"scopeIsPlayer":true,"index":1,"originStackId":-1},"isAfterActivation":true,"index":1} 

 Player 2 15:23:58 $ASSIGN_CHAR_TO_PLAYER:  
{"playerId":2,"charCardId":286,"itemCardId":287} 

 Player 2 15:23:58 $DECK_ARRAGMENT:  
{"deckType":1,"arrangement":[103,84,41,120,43,24,58,92,91,28,33,27,117,102,90,121,77,132,10,13,72,122,124,52,73,12,95,38,15,61,29,19,139,141,36,59,115,116,113,44,51,32,64,14,26,47,49,42,100,125,89,63,62,23,50,108,128,8,101,68,109,82,34,7,66,70,99,37,75,55,131,126,78,76,104,110,25,111,85,56,39,136,133,97,22,35,114,67,129,45,71,74,54,11,18,105,106,130,80,135,107,98,94,123,46,53,48,138,127,17,86,140,142,69,40,60,93,20,21,88,96,79,83,30,112,9,87,57,119,16,81,137,31,118,134,65]} 

 Player 2 15:23:58 $DECK_ARRAGMENT:  
{"deckType":2,"arrangement":[248,275,246,277,226,238,232,242,241,233,259,260,236,235,251,234,253,229,256,271,274,263,258,270,262,228,257,254,231,252,255,273,264,249,247,240,261,267,266,230,269,276,265,237,227,244,245,250,224,272,268,225,243,239]} 

 Player 2 15:23:58 $DECK_ARRAGMENT:  
{"deckType":5,"arrangement":[171,185,205,204,167,187,210,164,184,148,160,216,203,181,189,209,218,186,159,163,221,207,168,178,158,149,200,195,176,219,179,166,196,217,215,150,201,152,188,177,220,154,193,213,212,194,157,191,192,162,198,175,174,146,151,214,172,153,170,190,208,169,156,211,202,182,161,165,206,183,155,173,147,197,199,145,180]} 

 Player 2 15:23:58 $DRAW_CARD:  
{"deckType":5} 

 Player 2 15:23:58 $FLIP_CARD:  
{"cardId":180} 

 Player 2 15:23:58 $ADD_STORE_CARD:  
{"cardId":180} 

 Player 2 15:23:58 $DRAW_CARD:  
{"deckType":5} 

 Player 2 15:23:58 $FLIP_CARD:  
{"cardId":145} 

 Player 2 15:23:58 $ADD_STORE_CARD:  
{"cardId":145} 

 Player 2 15:23:58 $DRAW_CARD:  
{"deckType":2} 

 Player 2 15:23:58 $FLIP_CARD:  
{"cardId":239} 

 Player 2 15:23:58 $REGISTER_PASSIVE_ITEM:  
{"cardId":239} 

 Player 2 15:23:58 $ADD_MONSTER:  
{"monsterPlaceId":1,"monsterId":239} 

 Player 2 15:23:59 $NEW_MONSTER_ON_PLACE:  
{"cardId":239,"monsterPlaceId":1} 

 Player 2 15:23:59 $DRAW_CARD:  
{"deckType":2} 

 Player 2 15:23:59 $FLIP_CARD:  
{"cardId":243} 

 Player 2 15:23:59 $REGISTER_PASSIVE_ITEM:  
{"cardId":243} 

 Player 2 15:23:59 $ADD_MONSTER:  
{"monsterPlaceId":2,"monsterId":243} 

 Player 2 15:23:59 $NEW_MONSTER_ON_PLACE:  
{"cardId":243,"monsterPlaceId":2} 

 Player 2 15:23:59 $SET_MONEY:  
{"playerId":1,"numOfCoins":3} 

 Player 2 15:23:59 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"PLAYER_CHANGE_MONEY","args":[{"type":2,"number":3}],"result":null,"preventMethod":false,"methodScopeId":282,"scopeIsPlayer":true,"index":2,"originStackId":-1},"isAfterActivation":true,"index":2} 

 Player 2 15:23:59 $DRAW_CARD:  
{"deckType":1} 

 Player 2 15:23:59 $MOVE_CARD:  
{"moveIndex":1,"cardId":65,"placeID":1,"flipIfFlipped":false,"firstPos":{"x":1,"y":-5,"z":0},"playerId":2,"placeType":"Hand"} 

 Player 1 15:23:59 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"PLAYER_ADD_ITEM","args":[{"type":0,"number":285}],"result":true,"preventMethod":false,"methodScopeId":282,"scopeIsPlayer":true,"index":1,"originStackId":-1},"isAfterActivation":true,"index":1} 

 Player 1 15:23:59 $MOVE_CARD_END:  
{"moveIndex":1,"cardId":65,"flipIfFlipped":false,"playerId":2} 

 Player 2 15:23:59 $CARD_DRAWN:  
{"playerId":1,"deckType":1,"drawnCardId":65} 

 Player 2 15:23:59 $FLIP_CARD:  
{"cardId":65} 

 Player 2 15:23:59 $FLIP_CARD:  
{"cardId":65} 

 Player 2 15:23:59 $PLAYER_GET_LOOT:  
{"playerId":1,"cardId":65} 

 Player 2 15:23:59 $DRAW_CARD:  
{"deckType":1} 

 Player 2 15:23:59 $MOVE_CARD:  
{"moveIndex":2,"cardId":134,"placeID":1,"flipIfFlipped":false,"firstPos":{"x":1,"y":-5,"z":0},"playerId":2,"placeType":"Hand"} 

 Player 1 15:24:00 $MOVE_CARD_END:  
{"moveIndex":2,"cardId":134,"flipIfFlipped":false,"playerId":2} 

 Player 2 15:24:00 $CARD_DRAWN:  
{"playerId":1,"deckType":1,"drawnCardId":134} 

 Player 2 15:24:00 $FLIP_CARD:  
{"cardId":134} 

 Player 2 15:24:00 $FLIP_CARD:  
{"cardId":134} 

 Player 2 15:24:00 $PLAYER_GET_LOOT:  
{"playerId":1,"cardId":134} 

 Player 2 15:24:00 $DRAW_CARD:  
{"deckType":1} 

 Player 2 15:24:00 $MOVE_CARD:  
{"moveIndex":3,"cardId":118,"placeID":1,"flipIfFlipped":false,"firstPos":{"x":1,"y":-5,"z":0},"playerId":2,"placeType":"Hand"} 

 Player 1 15:24:00 $MOVE_CARD_END:  
{"moveIndex":3,"cardId":118,"flipIfFlipped":false,"playerId":2} 

 Player 2 15:24:00 $CARD_DRAWN:  
{"playerId":1,"deckType":1,"drawnCardId":118} 

 Player 2 15:24:00 $FLIP_CARD:  
{"cardId":118} 

 Player 2 15:24:00 $FLIP_CARD:  
{"cardId":118} 

 Player 2 15:24:00 $PLAYER_GET_LOOT:  
{"playerId":1,"cardId":118} 

 Player 2 15:24:00 $SET_MONEY:  
{"playerId":2,"numOfCoins":3} 

 Player 2 15:24:00 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"PLAYER_CHANGE_MONEY","args":[{"type":2,"number":3}],"result":null,"preventMethod":false,"methodScopeId":286,"scopeIsPlayer":true,"index":3,"originStackId":-1},"isAfterActivation":true,"index":3} 

 Player 2 15:24:00 $DRAW_CARD:  
{"deckType":1} 

 Player 2 15:24:01 $MOVE_CARD:  
{"moveIndex":4,"cardId":31,"placeID":2,"flipIfFlipped":false,"firstPos":{"x":1,"y":-5,"z":0},"playerId":2,"placeType":"Hand"} 

 Player 1 15:24:01 $MOVE_CARD_END:  
{"moveIndex":4,"cardId":31,"flipIfFlipped":false,"playerId":2} 

 Player 2 15:24:01 $CARD_DRAWN:  
{"playerId":2,"deckType":1,"drawnCardId":31} 

 Player 2 15:24:01 $FLIP_CARD:  
{"cardId":31} 

 Player 2 15:24:01 $PLAYER_GET_LOOT:  
{"playerId":2,"cardId":31} 

 Player 2 15:24:01 $DRAW_CARD:  
{"deckType":1} 

 Player 2 15:24:01 $MOVE_CARD:  
{"moveIndex":5,"cardId":137,"placeID":2,"flipIfFlipped":false,"firstPos":{"x":1,"y":-5,"z":0},"playerId":2,"placeType":"Hand"} 

 Player 1 15:24:01 $MOVE_CARD_END:  
{"moveIndex":5,"cardId":137,"flipIfFlipped":false,"playerId":2} 

 Player 2 15:24:01 $CARD_DRAWN:  
{"playerId":2,"deckType":1,"drawnCardId":137} 

 Player 2 15:24:01 $FLIP_CARD:  
{"cardId":137} 

 Player 2 15:24:01 $PLAYER_GET_LOOT:  
{"playerId":2,"cardId":137} 

 Player 2 15:24:01 $DRAW_CARD:  
{"deckType":1} 

 Player 2 15:24:02 $MOVE_CARD:  
{"moveIndex":6,"cardId":81,"placeID":2,"flipIfFlipped":false,"firstPos":{"x":1,"y":-5,"z":0},"playerId":2,"placeType":"Hand"} 

 Player 1 15:24:02 $MOVE_CARD_END:  
{"moveIndex":6,"cardId":81,"flipIfFlipped":false,"playerId":2} 

 Player 2 15:24:02 $CARD_DRAWN:  
{"playerId":2,"deckType":1,"drawnCardId":81} 

 Player 2 15:24:02 $FLIP_CARD:  
{"cardId":81} 

 Player 2 15:24:02 $PLAYER_GET_LOOT:  
{"playerId":2,"cardId":81} 

 Player 2 15:24:02 $GAME_HAS_STARTED:  

 Player 2 15:24:02 $SET_TURN:  
{"playerId":1} 

 Player 2 15:24:02 $START_TURN:  
{"playerId":1} 

 Player 2 15:24:02 $UPDATE_ACTIONS:  

 Player 1 15:24:02 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 15:24:02 $NEXT_STACK_ID:  

 Player 1 15:24:02 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 15:24:02 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 start turn loot"} 

 Player 1 15:24:02 $ADD_TO_STACK:  
{"stackEffect":{"entityId":1,"creatorCardId":282,"turnPlayerCardId":282,"stackEffectType":13}} 

 Player 1 15:24:02 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 start turn loot"} 

 Player 1 15:24:02 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":1,"creatorCardId":282,"turnPlayerCardId":282,"stackEffectType":13}} 

 Player 1 15:24:02 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":0,"_text":"Add StartTurnLoot 1 "}} 

 Player 1 15:24:02 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 15:24:02 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 start turn loot"} 

 Player 1 15:24:02 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":1,"creatorCardId":282,"turnPlayerCardId":282,"stackEffectType":13}} 

 Player 1 15:24:02 $ACTION_MASSAGE_REMOVE:  
{"id":0} 

 Player 1 15:24:02 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":1,"_text":"Response Adding StartTurnLoot 1"},"childOfId":0} 

 Player 1 15:24:02 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":2,"_text":"Wait For Response From Player 1 "},"childOfId":0} 

 Player 1 15:24:03 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 15:24:03 $ACTION_MASSAGE_REMOVE:  
{"id":2} 

 Player 1 15:24:03 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":3,"_text":"Wait For Response From Player 2 "},"childOfId":0} 

 Player 1 15:24:03 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 15:24:03 $GET_REACTION:  
{"playerId":2,"activePlayerId":1} 

 Player 2 15:24:03 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 15:24:03 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 15:24:03 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 start turn loot"} 

 Player 2 15:24:03 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 start turn loot"} 

 Player 2 15:24:03 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 start turn loot"} 

 Player 2 15:24:03 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 start turn loot"} 

 Player 2 15:24:03 $RESPOND_TO:  
{"playerId":1,"stackEffectResponse":false} 

 Player 1 15:24:03 $ACTION_MASSAGE_REMOVE:  
{"id":3} 

 Player 1 15:24:03 $ACTION_MASSAGE_REMOVE:  
{"id":1} 

 Player 1 15:24:03 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":4,"_text":"Resolve StartTurnLoot 1 "}} 

 Player 1 15:24:03 $DRAW_CARD:  
{"deckType":1} 

 Player 1 15:24:03 $MOVE_CARD:  
{"moveIndex":7,"cardId":16,"placeID":1,"flipIfFlipped":false,"firstPos":{"x":1,"y":-5,"z":0},"playerId":1,"placeType":"Hand"} 

 Player 2 15:24:03 $MOVE_CARD_END:  
{"moveIndex":7,"cardId":16,"flipIfFlipped":false,"playerId":1} 

 Player 1 15:24:03 $CARD_DRAWN:  
{"playerId":1,"deckType":1,"drawnCardId":16} 

 Player 1 15:24:03 $FLIP_CARD:  
{"cardId":16} 

 Player 1 15:24:03 $PLAYER_GET_LOOT:  
{"playerId":1,"cardId":16} 

 Player 1 15:24:03 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 start turn loot"} 

 Player 1 15:24:03 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":1,"creatorCardId":282,"turnPlayerCardId":282,"stackEffectType":13}} 

 Player 1 15:24:03 $ACTION_MASSAGE_REMOVE:  
{"id":4} 

 Player 1 15:24:03 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 15:24:03 $REMOVE_SE_VIS_PREV:  
{"stackEffect":{"entityId":1,"creatorCardId":282,"turnPlayerCardId":282,"stackEffectType":13}} 

 Player 1 15:24:04 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":5,"_text":"Remove After Resolve StartTurnLoot 1  "}} 

 Player 1 15:24:04 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 15:24:04 $REMOVE_FROM_STACK:  
{"stackEffect":{"entityId":1,"creatorCardId":282,"turnPlayerCardId":282,"stackEffectType":13}} 

 Player 1 15:24:04 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":6,"_text":"Response Remove After Resolve StartTurnLoot 1"},"childOfId":5} 

 Player 1 15:24:04 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":7,"_text":"Wait For Response From Player 2 "},"childOfId":5} 

 Player 1 15:24:04 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 15:24:04 $GET_REACTION:  
{"playerId":2,"activePlayerId":1} 

 Player 2 15:24:04 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 start turn loot"} 

 Player 2 15:24:04 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 start turn loot"} 

 Player 2 15:24:04 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 start turn loot"} 

 Player 2 15:24:04 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 start turn loot"} 

 Player 2 15:24:04 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 start turn loot"} 

 Player 2 15:24:04 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 start turn loot"} 

 Player 2 15:24:04 $RESPOND_TO:  
{"playerId":1,"stackEffectResponse":false} 

 Player 1 15:24:04 $ACTION_MASSAGE_REMOVE:  
{"id":7} 

 Player 1 15:24:04 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":8,"_text":"Wait For Response From Player 1 "},"childOfId":5} 

 Player 1 15:24:04 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 15:24:04 $ACTION_MASSAGE_REMOVE:  
{"id":8} 

 Player 1 15:24:04 $ACTION_MASSAGE_REMOVE:  
{"id":6} 

 Player 1 15:24:04 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":9,"_text":"Stack Was Emptied "}} 

 Player 1 15:24:04 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 15:24:04 $ACTION_MASSAGE_REMOVE:  
{"id":0} 

 Player 1 15:24:04 $ACTION_MASSAGE_REMOVE:  
{"id":1} 

 Player 1 15:24:04 $ACTION_MASSAGE_REMOVE:  
{"id":2} 

 Player 1 15:24:04 $ACTION_MASSAGE_REMOVE:  
{"id":3} 

 Player 1 15:24:04 $ACTION_MASSAGE_REMOVE:  
{"id":4} 

 Player 1 15:24:04 $ACTION_MASSAGE_REMOVE:  
{"id":5} 

 Player 1 15:24:04 $ACTION_MASSAGE_REMOVE:  
{"id":9} 

 Player 1 15:24:05 $ACTION_MASSAGE_REMOVE:  
{"id":9} 

 Player 1 15:24:05 $MOVE_CARD:  
{"moveIndex":8,"cardId":164,"placeID":1,"flipIfFlipped":true,"playerId":1,"placeType":"Hand"} 

 Player 2 15:24:06 $MOVE_CARD_END:  
{"moveIndex":8,"cardId":164,"flipIfFlipped":true,"playerId":1} 

 Player 1 15:24:06 $REGISTER_PASSIVE_ITEM:  
{"cardId":164} 

 Player 1 15:24:06 $MOVE_CARD:  
{"moveIndex":9,"cardId":164,"placeID":1,"flipIfFlipped":true,"playerId":1,"placeType":"Desk"} 

 Player 2 15:24:06 $MOVE_CARD_END:  
{"moveIndex":9,"cardId":164,"flipIfFlipped":true,"playerId":1} 

 Player 1 15:24:06 $ADD_AN_ITEM:  
{"playerId":1,"cardId":164,"isReward":true} 

 Player 1 15:24:06 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"PLAYER_ADD_ITEM","args":[{"type":0,"number":164}],"result":true,"preventMethod":false,"methodScopeId":282,"scopeIsPlayer":true,"index":2,"originStackId":-1},"isAfterActivation":true,"index":2} 

 Player 1 15:24:06 $ACTION_MASSAGE_REMOVE:  
{"id":5} 

 Player 1 15:24:11 $SHOW_DECISION:  
{"startCardId":282,"endCardId":243} 

 Player 1 15:24:15 $NEXT_STACK_ID:  

 Player 1 15:24:15 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 15:24:15 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1  declared attack on Fistula"} 

 Player 1 15:24:15 $ADD_TO_STACK:  
{"stackEffect":{"entityId":2,"creatorCardId":282,"attackingPlayerCardId":282,"idOfCardBeingAttacked":243,"stackEffectType":4}} 

 Player 1 15:24:15 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1  declared attack on Fistula"} 

 Player 1 15:24:15 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":2,"creatorCardId":282,"attackingPlayerCardId":282,"idOfCardBeingAttacked":243,"stackEffectType":4}} 

 Player 1 15:24:15 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":10,"_text":"Add DeclareAttack 2 "}} 

 Player 1 15:24:15 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 15:24:15 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1  declared attack on Fistula"} 

 Player 1 15:24:15 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":2,"creatorCardId":282,"attackingPlayerCardId":282,"idOfCardBeingAttacked":243,"stackEffectType":4}} 

 Player 1 15:24:15 $ACTION_MASSAGE_REMOVE:  
{"id":10} 

 Player 1 15:24:15 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":11,"_text":"Response Adding DeclareAttack 2"},"childOfId":10} 

 Player 1 15:24:15 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":12,"_text":"Wait For Response From Player 1 "},"childOfId":10} 

 Player 1 15:24:15 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 15:24:15 $ACTION_MASSAGE_REMOVE:  
{"id":12} 

 Player 1 15:24:15 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":13,"_text":"Wait For Response From Player 2 "},"childOfId":10} 

 Player 1 15:24:15 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 15:24:15 $GET_REACTION:  
{"playerId":2,"activePlayerId":1} 

 Player 2 15:24:15 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 15:24:15 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 15:24:15 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1  declared attack on Fistula"} 

 Player 2 15:24:15 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1  declared attack on Fistula"} 

 Player 2 15:24:15 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1  declared attack on Fistula"} 

 Player 2 15:24:15 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1  declared attack on Fistula"} 

 Player 2 15:24:15 $RESPOND_TO:  
{"playerId":1,"stackEffectResponse":false} 

 Player 1 15:24:15 $ACTION_MASSAGE_REMOVE:  
{"id":13} 

 Player 1 15:24:15 $ACTION_MASSAGE_REMOVE:  
{"id":11} 

 Player 1 15:24:15 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":14,"_text":"Resolve DeclareAttack 2 "}} 

 Player 1 15:24:15 $ACTIVATE_PARTICLE_EFFECT:  
{"cardId":243,"particleType":5} 

 Player 1 15:24:15 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"PLAYER_DECLARE_ATTACK","args":[],"result":null,"preventMethod":false,"methodScopeId":282,"scopeIsPlayer":true,"index":3,"originStackId":2},"isAfterActivation":true,"index":3} 

 Player 1 15:24:15 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1  declared attack on Fistula"} 

 Player 1 15:24:15 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":2,"creatorCardId":282,"attackingPlayerCardId":282,"idOfCardBeingAttacked":243,"stackEffectType":4}} 

 Player 1 15:24:15 $ACTION_MASSAGE_REMOVE:  
{"id":14} 

 Player 1 15:24:15 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 15:24:15 $REMOVE_SE_VIS_PREV:  
{"stackEffect":{"entityId":2,"creatorCardId":282,"attackingPlayerCardId":282,"idOfCardBeingAttacked":243,"stackEffectType":4}} 

 Player 1 15:24:16 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":15,"_text":"Remove After Resolve DeclareAttack 2  "}} 

 Player 1 15:24:16 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 15:24:16 $REMOVE_FROM_STACK:  
{"stackEffect":{"entityId":2,"creatorCardId":282,"attackingPlayerCardId":282,"idOfCardBeingAttacked":243,"stackEffectType":4}} 

 Player 1 15:24:16 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":16,"_text":"Response Remove After Resolve DeclareAttack 2"},"childOfId":15} 

 Player 1 15:24:16 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":17,"_text":"Wait For Response From Player 2 "},"childOfId":15} 

 Player 1 15:24:16 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 15:24:16 $GET_REACTION:  
{"playerId":2,"activePlayerId":1} 

 Player 2 15:24:16 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1  declared attack on Fistula"} 

 Player 2 15:24:16 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1  declared attack on Fistula"} 

 Player 2 15:24:16 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1  declared attack on Fistula"} 

 Player 2 15:24:16 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1  declared attack on Fistula"} 

 Player 2 15:24:16 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1  declared attack on Fistula"} 

 Player 2 15:24:16 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1  declared attack on Fistula"} 

 Player 2 15:24:16 $RESPOND_TO:  
{"playerId":1,"stackEffectResponse":false} 

 Player 1 15:24:16 $ACTION_MASSAGE_REMOVE:  
{"id":17} 

 Player 1 15:24:16 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":18,"_text":"Wait For Response From Player 1 "},"childOfId":15} 

 Player 1 15:24:16 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 15:24:16 $ACTION_MASSAGE_REMOVE:  
{"id":18} 

 Player 1 15:24:16 $ACTION_MASSAGE_REMOVE:  
{"id":16} 

 Player 1 15:24:16 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":19,"_text":"Stack Was Emptied "}} 

 Player 1 15:24:16 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 15:24:16 $ACTION_MASSAGE_REMOVE:  
{"id":0} 

 Player 1 15:24:16 $ACTION_MASSAGE_REMOVE:  
{"id":1} 

 Player 1 15:24:16 $ACTION_MASSAGE_REMOVE:  
{"id":2} 

 Player 1 15:24:16 $ACTION_MASSAGE_REMOVE:  
{"id":3} 

 Player 1 15:24:16 $ACTION_MASSAGE_REMOVE:  
{"id":4} 

 Player 1 15:24:16 $ACTION_MASSAGE_REMOVE:  
{"id":5} 

 Player 1 15:24:16 $ACTION_MASSAGE_REMOVE:  
{"id":9} 

 Player 1 15:24:16 $ACTION_MASSAGE_REMOVE:  
{"id":10} 

 Player 1 15:24:16 $ACTION_MASSAGE_REMOVE:  
{"id":14} 

 Player 1 15:24:16 $ACTION_MASSAGE_REMOVE:  
{"id":15} 

 Player 1 15:24:17 $ACTION_MASSAGE_REMOVE:  
{"id":19} 

 Player 1 15:24:18 $ACTION_MASSAGE_REMOVE:  
{"id":19} 

 Player 1 15:24:18 $ACTION_MASSAGE_REMOVE:  
{"id":15} 

 Player 1 15:24:18 $NEXT_STACK_ID:  

 Player 1 15:24:19 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 15:24:19 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against Fistula<Monster>"} 

 Player 1 15:24:19 $ADD_TO_STACK:  
{"stackEffect":{"entityId":3,"creatorCardId":282,"rollingPlayerCardId":282,"stackEffectType":2,"attackedMonsterCardId":243}} 

 Player 1 15:24:19 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against Fistula<Monster>"} 

 Player 1 15:24:19 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":3,"creatorCardId":282,"rollingPlayerCardId":282,"stackEffectType":2,"attackedMonsterCardId":243}} 

 Player 1 15:24:19 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":20,"_text":"Add AttackRoll 3 "}} 

 Player 1 15:24:19 $ROLL_DICE:  
{"playerId":1} 

 Player 2 15:24:19 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 15:24:19 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 15:24:19 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against Fistula<Monster>"} 

 Player 2 15:24:19 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against Fistula<Monster>"} 

 Player 1 15:24:21 $ROLL_DICE_ENDED:  
{"playerId":1,"numberRolled":3} 

 Player 1 15:24:21 $UPDATE_STACK_VIS:  
{"stackId":3,"text":"player rolled 3 vs Fistula<Monster>"} 

 Player 1 15:24:21 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 rolled 3 vs Fistula<Monster>"} 

 Player 1 15:24:21 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 15:24:21 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 rolled 3 vs Fistula<Monster>"} 

 Player 1 15:24:21 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":3,"creatorCardId":282,"numberRolled":3,"rollingPlayerCardId":282,"stackEffectType":2,"attackedMonsterCardId":243}} 

 Player 1 15:24:21 $ACTION_MASSAGE_REMOVE:  
{"id":20} 

 Player 1 15:24:21 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":21,"_text":"Response Adding AttackRoll 3"},"childOfId":20} 

 Player 1 15:24:21 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":22,"_text":"Wait For Response From Player 1 "},"childOfId":20} 

 Player 1 15:24:21 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 15:24:21 $ACTION_MASSAGE_REMOVE:  
{"id":22} 

 Player 1 15:24:21 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":23,"_text":"Wait For Response From Player 2 "},"childOfId":20} 

 Player 1 15:24:21 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 15:24:21 $GET_REACTION:  
{"playerId":2,"activePlayerId":1} 

 Player 2 15:24:21 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against Fistula<Monster>"} 

 Player 2 15:24:21 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against Fistula<Monster>"} 

 Player 2 15:24:21 $RESPOND_TO:  
{"playerId":1,"stackEffectResponse":false} 

 Player 1 15:24:21 $ACTION_MASSAGE_REMOVE:  
{"id":23} 

 Player 1 15:24:21 $ACTION_MASSAGE_REMOVE:  
{"id":21} 

 Player 1 15:24:21 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":24,"_text":"Resolve AttackRoll 3 "}} 

 Player 1 15:24:22 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":25,"_text":"Added 0 to original roll"}} 

 Player 1 15:24:22 $NEXT_STACK_ID:  

 Player 1 15:24:22 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 rolled 3 vs Fistula<Monster>"} 

 Player 1 15:24:22 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 15:24:22 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula \n2:Player 1 rolled 3 vs Fistula<Monster>"} 

 Player 1 15:24:22 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":4,"creatorCardId":282,"entityToDoDamageCardId":282,"entityToTakeDamageCardId":243,"isMonsterDoDamage":false,"isMonsterTakeDamage":true,"isPlayerDoDamage":false,"stackEffectType":3}} 

 Player 1 15:24:22 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula \n2:Player 1 rolled 3 vs Fistula<Monster>"} 

 Player 1 15:24:22 $REMOVE_SE_VIS_PREV:  
{"stackEffect":{"entityId":3,"creatorCardId":282,"numberRolled":3,"rollingPlayerCardId":282,"stackEffectType":2,"attackedMonsterCardId":243}} 

 Player 1 15:24:22 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula \n2:Player 1 rolled 3 vs Fistula<Monster>"} 

 Player 1 15:24:22 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":4,"creatorCardId":282,"entityToDoDamageCardId":282,"entityToTakeDamageCardId":243,"isMonsterDoDamage":false,"isMonsterTakeDamage":true,"isPlayerDoDamage":false,"stackEffectType":3}} 

 Player 1 15:24:22 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula \n2:Player 1 rolled 3 vs Fistula<Monster>"} 

 Player 1 15:24:22 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":3,"creatorCardId":282,"numberRolled":3,"rollingPlayerCardId":282,"stackEffectType":2,"attackedMonsterCardId":243}} 

 Player 1 15:24:22 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula \n2:Player 1 rolled 3 vs Fistula<Monster>"} 

 Player 1 15:24:22 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula \n2:Player 1 rolled 3 vs Fistula<Monster>"} 

 Player 1 15:24:22 $REPLACE_STACK:  
{"currentStack":[{"entityId":4,"creatorCardId":282,"entityToDoDamageCardId":282,"entityToTakeDamageCardId":243,"isMonsterDoDamage":false,"isMonsterTakeDamage":true,"isPlayerDoDamage":false,"stackEffectType":3},{"entityId":3,"creatorCardId":282,"numberRolled":3,"rollingPlayerCardId":282,"stackEffectType":2,"attackedMonsterCardId":243}]} 

 Player 1 15:24:22 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"PLAYER_ROLL_DICE","args":[{"type":2,"number":4},{"type":2,"number":2},{"type":2,"number":2}],"result":null,"preventMethod":false,"methodScopeId":282,"scopeIsPlayer":true,"index":4,"originStackId":3},"isAfterActivation":true,"index":4} 

 Player 1 15:24:22 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula \n2:Player 1 rolled 3 vs Fistula<Monster>"} 

 Player 1 15:24:22 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":3,"creatorCardId":282,"numberRolled":3,"rollingPlayerCardId":282,"stackEffectType":2,"attackedMonsterCardId":243}} 

 Player 1 15:24:22 $ACTION_MASSAGE_REMOVE:  
{"id":24} 

 Player 1 15:24:22 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula"} 

 Player 1 15:24:22 $REMOVE_SE_VIS_PREV:  
{"stackEffect":{"entityId":3,"creatorCardId":282,"numberRolled":3,"rollingPlayerCardId":282,"stackEffectType":2,"attackedMonsterCardId":243}} 

 Player 1 15:24:22 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":26,"_text":"Remove After Resolve AttackRoll 3  "}} 

 Player 1 15:24:22 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula"} 

 Player 1 15:24:22 $REMOVE_FROM_STACK:  
{"stackEffect":{"entityId":3,"creatorCardId":282,"numberRolled":3,"rollingPlayerCardId":282,"stackEffectType":2,"attackedMonsterCardId":243}} 

 Player 1 15:24:22 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":27,"_text":"Response Remove After Resolve AttackRoll 3"},"childOfId":26} 

 Player 1 15:24:22 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":28,"_text":"Wait For Response From Player 1 "},"childOfId":26} 

 Player 1 15:24:22 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 15:24:22 $ACTION_MASSAGE_REMOVE:  
{"id":28} 

 Player 1 15:24:22 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":29,"_text":"Wait For Response From Player 2 "},"childOfId":26} 

 Player 1 15:24:22 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 15:24:22 $GET_REACTION:  
{"playerId":2,"activePlayerId":1} 

 Player 2 15:24:22 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against Fistula<Monster>"} 

 Player 2 15:24:22 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against Fistula<Monster>"} 

 Player 2 15:24:22 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula"} 

 Player 2 15:24:22 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula"} 

 Player 2 15:24:22 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula"} 

 Player 2 15:24:23 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula"} 

 Player 2 15:24:23 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula"} 

 Player 2 15:24:23 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula"} 

 Player 2 15:24:23 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula"} 

 Player 2 15:24:23 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula"} 

 Player 2 15:24:23 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula"} 

 Player 2 15:24:23 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula"} 

 Player 2 15:24:23 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula \n2:Player 1 is rolling against Fistula<Monster>"} 

 Player 2 15:24:23 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula \n2:Player 1 is rolling against Fistula<Monster>"} 

 Player 2 15:24:23 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula \n2:Player 1 is rolling against Fistula<Monster>"} 

 Player 2 15:24:23 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula \n2:Player 1 is rolling against Fistula<Monster>"} 

 Player 2 15:24:23 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula \n2:Player 1 is rolling against Fistula<Monster>"} 

 Player 2 15:24:23 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula \n2:Player 1 is rolling against Fistula<Monster>"} 

 Player 2 15:24:23 $RESPOND_TO:  
{"playerId":1,"stackEffectResponse":false} 

 Player 1 15:24:23 $ACTION_MASSAGE_REMOVE:  
{"id":29} 

 Player 1 15:24:23 $ACTION_MASSAGE_REMOVE:  
{"id":27} 

 Player 1 15:24:23 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":30,"_text":"Resolve CombatDamage 4 "}} 

 Player 1 15:24:23 $UPDATE_STACK_VIS:  
{"stackId":4,"text":"Cain will deal 1 combat damage to Fistula"} 

 Player 1 15:24:23 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"MONSTER_GET_HIT","args":[{"type":2,"number":1},{"type":0,"number":282}],"result":null,"preventMethod":false,"methodScopeId":243,"scopeIsPlayer":false,"index":1,"originStackId":-1},"isAfterActivation":false,"index":1} 

 Player 1 15:24:23 $NEXT_STACK_ID:  

 Player 1 15:24:23 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula"} 

 Player 1 15:24:23 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula \n2:Activate Fistula effect GainStats<GainStats>"} 

 Player 1 15:24:23 $ADD_TO_STACK:  
{"stackEffect":{"effectCollectedData":null,"entityId":5,"creatorCardId":282,"hasLockingStackEffect":false,"cardActivatorId":243,"cardWithEffectId":243,"effectToDo":{"effectName":"GainStats","cardEffectNum":0,"cardPlayerId":243,"cardId":243,"effctType":0},"isAfterActivation":false,"index":1,"hasDataBeenCollectedYet":false,"stackEffectType":14}} 

 Player 1 15:24:23 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula \n2:Activate Fistula effect GainStats<GainStats>"} 

 Player 1 15:24:23 $ADD_SE_VIS_PREV:  
{"stackEffect":{"effectCollectedData":null,"entityId":5,"creatorCardId":282,"hasLockingStackEffect":false,"cardActivatorId":243,"cardWithEffectId":243,"effectToDo":{"effectName":"GainStats","cardEffectNum":0,"cardPlayerId":243,"cardId":243,"effctType":0},"isAfterActivation":false,"index":1,"hasDataBeenCollectedYet":false,"stackEffectType":14}} 

 Player 1 15:24:23 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":31,"_text":"Add ActivatePassiveEffect 5 "}} 

 Player 1 15:24:23 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula \n2:Activate Fistula effect GainStats<GainStats>"} 

 Player 1 15:24:23 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula \n2:Activate Fistula effect GainStats<GainStats>"} 

 Player 1 15:24:23 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"effectCollectedData":{"effectTargets":[243],"chainEffectsData":[],"methodArgs":[],"isPassive":true,"terminateOriginal":false,"effectCardOwner":243,"effectCardPlayer":243},"entityId":5,"creatorCardId":282,"hasLockingStackEffect":false,"cardActivatorId":243,"cardWithEffectId":243,"effectToDo":{"effectName":"GainStats","cardEffectNum":0,"cardPlayerId":243,"cardId":243,"effctType":0},"isAfterActivation":false,"index":1,"hasDataBeenCollectedYet":true,"stackEffectType":14}} 

 Player 1 15:24:23 $ACTION_MASSAGE_REMOVE:  
{"id":31} 

 Player 1 15:24:23 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":32,"_text":"Response Adding ActivatePassiveEffect 5"},"childOfId":31} 

 Player 1 15:24:23 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":33,"_text":"Wait For Response From Player 2 "},"childOfId":31} 

 Player 1 15:24:23 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 15:24:23 $GET_REACTION:  
{"playerId":2,"activePlayerId":1} 

 Player 2 15:24:23 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula"} 

 Player 2 15:24:23 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula"} 

 Player 2 15:24:23 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula \n2:Activate Fistula "} 

 Player 2 15:24:23 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula \n2:Activate Fistula "} 

 Player 2 15:24:24 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula \n2:Activate Fistula "} 

 Player 2 15:24:24 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula \n2:Activate Fistula "} 

 Player 2 15:24:24 $RESPOND_TO:  
{"playerId":1,"stackEffectResponse":false} 

 Player 1 15:24:24 $ACTION_MASSAGE_REMOVE:  
{"id":33} 

 Player 1 15:24:24 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":34,"_text":"Wait For Response From Player 1 "},"childOfId":31} 

 Player 1 15:24:24 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 15:24:24 $ACTION_MASSAGE_REMOVE:  
{"id":34} 

 Player 1 15:24:24 $ACTION_MASSAGE_REMOVE:  
{"id":32} 

 Player 1 15:24:24 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":35,"_text":"Resolve ActivatePassiveEffect 5 "}} 

 Player 1 15:24:24 $ACTIVATE_PARTICLE_EFFECT:  
{"cardId":243,"particleType":6} 

 Player 1 15:24:24 $ACTION_MASSAGE_REMOVE:  
{"id":25} 

 Player 1 15:24:24 $ACTION_MASSAGE_REMOVE:  
{"id":26} 

 Player 1 15:24:26 $DISABLE_PARTICLE_EFFECT:  
{"cardId":243,"particleType":6} 

 Player 1 15:24:26 $MONSTER_GAIN_ROLL_BONUS:  
{"cardId":243,"bonusToGain":1} 

 Player 1 15:24:26 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"MONSTER_GET_HIT","args":[{"type":2,"number":1},{"type":0,"number":282}],"result":null,"preventMethod":false,"methodScopeId":243,"scopeIsPlayer":false,"index":1,"originStackId":-1},"isAfterActivation":false,"index":1} 

 Player 1 15:24:26 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula \n2:Activate Fistula effect GainStats<GainStats>"} 

 Player 1 15:24:26 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"effectCollectedData":{"effectTargets":[243],"chainEffectsData":[],"methodArgs":[],"isPassive":true,"terminateOriginal":false,"effectCardOwner":243,"effectCardPlayer":243},"entityId":5,"creatorCardId":282,"hasLockingStackEffect":false,"cardActivatorId":243,"cardWithEffectId":243,"isAfterActivation":false,"index":1,"hasDataBeenCollectedYet":true,"stackEffectType":14}} 

 Player 1 15:24:26 $ACTION_MASSAGE_REMOVE:  
{"id":35} 

 Player 1 15:24:26 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula"} 

 Player 1 15:24:26 $REMOVE_SE_VIS_PREV:  
{"stackEffect":{"effectCollectedData":{"effectTargets":[243],"chainEffectsData":[],"methodArgs":[],"isPassive":true,"terminateOriginal":false,"effectCardOwner":243,"effectCardPlayer":243},"entityId":5,"creatorCardId":282,"hasLockingStackEffect":false,"cardActivatorId":243,"cardWithEffectId":243,"isAfterActivation":false,"index":1,"hasDataBeenCollectedYet":true,"stackEffectType":14}} 

 Player 1 15:24:26 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":36,"_text":"Remove After Resolve ActivatePassiveEffect 5  "}} 

 Player 1 15:24:26 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula"} 

 Player 1 15:24:26 $REMOVE_FROM_STACK:  
{"stackEffect":{"effectCollectedData":{"effectTargets":[243],"chainEffectsData":[],"methodArgs":[],"isPassive":true,"terminateOriginal":false,"effectCardOwner":243,"effectCardPlayer":243},"entityId":5,"creatorCardId":282,"hasLockingStackEffect":false,"cardActivatorId":243,"cardWithEffectId":243,"isAfterActivation":false,"index":1,"hasDataBeenCollectedYet":true,"stackEffectType":14}} 

 Player 1 15:24:26 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":37,"_text":"Response Remove After Resolve ActivatePassiveEffect 5"},"childOfId":36} 

 Player 1 15:24:26 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":38,"_text":"Wait For Response From Player 1 "},"childOfId":36} 

 Player 1 15:24:26 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 15:24:26 $ACTION_MASSAGE_REMOVE:  
{"id":38} 

 Player 1 15:24:26 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":39,"_text":"Wait For Response From Player 2 "},"childOfId":36} 

 Player 1 15:24:26 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 15:24:26 $GET_REACTION:  
{"playerId":2,"activePlayerId":1} 

 Player 2 15:24:26 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula \n2:Activate Fistula "} 

 Player 2 15:24:26 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula \n2:Activate Fistula "} 

 Player 2 15:24:26 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula \n2:Activate Fistula "} 

 Player 2 15:24:26 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula \n2:Activate Fistula "} 

 Player 2 15:24:26 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula \n2:Activate Fistula "} 

 Player 2 15:24:26 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula \n2:Activate Fistula "} 

 Player 2 15:24:26 $RESPOND_TO:  
{"playerId":1,"stackEffectResponse":false} 

 Player 1 15:24:26 $ACTION_MASSAGE_REMOVE:  
{"id":39} 

 Player 1 15:24:26 $ACTION_MASSAGE_REMOVE:  
{"id":37} 

 Player 1 15:24:26 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":40,"_text":"Resolve CombatDamage 4 "}} 

 Player 1 15:24:26 $MONSTER_GET_DAMAGED:  
{"cardId":243,"hpLeft":3,"damageDealerId":282} 

 Player 1 15:24:26 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"MONSTER_GET_HIT","args":[{"type":2,"number":1},{"type":0,"number":282}],"result":null,"preventMethod":false,"methodScopeId":243,"scopeIsPlayer":false,"index":1,"originStackId":-1},"isAfterActivation":true,"index":1} 

 Player 1 15:24:27 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"PLAYER_COMBAT_DAMAGE_GIVEN","args":[{"type":2,"number":1},{"type":2,"number":4},{"type":0,"number":282},{"type":0,"number":243}],"result":null,"preventMethod":false,"methodScopeId":282,"scopeIsPlayer":true,"index":5,"originStackId":4},"isAfterActivation":true,"index":5} 

 Player 1 15:24:27 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula"} 

 Player 1 15:24:27 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":4,"creatorCardId":282,"entityToDoDamageCardId":282,"entityToTakeDamageCardId":243,"isMonsterDoDamage":false,"isMonsterTakeDamage":true,"isPlayerDoDamage":false,"stackEffectType":3}} 

 Player 1 15:24:27 $ACTION_MASSAGE_REMOVE:  
{"id":30} 

 Player 1 15:24:27 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 15:24:27 $REMOVE_SE_VIS_PREV:  
{"stackEffect":{"entityId":4,"creatorCardId":282,"entityToDoDamageCardId":282,"entityToTakeDamageCardId":243,"isMonsterDoDamage":false,"isMonsterTakeDamage":true,"isPlayerDoDamage":false,"stackEffectType":3}} 

 Player 1 15:24:27 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":41,"_text":"Remove After Resolve CombatDamage 4  "}} 

 Player 1 15:24:27 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 15:24:27 $REMOVE_FROM_STACK:  
{"stackEffect":{"entityId":4,"creatorCardId":282,"entityToDoDamageCardId":282,"entityToTakeDamageCardId":243,"isMonsterDoDamage":false,"isMonsterTakeDamage":true,"isPlayerDoDamage":false,"stackEffectType":3}} 

 Player 1 15:24:27 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":42,"_text":"Response Remove After Resolve CombatDamage 4"},"childOfId":41} 

 Player 1 15:24:27 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":43,"_text":"Wait For Response From Player 2 "},"childOfId":41} 

 Player 1 15:24:27 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 15:24:27 $GET_REACTION:  
{"playerId":2,"activePlayerId":1} 

 Player 2 15:24:27 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula"} 

 Player 2 15:24:27 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula"} 

 Player 2 15:24:27 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula"} 

 Player 2 15:24:27 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula"} 

 Player 2 15:24:27 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula"} 

 Player 2 15:24:27 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula"} 

 Player 2 15:24:27 $RESPOND_TO:  
{"playerId":1,"stackEffectResponse":false} 

 Player 1 15:24:27 $ACTION_MASSAGE_REMOVE:  
{"id":43} 

 Player 1 15:24:27 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":44,"_text":"Wait For Response From Player 1 "},"childOfId":41} 

 Player 1 15:24:27 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 15:24:27 $ACTION_MASSAGE_REMOVE:  
{"id":44} 

 Player 1 15:24:27 $ACTION_MASSAGE_REMOVE:  
{"id":42} 

 Player 1 15:24:27 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":45,"_text":"Stack Was Emptied "}} 

 Player 1 15:24:27 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 15:24:27 $ACTION_MASSAGE_REMOVE:  
{"id":0} 

 Player 1 15:24:27 $ACTION_MASSAGE_REMOVE:  
{"id":1} 

 Player 1 15:24:27 $ACTION_MASSAGE_REMOVE:  
{"id":2} 

 Player 1 15:24:27 $ACTION_MASSAGE_REMOVE:  
{"id":3} 

 Player 1 15:24:27 $ACTION_MASSAGE_REMOVE:  
{"id":4} 

 Player 1 15:24:27 $ACTION_MASSAGE_REMOVE:  
{"id":5} 

 Player 1 15:24:27 $ACTION_MASSAGE_REMOVE:  
{"id":9} 

 Player 1 15:24:27 $ACTION_MASSAGE_REMOVE:  
{"id":10} 

 Player 1 15:24:27 $ACTION_MASSAGE_REMOVE:  
{"id":14} 

 Player 1 15:24:27 $ACTION_MASSAGE_REMOVE:  
{"id":15} 

 Player 1 15:24:28 $ACTION_MASSAGE_REMOVE:  
{"id":19} 

 Player 1 15:24:28 $ACTION_MASSAGE_REMOVE:  
{"id":20} 

 Player 1 15:24:28 $ACTION_MASSAGE_REMOVE:  
{"id":24} 

 Player 1 15:24:28 $ACTION_MASSAGE_REMOVE:  
{"id":25} 

 Player 1 15:24:28 $ACTION_MASSAGE_REMOVE:  
{"id":26} 

 Player 1 15:24:28 $ACTION_MASSAGE_REMOVE:  
{"id":30} 

 Player 1 15:24:28 $ACTION_MASSAGE_REMOVE:  
{"id":31} 

 Player 1 15:24:28 $ACTION_MASSAGE_REMOVE:  
{"id":35} 

 Player 1 15:24:28 $ACTION_MASSAGE_REMOVE:  
{"id":36} 

 Player 1 15:24:28 $ACTION_MASSAGE_REMOVE:  
{"id":40} 

 Player 1 15:24:28 $ACTION_MASSAGE_REMOVE:  
{"id":41} 

 Player 1 15:24:28 $ACTION_MASSAGE_REMOVE:  
{"id":45} 

 Player 1 15:24:29 $ACTION_MASSAGE_REMOVE:  
{"id":45} 

 Player 1 15:24:29 $ACTION_MASSAGE_REMOVE:  
{"id":36} 

 Player 1 15:24:29 $ACTION_MASSAGE_REMOVE:  
{"id":41} 

 Player 1 15:24:36 $NEXT_STACK_ID:  

 Player 1 15:24:36 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 15:24:36 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against Fistula<Monster>"} 

 Player 1 15:24:36 $ADD_TO_STACK:  
{"stackEffect":{"entityId":6,"creatorCardId":282,"rollingPlayerCardId":282,"stackEffectType":2,"attackedMonsterCardId":243}} 

 Player 1 15:24:36 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against Fistula<Monster>"} 

 Player 1 15:24:36 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":6,"creatorCardId":282,"rollingPlayerCardId":282,"stackEffectType":2,"attackedMonsterCardId":243}} 

 Player 1 15:24:36 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":46,"_text":"Add AttackRoll 6 "}} 

 Player 1 15:24:36 $ROLL_DICE:  
{"playerId":1} 

 Player 2 15:24:36 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 15:24:36 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 15:24:36 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against Fistula<Monster>"} 

 Player 2 15:24:36 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against Fistula<Monster>"} 

 Player 1 15:24:37 $ROLL_DICE_ENDED:  
{"playerId":1,"numberRolled":2} 

 Player 1 15:24:37 $UPDATE_STACK_VIS:  
{"stackId":6,"text":"player rolled 2 vs Fistula<Monster>"} 

 Player 1 15:24:37 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 rolled 2 vs Fistula<Monster>"} 

 Player 1 15:24:38 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 15:24:38 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 rolled 2 vs Fistula<Monster>"} 

 Player 1 15:24:38 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":6,"creatorCardId":282,"numberRolled":2,"rollingPlayerCardId":282,"stackEffectType":2,"attackedMonsterCardId":243}} 

 Player 1 15:24:38 $ACTION_MASSAGE_REMOVE:  
{"id":46} 

 Player 1 15:24:38 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":47,"_text":"Response Adding AttackRoll 6"},"childOfId":46} 

 Player 1 15:24:38 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":48,"_text":"Wait For Response From Player 1 "},"childOfId":46} 

 Player 1 15:24:38 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 15:24:38 $ACTION_MASSAGE_REMOVE:  
{"id":48} 

 Player 1 15:24:38 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":49,"_text":"Wait For Response From Player 2 "},"childOfId":46} 

 Player 1 15:24:38 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 15:24:38 $GET_REACTION:  
{"playerId":2,"activePlayerId":1} 

 Player 2 15:24:38 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against Fistula<Monster>"} 

 Player 2 15:24:38 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against Fistula<Monster>"} 

 Player 2 15:24:38 $RESPOND_TO:  
{"playerId":1,"stackEffectResponse":false} 

 Player 1 15:24:38 $ACTION_MASSAGE_REMOVE:  
{"id":49} 

 Player 1 15:24:38 $ACTION_MASSAGE_REMOVE:  
{"id":47} 

 Player 1 15:24:38 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":50,"_text":"Resolve AttackRoll 6 "}} 

 Player 1 15:24:38 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":51,"_text":"Added 0 to original roll"}} 

 Player 1 15:24:38 $NEXT_STACK_ID:  

 Player 1 15:24:38 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 rolled 2 vs Fistula<Monster>"} 

 Player 1 15:24:38 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 15:24:38 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula \n2:Player 1 rolled 2 vs Fistula<Monster>"} 

 Player 1 15:24:38 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":7,"creatorCardId":282,"entityToDoDamageCardId":282,"entityToTakeDamageCardId":243,"isMonsterDoDamage":false,"isMonsterTakeDamage":true,"isPlayerDoDamage":false,"stackEffectType":3}} 

 Player 1 15:24:38 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula \n2:Player 1 rolled 2 vs Fistula<Monster>"} 

 Player 1 15:24:38 $REMOVE_SE_VIS_PREV:  
{"stackEffect":{"entityId":6,"creatorCardId":282,"numberRolled":2,"rollingPlayerCardId":282,"stackEffectType":2,"attackedMonsterCardId":243}} 

 Player 1 15:24:38 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula \n2:Player 1 rolled 2 vs Fistula<Monster>"} 

 Player 1 15:24:38 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":7,"creatorCardId":282,"entityToDoDamageCardId":282,"entityToTakeDamageCardId":243,"isMonsterDoDamage":false,"isMonsterTakeDamage":true,"isPlayerDoDamage":false,"stackEffectType":3}} 

 Player 1 15:24:38 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula \n2:Player 1 rolled 2 vs Fistula<Monster>"} 

 Player 1 15:24:38 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":6,"creatorCardId":282,"numberRolled":2,"rollingPlayerCardId":282,"stackEffectType":2,"attackedMonsterCardId":243}} 

 Player 1 15:24:38 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula \n2:Player 1 rolled 2 vs Fistula<Monster>"} 

 Player 1 15:24:38 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula \n2:Player 1 rolled 2 vs Fistula<Monster>"} 

 Player 1 15:24:38 $REPLACE_STACK:  
{"currentStack":[{"entityId":7,"creatorCardId":282,"entityToDoDamageCardId":282,"entityToTakeDamageCardId":243,"isMonsterDoDamage":false,"isMonsterTakeDamage":true,"isPlayerDoDamage":false,"stackEffectType":3},{"entityId":6,"creatorCardId":282,"numberRolled":2,"rollingPlayerCardId":282,"stackEffectType":2,"attackedMonsterCardId":243}]} 

 Player 1 15:24:38 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"PLAYER_ROLL_DICE","args":[{"type":2,"number":4},{"type":2,"number":1},{"type":2,"number":3}],"result":null,"preventMethod":false,"methodScopeId":282,"scopeIsPlayer":true,"index":6,"originStackId":6},"isAfterActivation":true,"index":6} 

 Player 1 15:24:39 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula \n2:Player 1 rolled 2 vs Fistula<Monster>"} 

 Player 1 15:24:39 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":6,"creatorCardId":282,"numberRolled":2,"rollingPlayerCardId":282,"stackEffectType":2,"attackedMonsterCardId":243}} 

 Player 1 15:24:39 $ACTION_MASSAGE_REMOVE:  
{"id":50} 

 Player 1 15:24:39 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula"} 

 Player 1 15:24:39 $REMOVE_SE_VIS_PREV:  
{"stackEffect":{"entityId":6,"creatorCardId":282,"numberRolled":2,"rollingPlayerCardId":282,"stackEffectType":2,"attackedMonsterCardId":243}} 

 Player 1 15:24:39 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":52,"_text":"Remove After Resolve AttackRoll 6  "}} 

 Player 1 15:24:39 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula"} 

 Player 1 15:24:39 $REMOVE_FROM_STACK:  
{"stackEffect":{"entityId":6,"creatorCardId":282,"numberRolled":2,"rollingPlayerCardId":282,"stackEffectType":2,"attackedMonsterCardId":243}} 

 Player 1 15:24:39 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":53,"_text":"Response Remove After Resolve AttackRoll 6"},"childOfId":52} 

 Player 1 15:24:39 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":54,"_text":"Wait For Response From Player 1 "},"childOfId":52} 

 Player 1 15:24:39 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 15:24:39 $ACTION_MASSAGE_REMOVE:  
{"id":54} 

 Player 1 15:24:39 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":55,"_text":"Wait For Response From Player 2 "},"childOfId":52} 

 Player 1 15:24:39 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 15:24:39 $GET_REACTION:  
{"playerId":2,"activePlayerId":1} 

 Player 2 15:24:39 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against Fistula<Monster>"} 

 Player 2 15:24:39 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against Fistula<Monster>"} 

 Player 2 15:24:39 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula"} 

 Player 2 15:24:39 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula"} 

 Player 2 15:24:39 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula"} 

 Player 2 15:24:39 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula"} 

 Player 2 15:24:39 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula"} 

 Player 2 15:24:39 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula"} 

 Player 2 15:24:39 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula"} 

 Player 2 15:24:39 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula"} 

 Player 2 15:24:39 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula"} 

 Player 2 15:24:39 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula"} 

 Player 2 15:24:39 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula \n2:Player 1 is rolling against Fistula<Monster>"} 

 Player 2 15:24:39 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula \n2:Player 1 is rolling against Fistula<Monster>"} 

 Player 2 15:24:39 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula \n2:Player 1 is rolling against Fistula<Monster>"} 

 Player 2 15:24:39 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula \n2:Player 1 is rolling against Fistula<Monster>"} 

 Player 2 15:24:39 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula \n2:Player 1 is rolling against Fistula<Monster>"} 

 Player 2 15:24:39 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula \n2:Player 1 is rolling against Fistula<Monster>"} 

 Player 2 15:24:39 $RESPOND_TO:  
{"playerId":1,"stackEffectResponse":false} 

 Player 1 15:24:39 $ACTION_MASSAGE_REMOVE:  
{"id":55} 

 Player 1 15:24:39 $ACTION_MASSAGE_REMOVE:  
{"id":53} 

 Player 1 15:24:39 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":56,"_text":"Resolve CombatDamage 7 "}} 

 Player 1 15:24:40 $UPDATE_STACK_VIS:  
{"stackId":7,"text":"Cain will deal 1 combat damage to Fistula"} 

 Player 1 15:24:40 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"MONSTER_GET_HIT","args":[{"type":2,"number":1},{"type":0,"number":282}],"result":null,"preventMethod":false,"methodScopeId":243,"scopeIsPlayer":false,"index":2,"originStackId":-1},"isAfterActivation":false,"index":2} 

 Player 1 15:24:40 $NEXT_STACK_ID:  

 Player 1 15:24:40 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula"} 

 Player 1 15:24:40 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula \n2:Activate Fistula effect GainStats<GainStats>"} 

 Player 1 15:24:40 $ADD_TO_STACK:  
{"stackEffect":{"effectCollectedData":null,"entityId":8,"creatorCardId":282,"hasLockingStackEffect":false,"cardActivatorId":243,"cardWithEffectId":243,"effectToDo":{"effectName":"GainStats","cardEffectNum":0,"cardPlayerId":243,"cardId":243,"effctType":0},"isAfterActivation":false,"index":2,"hasDataBeenCollectedYet":false,"stackEffectType":14}} 

 Player 1 15:24:40 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula \n2:Activate Fistula effect GainStats<GainStats>"} 

 Player 1 15:24:40 $ADD_SE_VIS_PREV:  
{"stackEffect":{"effectCollectedData":null,"entityId":8,"creatorCardId":282,"hasLockingStackEffect":false,"cardActivatorId":243,"cardWithEffectId":243,"effectToDo":{"effectName":"GainStats","cardEffectNum":0,"cardPlayerId":243,"cardId":243,"effctType":0},"isAfterActivation":false,"index":2,"hasDataBeenCollectedYet":false,"stackEffectType":14}} 

 Player 1 15:24:40 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":57,"_text":"Add ActivatePassiveEffect 8 "}} 

 Player 1 15:24:40 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula \n2:Activate Fistula effect GainStats<GainStats>"} 

 Player 1 15:24:40 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula \n2:Activate Fistula effect GainStats<GainStats>"} 

 Player 1 15:24:40 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"effectCollectedData":{"effectTargets":[243],"chainEffectsData":[],"methodArgs":[],"isPassive":true,"terminateOriginal":false,"effectCardOwner":243,"effectCardPlayer":243},"entityId":8,"creatorCardId":282,"hasLockingStackEffect":false,"cardActivatorId":243,"cardWithEffectId":243,"effectToDo":{"effectName":"GainStats","cardEffectNum":0,"cardPlayerId":243,"cardId":243,"effctType":0},"isAfterActivation":false,"index":2,"hasDataBeenCollectedYet":true,"stackEffectType":14}} 

 Player 1 15:24:40 $ACTION_MASSAGE_REMOVE:  
{"id":57} 

 Player 1 15:24:40 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":58,"_text":"Response Adding ActivatePassiveEffect 8"},"childOfId":57} 

 Player 1 15:24:40 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":59,"_text":"Wait For Response From Player 2 "},"childOfId":57} 

 Player 1 15:24:40 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 15:24:40 $GET_REACTION:  
{"playerId":2,"activePlayerId":1} 

 Player 2 15:24:40 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula"} 

 Player 2 15:24:40 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula"} 

 Player 2 15:24:40 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula \n2:Activate Fistula "} 

 Player 2 15:24:40 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula \n2:Activate Fistula "} 

 Player 2 15:24:40 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula \n2:Activate Fistula "} 

 Player 2 15:24:40 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula \n2:Activate Fistula "} 

 Player 2 15:24:40 $RESPOND_TO:  
{"playerId":1,"stackEffectResponse":false} 

 Player 1 15:24:40 $ACTION_MASSAGE_REMOVE:  
{"id":59} 

 Player 1 15:24:40 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":60,"_text":"Wait For Response From Player 1 "},"childOfId":57} 

 Player 1 15:24:40 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 15:24:40 $ACTION_MASSAGE_REMOVE:  
{"id":60} 

 Player 1 15:24:40 $ACTION_MASSAGE_REMOVE:  
{"id":58} 

 Player 1 15:24:40 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":61,"_text":"Resolve ActivatePassiveEffect 8 "}} 

 Player 1 15:24:40 $ACTIVATE_PARTICLE_EFFECT:  
{"cardId":243,"particleType":6} 

 Player 1 15:24:41 $ACTION_MASSAGE_REMOVE:  
{"id":51} 

 Player 1 15:24:41 $ACTION_MASSAGE_REMOVE:  
{"id":52} 

 Player 1 15:24:42 $DISABLE_PARTICLE_EFFECT:  
{"cardId":243,"particleType":6} 

 Player 1 15:24:42 $MONSTER_GAIN_ROLL_BONUS:  
{"cardId":243,"bonusToGain":1} 

 Player 1 15:24:42 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"MONSTER_GET_HIT","args":[{"type":2,"number":1},{"type":0,"number":282}],"result":null,"preventMethod":false,"methodScopeId":243,"scopeIsPlayer":false,"index":2,"originStackId":-1},"isAfterActivation":false,"index":2} 

 Player 1 15:24:42 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula \n2:Activate Fistula effect GainStats<GainStats>"} 

 Player 1 15:24:42 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"effectCollectedData":{"effectTargets":[243],"chainEffectsData":[],"methodArgs":[],"isPassive":true,"terminateOriginal":false,"effectCardOwner":243,"effectCardPlayer":243},"entityId":8,"creatorCardId":282,"hasLockingStackEffect":false,"cardActivatorId":243,"cardWithEffectId":243,"isAfterActivation":false,"index":2,"hasDataBeenCollectedYet":true,"stackEffectType":14}} 

 Player 1 15:24:42 $ACTION_MASSAGE_REMOVE:  
{"id":61} 

 Player 1 15:24:42 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula"} 

 Player 1 15:24:42 $REMOVE_SE_VIS_PREV:  
{"stackEffect":{"effectCollectedData":{"effectTargets":[243],"chainEffectsData":[],"methodArgs":[],"isPassive":true,"terminateOriginal":false,"effectCardOwner":243,"effectCardPlayer":243},"entityId":8,"creatorCardId":282,"hasLockingStackEffect":false,"cardActivatorId":243,"cardWithEffectId":243,"isAfterActivation":false,"index":2,"hasDataBeenCollectedYet":true,"stackEffectType":14}} 

 Player 1 15:24:42 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":62,"_text":"Remove After Resolve ActivatePassiveEffect 8  "}} 

 Player 1 15:24:43 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula"} 

 Player 1 15:24:43 $REMOVE_FROM_STACK:  
{"stackEffect":{"effectCollectedData":{"effectTargets":[243],"chainEffectsData":[],"methodArgs":[],"isPassive":true,"terminateOriginal":false,"effectCardOwner":243,"effectCardPlayer":243},"entityId":8,"creatorCardId":282,"hasLockingStackEffect":false,"cardActivatorId":243,"cardWithEffectId":243,"isAfterActivation":false,"index":2,"hasDataBeenCollectedYet":true,"stackEffectType":14}} 

 Player 1 15:24:43 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":63,"_text":"Response Remove After Resolve ActivatePassiveEffect 8"},"childOfId":62} 

 Player 1 15:24:43 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":64,"_text":"Wait For Response From Player 1 "},"childOfId":62} 

 Player 1 15:24:43 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 15:24:43 $ACTION_MASSAGE_REMOVE:  
{"id":64} 

 Player 1 15:24:43 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":65,"_text":"Wait For Response From Player 2 "},"childOfId":62} 

 Player 1 15:24:43 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 15:24:43 $GET_REACTION:  
{"playerId":2,"activePlayerId":1} 

 Player 2 15:24:43 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula \n2:Activate Fistula "} 

 Player 2 15:24:43 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula \n2:Activate Fistula "} 

 Player 2 15:24:43 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula \n2:Activate Fistula "} 

 Player 2 15:24:43 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula \n2:Activate Fistula "} 

 Player 2 15:24:43 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula \n2:Activate Fistula "} 

 Player 2 15:24:43 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula \n2:Activate Fistula "} 

 Player 2 15:24:43 $RESPOND_TO:  
{"playerId":1,"stackEffectResponse":false} 

 Player 1 15:24:43 $ACTION_MASSAGE_REMOVE:  
{"id":65} 

 Player 1 15:24:43 $ACTION_MASSAGE_REMOVE:  
{"id":63} 

 Player 1 15:24:43 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":66,"_text":"Resolve CombatDamage 7 "}} 

 Player 1 15:24:43 $MONSTER_GET_DAMAGED:  
{"cardId":243,"hpLeft":2,"damageDealerId":282} 

 Player 1 15:24:43 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"MONSTER_GET_HIT","args":[{"type":2,"number":1},{"type":0,"number":282}],"result":null,"preventMethod":false,"methodScopeId":243,"scopeIsPlayer":false,"index":2,"originStackId":-1},"isAfterActivation":true,"index":2} 

 Player 1 15:24:43 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"PLAYER_COMBAT_DAMAGE_GIVEN","args":[{"type":2,"number":1},{"type":2,"number":4},{"type":0,"number":282},{"type":0,"number":243}],"result":null,"preventMethod":false,"methodScopeId":282,"scopeIsPlayer":true,"index":7,"originStackId":7},"isAfterActivation":true,"index":7} 

 Player 1 15:24:43 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula"} 

 Player 1 15:24:43 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":7,"creatorCardId":282,"entityToDoDamageCardId":282,"entityToTakeDamageCardId":243,"isMonsterDoDamage":false,"isMonsterTakeDamage":true,"isPlayerDoDamage":false,"stackEffectType":3}} 

 Player 1 15:24:43 $ACTION_MASSAGE_REMOVE:  
{"id":56} 

 Player 1 15:24:43 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 15:24:43 $REMOVE_SE_VIS_PREV:  
{"stackEffect":{"entityId":7,"creatorCardId":282,"entityToDoDamageCardId":282,"entityToTakeDamageCardId":243,"isMonsterDoDamage":false,"isMonsterTakeDamage":true,"isPlayerDoDamage":false,"stackEffectType":3}} 

 Player 1 15:24:43 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":67,"_text":"Remove After Resolve CombatDamage 7  "}} 

 Player 1 15:24:43 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 15:24:43 $REMOVE_FROM_STACK:  
{"stackEffect":{"entityId":7,"creatorCardId":282,"entityToDoDamageCardId":282,"entityToTakeDamageCardId":243,"isMonsterDoDamage":false,"isMonsterTakeDamage":true,"isPlayerDoDamage":false,"stackEffectType":3}} 

 Player 1 15:24:43 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":68,"_text":"Response Remove After Resolve CombatDamage 7"},"childOfId":67} 

 Player 1 15:24:43 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":69,"_text":"Wait For Response From Player 2 "},"childOfId":67} 

 Player 1 15:24:43 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 15:24:43 $GET_REACTION:  
{"playerId":2,"activePlayerId":1} 

 Player 2 15:24:43 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula"} 

 Player 2 15:24:43 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula"} 

 Player 2 15:24:44 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula"} 

 Player 2 15:24:44 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula"} 

 Player 2 15:24:44 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula"} 

 Player 2 15:24:44 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Cain combat damage to Fistula"} 

 Player 2 15:24:44 $RESPOND_TO:  
{"playerId":1,"stackEffectResponse":false} 

 Player 1 15:24:44 $ACTION_MASSAGE_REMOVE:  
{"id":69} 

 Player 1 15:24:44 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":70,"_text":"Wait For Response From Player 1 "},"childOfId":67} 

 Player 1 15:24:44 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 15:24:44 $ACTION_MASSAGE_REMOVE:  
{"id":70} 

 Player 1 15:24:44 $ACTION_MASSAGE_REMOVE:  
{"id":68} 

 Player 1 15:24:44 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":71,"_text":"Stack Was Emptied "}} 

 Player 1 15:24:44 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 15:24:44 $ACTION_MASSAGE_REMOVE:  
{"id":0} 

 Player 1 15:24:44 $ACTION_MASSAGE_REMOVE:  
{"id":1} 

 Player 1 15:24:44 $ACTION_MASSAGE_REMOVE:  
{"id":2} 

 Player 1 15:24:44 $ACTION_MASSAGE_REMOVE:  
{"id":3} 

 Player 1 15:24:44 $ACTION_MASSAGE_REMOVE:  
{"id":4} 

 Player 1 15:24:44 $ACTION_MASSAGE_REMOVE:  
{"id":5} 

 Player 1 15:24:44 $ACTION_MASSAGE_REMOVE:  
{"id":9} 

 Player 1 15:24:44 $ACTION_MASSAGE_REMOVE:  
{"id":10} 

 Player 1 15:24:44 $ACTION_MASSAGE_REMOVE:  
{"id":14} 

 Player 1 15:24:44 $ACTION_MASSAGE_REMOVE:  
{"id":15} 

 Player 1 15:24:44 $ACTION_MASSAGE_REMOVE:  
{"id":19} 

 Player 1 15:24:44 $ACTION_MASSAGE_REMOVE:  
{"id":20} 

 Player 1 15:24:44 $ACTION_MASSAGE_REMOVE:  
{"id":24} 

 Player 1 15:24:44 $ACTION_MASSAGE_REMOVE:  
{"id":25} 

 Player 1 15:24:44 $ACTION_MASSAGE_REMOVE:  
{"id":26} 

 Player 1 15:24:44 $ACTION_MASSAGE_REMOVE:  
{"id":30} 

 Player 1 15:24:44 $ACTION_MASSAGE_REMOVE:  
{"id":31} 

 Player 1 15:24:44 $ACTION_MASSAGE_REMOVE:  
{"id":35} 

 Player 1 15:24:44 $ACTION_MASSAGE_REMOVE:  
{"id":36} 

 Player 1 15:24:44 $ACTION_MASSAGE_REMOVE:  
{"id":40} 

 Player 1 15:24:44 $ACTION_MASSAGE_REMOVE:  
{"id":41} 

 Player 1 15:24:44 $ACTION_MASSAGE_REMOVE:  
{"id":45} 

 Player 1 15:24:44 $ACTION_MASSAGE_REMOVE:  
{"id":46} 

 Player 1 15:24:44 $ACTION_MASSAGE_REMOVE:  
{"id":50} 

 Player 1 15:24:45 $ACTION_MASSAGE_REMOVE:  
{"id":51} 

 Player 1 15:24:45 $ACTION_MASSAGE_REMOVE:  
{"id":52} 

 Player 1 15:24:45 $ACTION_MASSAGE_REMOVE:  
{"id":56} 

 Player 1 15:24:45 $ACTION_MASSAGE_REMOVE:  
{"id":57} 

 Player 1 15:24:45 $ACTION_MASSAGE_REMOVE:  
{"id":61} 

 Player 1 15:24:45 $ACTION_MASSAGE_REMOVE:  
{"id":62} 

 Player 1 15:24:45 $ACTION_MASSAGE_REMOVE:  
{"id":66} 

 Player 1 15:24:45 $ACTION_MASSAGE_REMOVE:  
{"id":67} 

 Player 1 15:24:45 $ACTION_MASSAGE_REMOVE:  
{"id":71} 

 Player 1 15:24:45 $ACTION_MASSAGE_REMOVE:  
{"id":71} 

 Player 1 15:24:45 $ACTION_MASSAGE_REMOVE:  
{"id":62} 

 Player 1 15:24:46 $ACTION_MASSAGE_REMOVE:  
{"id":67} 

 Player 2 15:25:52 $MATCH: 