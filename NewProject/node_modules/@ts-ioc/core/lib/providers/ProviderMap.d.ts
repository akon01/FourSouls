import { MapBase } from '../utils';
import { Token, InstanceFactory, SymbolType, Factory, Type } from '../types';
import { IContainer, ResoveWay } from '../IContainer';
import { InjectToken } from '../InjectToken';
import { IResolver, IResolverContainer } from '../IResolver';
import { ParamProviders } from './types';
export declare const ProviderMapToken: InjectToken<ProviderMap>;
/**
 * Provider Map.
 *
 * note: object map provider can not resolve token.
 *
 * @export
 * @class Providers
 */
export declare class ProviderMap extends MapBase<Token<any> | number, InstanceFactory<any>> implements IResolverContainer {
    private container;
    constructor(container: IContainer);
    /**
     * has provide or not.
     *
     * @param {(Token<any> | number)} provide
     * @returns {boolean}
     * @memberof ProviderMap
     */
    has(provide: Token<any> | number): boolean;
    provides(): Token<any>[];
    /**
     * get token key.
     *
     * @param {(Token<any> | number)} token
     * @returns {(SymbolType<any> | number)}
     * @memberof ProviderMap
     */
    getTokenKey(token: Token<any> | number): SymbolType<any> | number;
    /**
     * get token factory.
     *
     * @template T
     * @param {(Token<T> | number)} provide
     * @returns {InstanceFactory<T>}
     * @memberof ProviderMap
     */
    get<T>(provide: Token<T> | number): InstanceFactory<T>;
    getTokenImpl<T>(token: Token<T>, resway?: ResoveWay): Type<T>;
    unregister<T>(token: Token<T>, resway?: ResoveWay): this;
    /**
     * add and bind token provider.
     *
     * @template T
     * @param {(Token<T> | number)} provide
     * @param {(Token<T> | Factory<T>)} provider
     * @returns {this}
     * @memberof ProviderMap
     */
    add<T>(provide: Token<T> | number, provider: Token<T> | Factory<T>): this;
    /**
     * resolve instance via provide token.
     *
     * @template T
     * @param {Token<T>} provide
     * @param {...ProviderTypes[]} providers
     * @returns {T}
     * @memberof ProviderMap
     */
    resolve<T>(provide: Token<T> | number, resway?: ResoveWay | ParamProviders, ...providers: ParamProviders[]): T;
    forEach(callbackfn: (tk: Token<any>, fac: InstanceFactory<any>, resolvor?: IResolver) => void): void;
    /**
     * copy provider map.
     *
     * @param {ProviderMap} map
     * @returns
     * @memberof ProviderMap
     */
    copy(map: ProviderMap): this;
    static getClassAnnations(): any;
}
/**
 * object is provider map or not.
 *
 * @export
 * @param {object} target
 * @returns {target is ProviderMap}
 */
export declare function isProviderMap(target: object): target is ProviderMap;
