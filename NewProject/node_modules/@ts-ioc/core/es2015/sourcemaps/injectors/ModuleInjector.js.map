{"version":3,"sources":["injectors/ModuleInjector.ts"],"names":[],"mappings":"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","file":"../../injectors/ModuleInjector.js","sourcesContent":["import { IModuleInjector, ModuleInjectorToken, InjectorResult } from './IModuleInjector';\r\nimport { Type } from '../types';\r\nimport { IContainer } from '../IContainer';\r\nimport { PromiseUtil } from '../utils';\r\nimport { IModuleValidate, ModuleValidateToken } from './IModuleValidate';\r\nimport { Injectable, Inject } from '../core';\r\n\r\n\r\n/**\r\n * base module injector. abstract class.\r\n *\r\n * @export\r\n * @abstract\r\n * @class BaseModuleInjector\r\n * @implements {IModuleInjector}\r\n */\r\n@Injectable(ModuleInjectorToken)\r\nexport class ModuleInjector implements IModuleInjector {\r\n\r\n    /**\r\n     *Creates an instance of BaseModuleInjector.\r\n     * @param {IModuleValidate} [validate]\r\n     * @param {boolean} [skipNext] skip next when has match module to injector.\r\n     * @memberof BaseModuleInjector\r\n     */\r\n    constructor(@Inject(ModuleValidateToken) protected validate?: IModuleValidate, protected skipNext?: boolean) {\r\n    }\r\n\r\n    async inject(container: IContainer, modules: Type<any>[]): Promise<InjectorResult> {\r\n        let types = (modules || []).filter(ty => this.valid(container, ty));\r\n        if (types.length) {\r\n            await PromiseUtil.step(types.map(ty => () => this.setup(container, ty)));\r\n        }\r\n        let next = this.getNext(modules, types);\r\n        return { injected: types, next: next };\r\n    }\r\n\r\n    syncInject(container: IContainer, modules: Type<any>[]): InjectorResult {\r\n        let types = (modules || []).filter(ty => this.valid(container, ty));\r\n        if (types.length) {\r\n            types.forEach(ty => {\r\n                this.syncSetup(container, ty);\r\n            });\r\n        }\r\n        let next = this.getNext(modules, types);\r\n        return { injected: types, next: next };\r\n    }\r\n\r\n    protected valid(container: IContainer, type: Type<any>): boolean {\r\n        if (!this.validate) {\r\n            return true;\r\n        }\r\n        return this.validate.valid(type);\r\n    }\r\n\r\n    protected getNext(all: Type<any>[], filtered: Type<any>[]): Type<any>[] {\r\n        if (filtered.length === 0) {\r\n            return all;\r\n        }\r\n        if (this.skipNext) {\r\n            return null;\r\n        }\r\n        if (filtered.length === all.length) {\r\n            return null;\r\n        }\r\n        return all.filter(it => filtered.indexOf(it) < 0);\r\n    }\r\n\r\n    protected async setup(container: IContainer, type: Type<any>) {\r\n        container.register(type);\r\n    }\r\n    protected syncSetup(container: IContainer, type: Type<any>) {\r\n        container.register(type);\r\n    }\r\n\n                        static getClassAnnations():any  {\n                            return {\"name\":\"ModuleInjector\",\"params\":{\"constructor\":[\"validate\",\"skipNext\"],\"inject\":[\"container\",\"modules\"],\"syncInject\":[\"container\",\"modules\"],\"valid\":[\"container\",\"type\"],\"getNext\":[\"all\",\"filtered\"],\"setup\":[\"container\",\"type\"],\"syncSetup\":[\"container\",\"type\"]}};\n                        }\n                   }\r\n"]}