{"version":3,"sources":["IMethodAccessor.ts"],"names":[],"mappings":";;AAEA,+CAA4C;AAG5C;;;GAGG;AACU,QAAA,mBAAmB,GAAG,IAAI,yBAAW,CAAkB,oBAAoB,CAAC,CAAC","file":"../IMethodAccessor.js","sourcesContent":["import { Token } from './types';\r\nimport { IParameter } from './IParameter';\r\nimport { InjectToken } from './InjectToken';\r\nimport { ParamProviders } from './providers';\r\n\r\n/**\r\n * IMethodAccessor interface symbol.\r\n * it is a symbol id, you can register yourself MethodAccessor for this.\r\n */\r\nexport const MethodAccessorToken = new InjectToken<IMethodAccessor>('DI_IMethodAccessor');\r\n\r\n/**\r\n * execution, invoke some type method.\r\n *\r\n * @export\r\n * @interface IExecution\r\n */\r\nexport interface IMethodAccessor {\r\n\r\n    /**\r\n     * try to async invoke the method of intance, if no instance will create by type.\r\n     *\r\n     * @template T\r\n     * @param {*} target\r\n     * @param {string} propertyKey\r\n     * @param {...ParamProviders[]} providers\r\n     * @returns {Promise<T>}\r\n     * @memberof IMethodAccessor\r\n     */\r\n    invoke<T>(target: any, propertyKey: string, ...providers: ParamProviders[]): Promise<T>;\r\n\r\n    /**\r\n     * try to async invoke the method of intance, if no instance will create by type.\r\n     *\r\n     * @template T\r\n     * @param {Token<any>} target\r\n     * @param {string} propertyKey\r\n     * @param {...ParamProviders[]} providers\r\n     * @returns {Promise<T>}\r\n     * @memberof IMethodAccessor\r\n     */\r\n    invoke<T>(target: Token<any>, propertyKey: string, ...providers: ParamProviders[]): Promise<T>;\r\n\r\n    /**\r\n     * try to async invoke the method of intance, if no instance will create by type.\r\n     *\r\n     * @template T\r\n     * @param {Token<any>} target\r\n     * @param {string} propertyKey\r\n     * @param {*} instance\r\n     * @param {...ParamProviders[]} providers\r\n     * @returns {Promise<T>}\r\n     * @memberof IMethodAccessor\r\n     */\r\n    invoke<T>(target: Token<any>, propertyKey: string, instance: any, ...providers: ParamProviders[]): Promise<T>;\r\n\r\n    /**\r\n     * try to invoke the method of intance, if is token will create instance to invoke.\r\n     *\r\n     * @template T\r\n     * @param {*} target\r\n     * @param {string} propertyKey\r\n     * @param {...ParamProviders[]} providers\r\n     * @returns {T}\r\n     * @memberof IMethodAccessor\r\n     */\r\n    syncInvoke<T>(target: any, propertyKey: string, ...providers: ParamProviders[]): T;\r\n    /**\r\n     * try create instance to invoke property method.\r\n     *\r\n     * @template T\r\n     * @param {*} target\r\n     * @param {string} propertyKey\r\n     * @param {...ParamProviders[]} providers\r\n     * @returns {T}\r\n     * @memberof IMethodAccessor\r\n     */\r\n    syncInvoke<T>(target: any, propertyKey: string, ...providers: ParamProviders[]): T;\r\n\r\n    /**\r\n     * try to invoke the method of intance, if is token will create instance to invoke.\r\n     *\r\n     * @template T\r\n     * @param {*} target\r\n     * @param {string} propertyKey\r\n     * @param {*} instance\r\n     * @param {...ParamProviders[]} providers\r\n     * @memberof IMethodAccessor\r\n     */\r\n    syncInvoke<T>(target: any, propertyKey: string, instance: any, ...providers: ParamProviders[])\r\n\r\n    /**\r\n     * create params instances with IParameter and provider.\r\n     *\r\n     * @param {IParameter[]} params\r\n     * @param {...ParamProvider[]} providers\r\n     * @returns {any[]}\r\n     * @memberof IMethodAccessor\r\n     */\r\n    createSyncParams(params: IParameter[], ...providers: ParamProviders[]): any[];\r\n\r\n    /**\r\n     * create params instances with IParameter and provider\r\n     *\r\n     * @param {IParameter[]} params\r\n     * @param {...AsyncParamProvider[]} providers\r\n     * @returns {Promise<any[]>}\r\n     * @memberof IMethodAccessor\r\n     */\r\n    createParams(params: IParameter[], ...providers: ParamProviders[]): Promise<any[]>;\r\n}\r\n"]}