"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ActionComposite_1 = require("./ActionComposite");
const CoreActions_1 = require("./CoreActions");
const factories_1 = require("../factories");
const utils_1 = require("../../utils");
/**
 * bind parameters action.
 *
 * @export
 * @class BindParameterProviderAction
 * @extends {ActionComposite}
 */
class BindParameterProviderAction extends ActionComposite_1.ActionComposite {
    constructor() {
        super(CoreActions_1.CoreActions.bindParameterProviders);
    }
    working(container, data) {
        if (data.raiseContainer && data.raiseContainer !== container) {
            return;
        }
        let type = data.targetType;
        let propertyKey = data.propertyKey;
        let lifeScope = container.getLifeScope();
        let matchs = lifeScope.getMethodDecorators(type, surm => surm.actions.includes(CoreActions_1.CoreActions.bindParameterProviders) && factories_1.hasOwnMethodMetadata(surm.name, type));
        let providers = [];
        matchs.forEach(surm => {
            let methodmtas = factories_1.getOwnMethodMetadata(surm.name, type);
            let metadatas = methodmtas[propertyKey];
            if (metadatas && utils_1.isArray(metadatas) && metadatas.length > 0) {
                metadatas.forEach(meta => {
                    if (meta.providers && meta.providers.length > 0) {
                        providers = providers.concat(meta.providers);
                    }
                });
            }
        });
        data.execResult = providers;
    }
    static getClassAnnations() {
        return { "name": "BindParameterProviderAction", "params": { "constructor": [], "working": ["container", "data"] } };
    }
}
exports.BindParameterProviderAction = BindParameterProviderAction;

//# sourceMappingURL=../../sourcemaps/core/actions/BindParameterProviderAction.js.map
