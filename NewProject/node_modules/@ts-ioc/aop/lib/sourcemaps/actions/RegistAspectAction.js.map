{"version":3,"sources":["actions/RegistAspectAction.ts"],"names":[],"mappings":";;;AAAA,qCAGsB;AACtB,wCAAqD;AACrD,2CAA0C;AAa1C;;;;;;GAMG;AACH;IAAwC,8CAAe;IAEnD;eACI,kBAAM,uBAAU,CAAC,YAAY,CAAC;IAClC,CAAC;IAES,oCAAO,GAAjB,UAAkB,SAAqB,EAAE,IAA4B;QACjE,IAAI,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC;QAC3B,IAAI,SAAS,GAAG,SAAS,CAAC,YAAY,EAAE,CAAC;QACzC,IAAI,MAAM,GAAG,SAAS,CAAC,kBAAkB,CAAC,IAAI,EAAE,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,uBAAU,CAAC,YAAY,CAAC,IAAI,0BAAmB,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,EAAtF,CAAsF,CAAC,CAAC;QAChJ,IAAI,SAAS,GAAG,SAAS,CAAC,GAAG,CAAW,uBAAY,CAAC,CAAC;QACtD,IAAI,cAAc,GAAG,IAAI,CAAC,cAAc,IAAI,SAAS,CAAC;QACtD,MAAM,CAAC,OAAO,CAAC,UAAA,IAAI;YACf,IAAI,QAAQ,GAAG,yBAAkB,CAAgB,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;YAClE,IAAI,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE;gBAChD,QAAQ,CAAC,OAAO,CAAC,UAAA,IAAI;oBACjB,IAAI,cAAO,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;wBACpB,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,cAAc,CAAC,CAAC;qBAC5C;gBACL,CAAC,CAAC,CAAC;aACN;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IAE0B,oCAAiB,GAAxB;QACI,OAAO,EAAC,MAAM,EAAC,oBAAoB,EAAC,QAAQ,EAAC,EAAC,aAAa,EAAC,EAAE,EAAC,SAAS,EAAC,CAAC,WAAW,EAAC,MAAM,CAAC,EAAC,EAAC,CAAC;IACpG,CAAC;IACN,yBAAC;AAAD,CA3BnB,AA2BoB,CA3BoB,sBAAe,GA2BnC;AA3BP,gDAAkB","file":"../../actions/RegistAspectAction.js","sourcesContent":["import {\r\n    IContainer, ActionData, ClassMetadata,\r\n    ActionComposite, hasOwnClassMetadata, getOwnTypeMetadata, isClass\r\n} from '@ts-ioc/core';\r\nimport { IAdvisor, AdvisorToken } from '../IAdvisor';\r\nimport { AopActions } from './AopActions';\r\n\r\n/**\r\n * regist aspect action data.\r\n *\r\n * @export\r\n * @interface RegistAspectActionData\r\n * @extends {ActionData<ClassMetadata>}\r\n */\r\nexport interface RegistAspectActionData extends ActionData<ClassMetadata> {\r\n\r\n}\r\n\r\n/**\r\n * regist aspect action.\r\n *\r\n * @export\r\n * @class RegistAspectAction\r\n * @extends {ActionComposite}\r\n */\r\nexport class RegistAspectAction extends ActionComposite {\r\n\r\n    constructor() {\r\n        super(AopActions.registAspect);\r\n    }\r\n\r\n    protected working(container: IContainer, data: RegistAspectActionData) {\r\n        let type = data.targetType;\r\n        let lifeScope = container.getLifeScope();\r\n        let matchs = lifeScope.getClassDecorators(type, surm => surm.actions.includes(AopActions.registAspect) && hasOwnClassMetadata(surm.name, type));\r\n        let aspectMgr = container.get<IAdvisor>(AdvisorToken);\r\n        let raiseContainer = data.raiseContainer || container;\r\n        matchs.forEach(surm => {\r\n            let metadata = getOwnTypeMetadata<ClassMetadata>(surm.name, type);\r\n            if (Array.isArray(metadata) && metadata.length > 0) {\r\n                metadata.forEach(meta => {\r\n                    if (isClass(meta.type)) {\r\n                        aspectMgr.add(meta.type, raiseContainer);\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n\n                        static getClassAnnations():any  {\n                            return {\"name\":\"RegistAspectAction\",\"params\":{\"constructor\":[],\"working\":[\"container\",\"data\"]}};\n                        }\n                   }\r\n"]}