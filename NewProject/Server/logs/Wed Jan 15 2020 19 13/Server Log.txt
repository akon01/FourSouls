Start Log 

 Player 1 19:13:53 $MATCH:  

 Player 1 19:13:53 $START_GAME:  

 Player 1 19:13:53 $MOVE_TO_TABLE:  

 Player 2 19:13:53 $MOVE_TO_TABLE:  

 Player 2 19:14:01 $FINISH_LOAD:  
{"id":2,"turnPlayerId":2} 

 Player 1 19:14:01 $FINISH_LOAD:  
{"id":1,"turnPlayerId":2} 

 Player 2 19:14:01 $ASSIGN_CHAR_TO_PLAYER:  
{"playerId":1,"charCardId":291,"itemCardId":292} 

 Player 2 19:14:01 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"PLAYER_ADD_ITEM","args":[{"type":0,"number":284}],"result":true,"preventMethod":false,"methodScopeId":281,"scopeIsPlayer":true,"index":1,"originStackId":-1},"isAfterActivation":true,"index":1} 

 Player 2 19:14:01 $ASSIGN_CHAR_TO_PLAYER:  
{"playerId":2,"charCardId":281,"itemCardId":284} 

 Player 2 19:14:01 $DECK_ARRAGMENT:  
{"deckType":1,"arrangement":[104,105,59,25,23,92,42,27,109,132,68,9,72,17,95,110,46,58,107,35,53,18,61,142,74,140,20,129,62,76,87,71,75,133,91,16,122,101,78,64,56,39,136,43,85,139,77,106,97,89,36,117,65,100,116,112,124,130,24,66,29,125,88,118,26,121,131,128,38,94,98,47,114,108,115,50,37,8,41,138,137,86,34,22,81,11,84,21,127,31,120,119,134,93,111,33,13,126,52,48,32,14,51,67,44,40,99,12,103,55,113,96,57,80,7,90,15,73,49,45,60,123,135,79,28,102,63,70,30,83,54,141,82,10,69,19]} 

 Player 2 19:14:02 $DECK_ARRAGMENT:  
{"deckType":2,"arrangement":[274,248,234,239,244,227,268,228,230,243,254,256,246,255,249,237,223,267,242,236,247,257,273,250,264,272,276,251,266,245,226,241,253,233,238,235,263,224,232,270,259,252,258,260,265,225,271,262,275,231,269,261,229,240]} 

 Player 2 19:14:02 $DECK_ARRAGMENT:  
{"deckType":5,"arrangement":[161,210,174,150,190,175,212,164,181,172,205,196,176,182,169,168,148,146,217,166,167,165,186,159,216,156,149,204,153,194,180,183,173,184,152,207,202,170,189,218,197,179,213,191,215,203,157,206,162,195,147,199,198,219,201,193,211,185,155,209,163,220,188,145,158,177,151,160,154,192,214,171,187,200,208,178]} 

 Player 2 19:14:02 $DRAW_CARD:  
{"deckType":5} 

 Player 2 19:14:02 $FLIP_CARD:  
{"cardId":178} 

 Player 2 19:14:02 $ADD_STORE_CARD:  
{"cardId":178} 

 Player 2 19:14:02 $DRAW_CARD:  
{"deckType":5} 

 Player 2 19:14:02 $FLIP_CARD:  
{"cardId":208} 

 Player 2 19:14:02 $ADD_STORE_CARD:  
{"cardId":208} 

 Player 2 19:14:02 $DRAW_CARD:  
{"deckType":2} 

 Player 2 19:14:02 $FLIP_CARD:  
{"cardId":240} 

 Player 2 19:14:02 $ADD_MONSTER:  
{"monsterPlaceId":1,"monsterId":240} 

 Player 2 19:14:02 $NEW_MONSTER_ON_PLACE:  
{"cardId":240,"monsterPlaceId":1} 

 Player 2 19:14:02 $DRAW_CARD:  
{"deckType":2} 

 Player 2 19:14:02 $FLIP_CARD:  
{"cardId":229} 

 Player 2 19:14:02 $REGISTER_PASSIVE_ITEM:  
{"cardId":229} 

 Player 2 19:14:02 $ADD_MONSTER:  
{"monsterPlaceId":2,"monsterId":229} 

 Player 2 19:14:02 $NEW_MONSTER_ON_PLACE:  
{"cardId":229,"monsterPlaceId":2} 

 Player 2 19:14:02 $SET_MONEY:  
{"playerId":1,"numOfCoins":3} 

 Player 2 19:14:02 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"PLAYER_CHANGE_MONEY","args":[{"type":2,"number":3}],"result":null,"preventMethod":false,"methodScopeId":291,"scopeIsPlayer":true,"index":2,"originStackId":-1},"isAfterActivation":true,"index":2} 

 Player 2 19:14:02 $DRAW_CARD:  
{"deckType":1} 

 Player 2 19:14:02 $MOVE_CARD:  
{"moveIndex":1,"cardId":19,"placeID":1,"flipIfFlipped":false,"firstPos":{"x":1,"y":-5,"z":0},"playerId":2,"placeType":"Hand"} 

 Player 1 19:14:02 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"PLAYER_ADD_ITEM","args":[{"type":0,"number":292}],"result":true,"preventMethod":false,"methodScopeId":291,"scopeIsPlayer":true,"index":1,"originStackId":-1},"isAfterActivation":true,"index":1} 

 Player 1 19:14:02 $MOVE_CARD_END:  
{"moveIndex":1,"cardId":19,"flipIfFlipped":false,"playerId":2} 

 Player 2 19:14:03 $CARD_DRAWN:  
{"playerId":1,"deckType":1,"drawnCardId":19} 

 Player 2 19:14:03 $FLIP_CARD:  
{"cardId":19} 

 Player 2 19:14:03 $FLIP_CARD:  
{"cardId":19} 

 Player 2 19:14:03 $PLAYER_GET_LOOT:  
{"playerId":1,"cardId":19} 

 Player 2 19:14:03 $DRAW_CARD:  
{"deckType":1} 

 Player 2 19:14:03 $MOVE_CARD:  
{"moveIndex":2,"cardId":69,"placeID":1,"flipIfFlipped":false,"firstPos":{"x":1,"y":-5,"z":0},"playerId":2,"placeType":"Hand"} 

 Player 1 19:14:03 $MOVE_CARD_END:  
{"moveIndex":2,"cardId":69,"flipIfFlipped":false,"playerId":2} 

 Player 2 19:14:03 $CARD_DRAWN:  
{"playerId":1,"deckType":1,"drawnCardId":69} 

 Player 2 19:14:03 $FLIP_CARD:  
{"cardId":69} 

 Player 2 19:14:03 $FLIP_CARD:  
{"cardId":69} 

 Player 2 19:14:03 $PLAYER_GET_LOOT:  
{"playerId":1,"cardId":69} 

 Player 2 19:14:03 $DRAW_CARD:  
{"deckType":1} 

 Player 2 19:14:03 $MOVE_CARD:  
{"moveIndex":3,"cardId":10,"placeID":1,"flipIfFlipped":false,"firstPos":{"x":1,"y":-5,"z":0},"playerId":2,"placeType":"Hand"} 

 Player 1 19:14:04 $MOVE_CARD_END:  
{"moveIndex":3,"cardId":10,"flipIfFlipped":false,"playerId":2} 

 Player 2 19:14:04 $CARD_DRAWN:  
{"playerId":1,"deckType":1,"drawnCardId":10} 

 Player 2 19:14:04 $FLIP_CARD:  
{"cardId":10} 

 Player 2 19:14:04 $FLIP_CARD:  
{"cardId":10} 

 Player 2 19:14:04 $PLAYER_GET_LOOT:  
{"playerId":1,"cardId":10} 

 Player 2 19:14:04 $SET_MONEY:  
{"playerId":2,"numOfCoins":3} 

 Player 2 19:14:04 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"PLAYER_CHANGE_MONEY","args":[{"type":2,"number":3}],"result":null,"preventMethod":false,"methodScopeId":281,"scopeIsPlayer":true,"index":3,"originStackId":-1},"isAfterActivation":true,"index":3} 

 Player 2 19:14:04 $DRAW_CARD:  
{"deckType":1} 

 Player 2 19:14:04 $MOVE_CARD:  
{"moveIndex":4,"cardId":82,"placeID":2,"flipIfFlipped":false,"firstPos":{"x":1,"y":-5,"z":0},"playerId":2,"placeType":"Hand"} 

 Player 1 19:14:04 $MOVE_CARD_END:  
{"moveIndex":4,"cardId":82,"flipIfFlipped":false,"playerId":2} 

 Player 2 19:14:04 $CARD_DRAWN:  
{"playerId":2,"deckType":1,"drawnCardId":82} 

 Player 2 19:14:04 $FLIP_CARD:  
{"cardId":82} 

 Player 2 19:14:04 $PLAYER_GET_LOOT:  
{"playerId":2,"cardId":82} 

 Player 2 19:14:04 $DRAW_CARD:  
{"deckType":1} 

 Player 2 19:14:04 $MOVE_CARD:  
{"moveIndex":5,"cardId":141,"placeID":2,"flipIfFlipped":false,"firstPos":{"x":1,"y":-5,"z":0},"playerId":2,"placeType":"Hand"} 

 Player 1 19:14:05 $MOVE_CARD_END:  
{"moveIndex":5,"cardId":141,"flipIfFlipped":false,"playerId":2} 

 Player 2 19:14:05 $CARD_DRAWN:  
{"playerId":2,"deckType":1,"drawnCardId":141} 

 Player 2 19:14:05 $FLIP_CARD:  
{"cardId":141} 

 Player 2 19:14:05 $PLAYER_GET_LOOT:  
{"playerId":2,"cardId":141} 

 Player 2 19:14:05 $DRAW_CARD:  
{"deckType":1} 

 Player 2 19:14:05 $MOVE_CARD:  
{"moveIndex":6,"cardId":54,"placeID":2,"flipIfFlipped":false,"firstPos":{"x":1,"y":-5,"z":0},"playerId":2,"placeType":"Hand"} 

 Player 1 19:14:05 $MOVE_CARD_END:  
{"moveIndex":6,"cardId":54,"flipIfFlipped":false,"playerId":2} 

 Player 2 19:14:05 $CARD_DRAWN:  
{"playerId":2,"deckType":1,"drawnCardId":54} 

 Player 2 19:14:05 $FLIP_CARD:  
{"cardId":54} 

 Player 2 19:14:05 $PLAYER_GET_LOOT:  
{"playerId":2,"cardId":54} 

 Player 2 19:14:05 $GAME_HAS_STARTED:  

 Player 2 19:14:05 $SET_TURN:  
{"playerId":2} 

 Player 2 19:14:05 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 2 19:14:05 $NEXT_STACK_ID:  

 Player 2 19:14:05 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 19:14:05 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 start turn loot"} 

 Player 2 19:14:05 $ADD_TO_STACK:  
{"stackEffect":{"entityId":1,"creatorCardId":281,"turnPlayerCardId":281,"stackEffectType":13}} 

 Player 2 19:14:05 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 start turn loot"} 

 Player 2 19:14:05 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":1,"creatorCardId":281,"turnPlayerCardId":281,"stackEffectType":13}} 

 Player 2 19:14:05 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":0,"_text":"Add StartTurnLoot 1 "}} 

 Player 2 19:14:05 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 2 19:14:05 $ACTION_MASSAGE_REMOVE:  
{"id":0} 

 Player 2 19:14:05 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 start turn loot"} 

 Player 2 19:14:05 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":1,"creatorCardId":281,"turnPlayerCardId":281,"stackEffectType":13}} 

 Player 2 19:14:05 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":1,"_text":"Response Adding StartTurnLoot 1"},"childOfId":0} 

 Player 2 19:14:05 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":2,"_text":"Wait For Response From Player 2 "},"childOfId":0} 

 Player 2 19:14:05 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 2 19:14:05 $ACTION_MASSAGE_REMOVE:  
{"id":2} 

 Player 2 19:14:05 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":3,"_text":"Wait For Response From Player 1 "},"childOfId":0} 

 Player 2 19:14:06 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 2 19:14:06 $GET_REACTION:  
{"playerId":1,"activePlayerId":2} 

 Player 1 19:14:06 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 19:14:06 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 19:14:06 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 start turn loot"} 

 Player 1 19:14:06 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 start turn loot"} 

 Player 1 19:14:06 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 start turn loot"} 

 Player 1 19:14:06 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 start turn loot"} 

 Player 1 19:14:06 $RESPOND_TO:  
{"playerId":2,"stackEffectResponse":false} 

 Player 2 19:14:06 $ACTION_MASSAGE_REMOVE:  
{"id":3} 

 Player 2 19:14:06 $ACTION_MASSAGE_REMOVE:  
{"id":1} 

 Player 2 19:14:06 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":4,"_text":"Resolve StartTurnLoot 1 "}} 

 Player 2 19:14:06 $DRAW_CARD:  
{"deckType":1} 

 Player 2 19:14:06 $MOVE_CARD:  
{"moveIndex":7,"cardId":83,"placeID":2,"flipIfFlipped":false,"firstPos":{"x":1,"y":-5,"z":0},"playerId":2,"placeType":"Hand"} 

 Player 1 19:14:06 $MOVE_CARD_END:  
{"moveIndex":7,"cardId":83,"flipIfFlipped":false,"playerId":2} 

 Player 2 19:14:06 $CARD_DRAWN:  
{"playerId":2,"deckType":1,"drawnCardId":83} 

 Player 2 19:14:06 $FLIP_CARD:  
{"cardId":83} 

 Player 2 19:14:06 $PLAYER_GET_LOOT:  
{"playerId":2,"cardId":83} 

 Player 2 19:14:06 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 start turn loot"} 

 Player 2 19:14:06 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":1,"creatorCardId":281,"turnPlayerCardId":281,"stackEffectType":13}} 

 Player 2 19:14:06 $ACTION_MASSAGE_REMOVE:  
{"id":4} 

 Player 2 19:14:06 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 19:14:06 $REMOVE_SE_VIS_PREV:  
{"stackEffect":{"entityId":1,"creatorCardId":281,"turnPlayerCardId":281,"stackEffectType":13}} 

 Player 2 19:14:06 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":5,"_text":"Remove After Resolve StartTurnLoot 1  "}} 

 Player 2 19:14:06 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 19:14:06 $REMOVE_FROM_STACK:  
{"stackEffect":{"entityId":1,"creatorCardId":281,"turnPlayerCardId":281,"stackEffectType":13}} 

 Player 2 19:14:07 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":6,"_text":"Response Remove After Resolve StartTurnLoot 1"},"childOfId":5} 

 Player 2 19:14:07 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":7,"_text":"Wait For Response From Player 1 "},"childOfId":5} 

 Player 2 19:14:07 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 2 19:14:07 $GET_REACTION:  
{"playerId":1,"activePlayerId":2} 

 Player 1 19:14:07 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 start turn loot"} 

 Player 1 19:14:07 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 start turn loot"} 

 Player 1 19:14:07 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 start turn loot"} 

 Player 1 19:14:07 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 start turn loot"} 

 Player 1 19:14:07 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 start turn loot"} 

 Player 1 19:14:07 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 start turn loot"} 

 Player 1 19:14:07 $RESPOND_TO:  
{"playerId":2,"stackEffectResponse":false} 

 Player 2 19:14:07 $ACTION_MASSAGE_REMOVE:  
{"id":7} 

 Player 2 19:14:07 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":8,"_text":"Wait For Response From Player 2 "},"childOfId":5} 

 Player 2 19:14:07 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 2 19:14:07 $ACTION_MASSAGE_REMOVE:  
{"id":8} 

 Player 2 19:14:07 $ACTION_MASSAGE_REMOVE:  
{"id":6} 

 Player 2 19:14:07 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":9,"_text":"Stack Was Emptied "}} 

 Player 2 19:14:07 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 19:14:07 $ACTION_MASSAGE_REMOVE:  
{"id":0} 

 Player 2 19:14:07 $ACTION_MASSAGE_REMOVE:  
{"id":1} 

 Player 2 19:14:07 $ACTION_MASSAGE_REMOVE:  
{"id":2} 

 Player 2 19:14:07 $ACTION_MASSAGE_REMOVE:  
{"id":3} 

 Player 2 19:14:07 $ACTION_MASSAGE_REMOVE:  
{"id":4} 

 Player 2 19:14:07 $ACTION_MASSAGE_REMOVE:  
{"id":5} 

 Player 2 19:14:07 $ACTION_MASSAGE_REMOVE:  
{"id":9} 

 Player 2 19:14:07 $UPDATE_ACTIONS:  

 Player 2 19:14:08 $ACTION_MASSAGE_REMOVE:  
{"id":9} 

 Player 2 19:14:09 $ACTION_MASSAGE_REMOVE:  
{"id":5} 

 Player 1 19:14:12 $MOVE_CARD:  
{"moveIndex":8,"cardId":161,"placeID":1,"flipIfFlipped":true,"playerId":1,"placeType":"Hand"} 

 Player 2 19:14:12 $MOVE_CARD_END:  
{"moveIndex":8,"cardId":161,"flipIfFlipped":true,"playerId":1} 

 Player 1 19:14:12 $REGISTER_PASSIVE_ITEM:  
{"cardId":161} 

 Player 1 19:14:12 $MOVE_CARD:  
{"moveIndex":9,"cardId":161,"placeID":1,"flipIfFlipped":true,"playerId":1,"placeType":"Desk"} 

 Player 2 19:14:13 $MOVE_CARD_END:  
{"moveIndex":9,"cardId":161,"flipIfFlipped":true,"playerId":1} 

 Player 1 19:14:13 $ADD_AN_ITEM:  
{"playerId":1,"cardId":161,"isReward":true} 

 Player 1 19:14:13 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"PLAYER_ADD_ITEM","args":[{"type":0,"number":161}],"result":true,"preventMethod":false,"methodScopeId":291,"scopeIsPlayer":true,"index":2,"originStackId":-1},"isAfterActivation":true,"index":2} 

 Player 2 19:14:17 $SHOW_DECISION:  
{"startCardId":281,"endCardId":229} 

 Player 2 19:14:20 $NEXT_STACK_ID:  

 Player 2 19:14:20 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 19:14:20 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2  declared attack on Chub"} 

 Player 2 19:14:20 $ADD_TO_STACK:  
{"stackEffect":{"entityId":2,"creatorCardId":281,"attackingPlayerCardId":281,"idOfCardBeingAttacked":229,"stackEffectType":4}} 

 Player 2 19:14:20 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2  declared attack on Chub"} 

 Player 2 19:14:20 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":2,"creatorCardId":281,"attackingPlayerCardId":281,"idOfCardBeingAttacked":229,"stackEffectType":4}} 

 Player 2 19:14:20 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":10,"_text":"Add DeclareAttack 2 "}} 

 Player 2 19:14:20 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 2 19:14:20 $ACTION_MASSAGE_REMOVE:  
{"id":10} 

 Player 2 19:14:20 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2  declared attack on Chub"} 

 Player 2 19:14:20 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":2,"creatorCardId":281,"attackingPlayerCardId":281,"idOfCardBeingAttacked":229,"stackEffectType":4}} 

 Player 2 19:14:20 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":11,"_text":"Response Adding DeclareAttack 2"},"childOfId":10} 

 Player 2 19:14:20 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":12,"_text":"Wait For Response From Player 2 "},"childOfId":10} 

 Player 2 19:14:20 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 2 19:14:20 $ACTION_MASSAGE_REMOVE:  
{"id":12} 

 Player 2 19:14:20 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":13,"_text":"Wait For Response From Player 1 "},"childOfId":10} 

 Player 2 19:14:21 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 2 19:14:21 $GET_REACTION:  
{"playerId":1,"activePlayerId":2} 

 Player 1 19:14:21 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 19:14:21 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 19:14:21 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2  declared attack on Chub"} 

 Player 1 19:14:21 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2  declared attack on Chub"} 

 Player 1 19:14:21 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2  declared attack on Chub"} 

 Player 1 19:14:21 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2  declared attack on Chub"} 

 Player 1 19:14:21 $RESPOND_TO:  
{"playerId":2,"stackEffectResponse":false} 

 Player 2 19:14:21 $ACTION_MASSAGE_REMOVE:  
{"id":13} 

 Player 2 19:14:21 $ACTION_MASSAGE_REMOVE:  
{"id":11} 

 Player 2 19:14:21 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":14,"_text":"Resolve DeclareAttack 2 "}} 

 Player 2 19:14:21 $ACTIVATE_PARTICLE_EFFECT:  
{"cardId":229,"particleType":5} 

 Player 2 19:14:21 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"PLAYER_DECLARE_ATTACK","args":[],"result":null,"preventMethod":false,"methodScopeId":281,"scopeIsPlayer":true,"index":4,"originStackId":2},"isAfterActivation":true,"index":4} 

 Player 2 19:14:21 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2  declared attack on Chub"} 

 Player 2 19:14:21 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":2,"creatorCardId":281,"attackingPlayerCardId":281,"idOfCardBeingAttacked":229,"stackEffectType":4}} 

 Player 2 19:14:21 $ACTION_MASSAGE_REMOVE:  
{"id":14} 

 Player 2 19:14:21 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 19:14:21 $REMOVE_SE_VIS_PREV:  
{"stackEffect":{"entityId":2,"creatorCardId":281,"attackingPlayerCardId":281,"idOfCardBeingAttacked":229,"stackEffectType":4}} 

 Player 2 19:14:21 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":15,"_text":"Remove After Resolve DeclareAttack 2  "}} 

 Player 2 19:14:21 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 19:14:21 $REMOVE_FROM_STACK:  
{"stackEffect":{"entityId":2,"creatorCardId":281,"attackingPlayerCardId":281,"idOfCardBeingAttacked":229,"stackEffectType":4}} 

 Player 2 19:14:21 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":16,"_text":"Response Remove After Resolve DeclareAttack 2"},"childOfId":15} 

 Player 2 19:14:21 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":17,"_text":"Wait For Response From Player 1 "},"childOfId":15} 

 Player 2 19:14:21 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 2 19:14:21 $GET_REACTION:  
{"playerId":1,"activePlayerId":2} 

 Player 1 19:14:21 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2  declared attack on Chub"} 

 Player 1 19:14:21 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2  declared attack on Chub"} 

 Player 1 19:14:21 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2  declared attack on Chub"} 

 Player 1 19:14:21 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2  declared attack on Chub"} 

 Player 1 19:14:21 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2  declared attack on Chub"} 

 Player 1 19:14:21 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2  declared attack on Chub"} 

 Player 1 19:14:21 $RESPOND_TO:  
{"playerId":2,"stackEffectResponse":false} 

 Player 2 19:14:22 $ACTION_MASSAGE_REMOVE:  
{"id":17} 

 Player 2 19:14:22 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":18,"_text":"Wait For Response From Player 2 "},"childOfId":15} 

 Player 2 19:14:22 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 2 19:14:22 $ACTION_MASSAGE_REMOVE:  
{"id":18} 

 Player 2 19:14:22 $ACTION_MASSAGE_REMOVE:  
{"id":16} 

 Player 2 19:14:22 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":19,"_text":"Stack Was Emptied "}} 

 Player 2 19:14:22 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 19:14:22 $ACTION_MASSAGE_REMOVE:  
{"id":0} 

 Player 2 19:14:22 $ACTION_MASSAGE_REMOVE:  
{"id":1} 

 Player 2 19:14:22 $ACTION_MASSAGE_REMOVE:  
{"id":2} 

 Player 2 19:14:22 $ACTION_MASSAGE_REMOVE:  
{"id":3} 

 Player 2 19:14:22 $ACTION_MASSAGE_REMOVE:  
{"id":4} 

 Player 2 19:14:22 $ACTION_MASSAGE_REMOVE:  
{"id":5} 

 Player 2 19:14:22 $ACTION_MASSAGE_REMOVE:  
{"id":9} 

 Player 2 19:14:22 $ACTION_MASSAGE_REMOVE:  
{"id":10} 

 Player 2 19:14:22 $ACTION_MASSAGE_REMOVE:  
{"id":14} 

 Player 2 19:14:22 $ACTION_MASSAGE_REMOVE:  
{"id":15} 

 Player 2 19:14:22 $ACTION_MASSAGE_REMOVE:  
{"id":19} 

 Player 2 19:14:23 $ACTION_MASSAGE_REMOVE:  
{"id":19} 

 Player 2 19:14:24 $ACTION_MASSAGE_REMOVE:  
{"id":15} 

 Player 2 19:14:26 $NEXT_STACK_ID:  

 Player 2 19:14:26 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 19:14:26 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is rolling against Chub<Monster>"} 

 Player 2 19:14:26 $ADD_TO_STACK:  
{"stackEffect":{"entityId":3,"creatorCardId":281,"rollingPlayerCardId":281,"stackEffectType":2,"attackedMonsterCardId":229}} 

 Player 2 19:14:26 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is rolling against Chub<Monster>"} 

 Player 2 19:14:26 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":3,"creatorCardId":281,"rollingPlayerCardId":281,"stackEffectType":2,"attackedMonsterCardId":229}} 

 Player 2 19:14:26 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":20,"_text":"Add AttackRoll 3 "}} 

 Player 2 19:14:26 $ROLL_DICE:  
{"playerId":2} 

 Player 1 19:14:26 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 19:14:26 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 19:14:26 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is rolling against Chub<Monster>"} 

 Player 1 19:14:26 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is rolling against Chub<Monster>"} 

 Player 2 19:14:27 $ROLL_DICE_ENDED:  
{"playerId":2,"numberRolled":2} 

 Player 2 19:14:27 $UPDATE_STACK_VIS:  
{"stackId":3,"text":"player rolled 2 vs Chub<Monster>"} 

 Player 2 19:14:27 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 rolled 2 vs Chub<Monster>"} 

 Player 2 19:14:27 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 2 19:14:27 $ACTION_MASSAGE_REMOVE:  
{"id":20} 

 Player 2 19:14:27 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 rolled 2 vs Chub<Monster>"} 

 Player 2 19:14:27 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":3,"creatorCardId":281,"numberRolled":2,"rollingPlayerCardId":281,"stackEffectType":2,"attackedMonsterCardId":229}} 

 Player 2 19:14:27 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":21,"_text":"Response Adding AttackRoll 3"},"childOfId":20} 

 Player 2 19:14:27 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":22,"_text":"Wait For Response From Player 2 "},"childOfId":20} 

 Player 2 19:14:27 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 2 19:14:27 $ACTION_MASSAGE_REMOVE:  
{"id":22} 

 Player 2 19:14:27 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":23,"_text":"Wait For Response From Player 1 "},"childOfId":20} 

 Player 2 19:14:27 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 2 19:14:27 $GET_REACTION:  
{"playerId":1,"activePlayerId":2} 

 Player 1 19:14:27 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is rolling against Chub<Monster>"} 

 Player 1 19:14:27 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is rolling against Chub<Monster>"} 

 Player 1 19:14:27 $RESPOND_TO:  
{"playerId":2,"stackEffectResponse":false} 

 Player 2 19:14:27 $ACTION_MASSAGE_REMOVE:  
{"id":23} 

 Player 2 19:14:27 $ACTION_MASSAGE_REMOVE:  
{"id":21} 

 Player 2 19:14:27 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":24,"_text":"Resolve AttackRoll 3 "}} 

 Player 2 19:14:28 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":25,"_text":"Added 0 to original roll"}} 

 Player 2 19:14:28 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"PLAYER_ROLL_DICE","args":[{"type":2,"number":3},{"type":2,"number":2},{"type":2,"number":3}],"result":null,"preventMethod":false,"methodScopeId":281,"scopeIsPlayer":true,"index":1,"originStackId":3},"isAfterActivation":false,"index":1} 

 Player 2 19:14:28 $NEXT_STACK_ID:  

 Player 2 19:14:28 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 rolled 2 vs Chub<Monster>"} 

 Player 2 19:14:28 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 rolled 2 vs Chub<Monster> \n2:Activate Dead Bird effect ChainEffects<ChainEffects>"} 

 Player 2 19:14:28 $ADD_TO_STACK:  
{"stackEffect":{"effectCollectedData":null,"entityId":4,"creatorCardId":291,"hasLockingStackEffect":false,"cardActivatorId":1,"cardWithEffectId":161,"effectToDo":{"effectName":"ChainEffects","cardEffectNum":0,"cardPlayerId":1,"cardId":161,"effctType":0},"isAfterActivation":false,"index":1,"hasDataBeenCollectedYet":false,"stackEffectType":14}} 

 Player 2 19:14:28 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 rolled 2 vs Chub<Monster> \n2:Activate Dead Bird effect ChainEffects<ChainEffects>"} 

 Player 2 19:14:28 $ADD_SE_VIS_PREV:  
{"stackEffect":{"effectCollectedData":null,"entityId":4,"creatorCardId":291,"hasLockingStackEffect":false,"cardActivatorId":1,"cardWithEffectId":161,"effectToDo":{"effectName":"ChainEffects","cardEffectNum":0,"cardPlayerId":1,"cardId":161,"effctType":0},"isAfterActivation":false,"index":1,"hasDataBeenCollectedYet":false,"stackEffectType":14}} 

 Player 2 19:14:28 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":26,"_text":"Add ActivatePassiveEffect 4 "}} 

 Player 2 19:14:28 $LOG_ERROR:  
"no MetaIndex" 
//////Error From Player 2////
  

 Player 2 19:14:28 $LOG_ERROR:  
//////Error From Player 2////
 [object Object]
////// 

 Player 2 19:14:28 $LOG_ERROR:  
"no MetaIndex" 
//////Error From Player 2////
  

 Player 2 19:14:28 $LOG_ERROR:  
//////Error From Player 2////
 [object Object]
////// 

 Player 2 19:14:28 $LOG_ERROR:  
"no MetaIndex" 
//////Error From Player 2////
  

 Player 2 19:14:28 $LOG_ERROR:  
//////Error From Player 2////
 [object Object]
////// 

 Player 2 19:14:28 $LOG_ERROR:  
{"message":"\"Cannot read property 'getComponent' of undefined\"","stack":"\"TypeError: Cannot read property 'getComponent' of undefined\\n    at http://localhost:7456/preview-scripts/assets/Script/Managers/DataInterpreter.js:159:56\\n    at Array.map (<anonymous>)\\n    at Function.DataInterpreter.convertToServerData (http://localhost:7456/preview-scripts/assets/Script/Managers/DataInterpreter.js:152:75)\\n    at CardEffect.<anonymous> (http://localhost:7456/preview-scripts/assets/Script/Entites/CardEffect.js:362:62)\\n    at step (http://localhost:7456/app/engine/bin/cocos2d-js-for-preview.js:89882:21)\\n    at Object.throw (http://localhost:7456/app/engine/bin/cocos2d-js-for-preview.js:89826:18)\\n    at rejected (http://localhost:7456/app/engine/bin/cocos2d-js-for-preview.js:89794:36)\""} 
//////Error From Player 2////
  

 Player 2 19:14:28 $LOG_ERROR:  
//////Error From Player 2////

 "\"Cannot read property 'getComponent' of undefined\""

 + "\"TypeError: Cannot read property 'getComponent' of undefined\
    at http://localhost:7456/preview-scripts/assets/Script/Managers/DataInterpreter.js:159:56\
    at Array.map (<anonymous>)\
    at Function.DataInterpreter.convertToServerData (http://localhost:7456/preview-scripts/assets/Script/Managers/DataInterpreter.js:152:75)\
    at CardEffect.<anonymous> (http://localhost:7456/preview-scripts/assets/Script/Entites/CardEffect.js:362:62)\
    at step (http://localhost:7456/app/engine/bin/cocos2d-js-for-preview.js:89882:21)\
    at Object.throw (http://localhost:7456/app/engine/bin/cocos2d-js-for-preview.js:89826:18)\
    at rejected (http://localhost:7456/app/engine/bin/cocos2d-js-for-preview.js:89794:36)\""

////// 
//////Error From Player 2////

 "\"Cannot read property 'getComponent' of undefined\""

 + "\"TypeError: Cannot read property 'getComponent' of undefined\
    at http://localhost:7456/preview-scripts/assets/Script/Managers/DataInterpreter.js:159:56\
    at Array.map (<anonymous>)\
    at Function.DataInterpreter.convertToServerData (http://localhost:7456/preview-scripts/assets/Script/Managers/DataInterpreter.js:152:75)\
    at CardEffect.<anonymous> (http://localhost:7456/preview-scripts/assets/Script/Entites/CardEffect.js:362:62)\
    at step (http://localhost:7456/app/engine/bin/cocos2d-js-for-preview.js:89882:21)\
    at Object.throw (http://localhost:7456/app/engine/bin/cocos2d-js-for-preview.js:89826:18)\
    at rejected (http://localhost:7456/app/engine/bin/cocos2d-js-for-preview.js:89794:36)\""

////// 

 Player 2 19:14:28 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 rolled 2 vs Chub<Monster> \n2:Activate Dead Bird effect ChainEffects<ChainEffects>"} 

 Player 2 19:14:28 $ACTION_MASSAGE_REMOVE:  
{"id":26} 

 Player 2 19:14:28 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 rolled 2 vs Chub<Monster> \n2:Activate Dead Bird effect ChainEffects<ChainEffects>"} 

 Player 2 19:14:28 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"effectCollectedData":{"effectTargets":[],"chainEffectsData":[],"methodArgs":[],"isPassive":true,"terminateOriginal":false,"effectCardOwner":291,"effectCardPlayer":291},"entityId":4,"creatorCardId":291,"hasLockingStackEffect":false,"cardActivatorId":1,"cardWithEffectId":161,"effectToDo":{"effectName":"ChainEffects","cardEffectNum":0,"cardPlayerId":1,"cardId":161,"effctType":0},"isAfterActivation":false,"index":1,"hasDataBeenCollectedYet":true,"stackEffectType":14}} 

 Player 2 19:14:28 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":27,"_text":"Response Adding ActivatePassiveEffect 4"},"childOfId":26} 

 Player 2 19:14:28 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":28,"_text":"Wait For Response From Player 1 "},"childOfId":26} 

 Player 2 19:14:28 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 2 19:14:28 $GET_REACTION:  
{"playerId":1,"activePlayerId":2} 

 Player 1 19:14:28 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is rolling against Chub<Monster>"} 

 Player 1 19:14:28 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is rolling against Chub<Monster>"} 

 Player 1 19:14:28 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is rolling against Chub<Monster> \n2:Activate Dead Bird "} 

 Player 1 19:14:28 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is rolling against Chub<Monster> \n2:Activate Dead Bird "} 

 Player 1 19:14:29 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is rolling against Chub<Monster> \n2:Activate Dead Bird "} 

 Player 1 19:14:29 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is rolling against Chub<Monster> \n2:Activate Dead Bird "} 

 Player 1 19:14:29 $RESPOND_TO:  
{"playerId":2,"stackEffectResponse":false} 

 Player 2 19:14:29 $ACTION_MASSAGE_REMOVE:  
{"id":28} 

 Player 2 19:14:29 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":29,"_text":"Wait For Response From Player 2 "},"childOfId":26} 

 Player 2 19:14:29 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 2 19:14:29 $ACTION_MASSAGE_REMOVE:  
{"id":29} 

 Player 2 19:14:29 $ACTION_MASSAGE_REMOVE:  
{"id":27} 

 Player 2 19:14:29 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":30,"_text":"Resolve ActivatePassiveEffect 4 "}} 

 Player 2 19:14:29 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 rolled 2 vs Chub<Monster> \n2:Activate Dead Bird effect ChainEffects<ChainEffects>"} 

 Player 2 19:14:29 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 rolled 2 vs Chub<Monster> \n2:Activate Dead Bird effect ChainEffects<ChainEffects>"} 

 Player 2 19:14:29 $DO_STACK_EFFECT:  
{"originPlayerId":2,"playerId":1,"currentStack":[{"entityId":3,"creatorCardId":281,"numberRolled":2,"rollingPlayerCardId":281,"stackEffectType":2,"attackedMonsterCardId":229},{"effectCollectedData":{"effectTargets":[],"chainEffectsData":[],"methodArgs":[],"isPassive":true,"terminateOriginal":false,"effectCardOwner":291,"effectCardPlayer":291},"entityId":4,"creatorCardId":291,"hasLockingStackEffect":false,"cardActivatorId":1,"cardWithEffectId":161,"effectToDo":{"effectName":"ChainEffects","cardEffectNum":0,"cardPlayerId":1,"cardId":161,"effctType":0},"isAfterActivation":false,"index":1,"hasDataBeenCollectedYet":true,"stackEffectType":14}]} 

 Player 1 19:14:29 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is rolling against Chub<Monster> \n2:Activate Dead Bird "} 

 Player 1 19:14:29 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is rolling against Chub<Monster> \n2:Activate Dead Bird "} 

 Player 1 19:14:29 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is rolling against Chub<Monster> \n2:Activate Dead Bird "} 

 Player 1 19:14:29 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is rolling against Chub<Monster> \n2:Activate Dead Bird "} 

 Player 1 19:14:29 $ACTIVATE_PARTICLE_EFFECT:  
{"cardId":161,"particleType":6} 

 Player 2 19:14:30 $ACTION_MASSAGE_REMOVE:  
{"id":25} 

 Player 1 19:14:31 $DISABLE_PARTICLE_EFFECT:  
{"cardId":161,"particleType":6}