{"version":3,"sources":["IAdviceMatcher.ts"],"names":[],"mappings":";;AAEA,uCAA4D;AAE5D;;;GAGG;AACU,QAAA,kBAAkB,GAAG,IAAI,kBAAW,CAAiB,mBAAmB,CAAC,CAAC","file":"../IAdviceMatcher.js","sourcesContent":["import { AdviceMetadata } from './metadatas';\r\nimport { MatchPointcut } from './joinpoints';\r\nimport { Type, ObjectMap, InjectToken } from '@ts-ioc/core';\r\n\r\n/**\r\n * Aop advice matcher interface token.\r\n * it is a token id, you can register yourself IActionBuilder for this.\r\n */\r\nexport const AdviceMatcherToken = new InjectToken<IAdviceMatcher>('DI_IAdviceMatcher');\r\n\r\n/**\r\n * advice match interface, use to match advice when a registered create instance.\r\n *\r\n * @export\r\n * @interface IAdviceMatcher\r\n */\r\nexport interface IAdviceMatcher {\r\n\r\n    /**\r\n     * match pointcuts of type.\r\n     *\r\n     * @param {Type<any>} aspectType\r\n     * @param {Type<any>} type\r\n     * @param {ObjectMap<AdviceMetadata[]>} [adviceMetas]\r\n     * @param {*} [instance]\r\n     * @returns {MatchPointcut[]}\r\n     * @memberof IAdviceMatcher\r\n     */\r\n    match(aspectType: Type<any>, type: Type<any>, adviceMetas?: ObjectMap<AdviceMetadata[]>, instance?: any): MatchPointcut[]\r\n}\r\n"]}