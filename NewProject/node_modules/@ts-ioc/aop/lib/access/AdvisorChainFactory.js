"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var core_1 = require("@ts-ioc/core");
var joinpoints_1 = require("../joinpoints");
var IAdvisorChainFactory_1 = require("./IAdvisorChainFactory");
var IAdvisorChain_1 = require("./IAdvisorChain");
var NonePointcut_1 = require("../decorators/NonePointcut");
var IAdvisor_1 = require("../IAdvisor");
/**
 * advisor chain factory.
 *
 * @export
 * @class AdvisorChainFactory
 * @implements {IAdvisorChainFactory}
 */
var AdvisorChainFactory = /** @class */ (function () {
    function AdvisorChainFactory(container, advisor, advices) {
        this.container = container;
        this.advisor = advisor;
        this.advices = advices;
    }
    AdvisorChainFactory.prototype.getAdvicers = function (adviceType) {
        return (adviceType ? this.advices[adviceType] : null) || [];
    };
    AdvisorChainFactory.prototype.invoaction = function (joinPoint, state, valueOrthrowing) {
        joinPoint.state = state;
        joinPoint.returning = undefined;
        joinPoint.throwing = undefined;
        switch (state) {
            case joinpoints_1.JoinpointState.Before:
                this.before(joinPoint);
                break;
            case joinpoints_1.JoinpointState.Pointcut:
                this.pointcut(joinPoint);
                break;
            case joinpoints_1.JoinpointState.After:
                joinPoint.returning = valueOrthrowing;
                this.after(joinPoint);
                break;
            case joinpoints_1.JoinpointState.AfterThrowing:
                joinPoint.throwing = valueOrthrowing;
                this.afterThrowing(joinPoint);
                break;
            case joinpoints_1.JoinpointState.AfterReturning:
                joinPoint.returning = valueOrthrowing;
                this.afterReturning(joinPoint);
                break;
        }
    };
    AdvisorChainFactory.prototype.before = function (joinPoint) {
        var _this = this;
        var cloneJp = core_1.lang.assign({}, joinPoint);
        this.getAdvicers('Around')
            .forEach(function (advicer) {
            _this.invokeAdvice(cloneJp, advicer);
        });
        if (!core_1.isUndefined(cloneJp.args)) {
            joinPoint.args = cloneJp.args;
        }
        this.getAdvicers('Before')
            .forEach(function (advicer) {
            _this.invokeAdvice(cloneJp, advicer);
        });
    };
    AdvisorChainFactory.prototype.pointcut = function (joinPoint) {
        var _this = this;
        var cloneJp = core_1.lang.assign({}, joinPoint);
        this.getAdvicers('Pointcut')
            .forEach(function (advicer) {
            _this.invokeAdvice(cloneJp, advicer);
        });
        if (!core_1.isUndefined(cloneJp.args)) {
            joinPoint.args = cloneJp.args;
        }
    };
    AdvisorChainFactory.prototype.after = function (joinPoint) {
        var _this = this;
        var cloneJp = core_1.lang.assign({}, joinPoint);
        this.getAdvicers('Around')
            .forEach(function (advicer) {
            _this.invokeAdvice(cloneJp, advicer);
        });
        this.getAdvicers('After')
            .forEach(function (advicer) {
            _this.invokeAdvice(cloneJp, advicer);
        });
    };
    AdvisorChainFactory.prototype.afterThrowing = function (joinPoint) {
        var _this = this;
        var cloneJp = core_1.lang.assign({}, joinPoint);
        this.getAdvicers('Around')
            .forEach(function (advicer) {
            _this.invokeAdvice(cloneJp, advicer);
        });
        this.getAdvicers('AfterThrowing')
            .forEach(function (advicer) {
            _this.invokeAdvice(cloneJp, advicer);
        });
    };
    AdvisorChainFactory.prototype.afterReturning = function (joinPoint) {
        var _this = this;
        var cloneJp = core_1.lang.assign({}, joinPoint);
        var advChain = this.container.resolve(IAdvisorChain_1.AdvisorChainToken, { joinPoint: cloneJp });
        this.getAdvicers('Around')
            .forEach(function (advicer) {
            advChain.next(function (jp) {
                return _this.invokeAdvice(jp, advicer);
            });
        });
        this.getAdvicers('AfterReturning')
            .forEach(function (advicer) {
            advChain.next(function (jp) {
                return _this.invokeAdvice(jp, advicer);
            });
        });
        advChain.next(function (jp) {
            if (!core_1.isUndefined(jp.returning)) {
                joinPoint.returning = jp.returning;
            }
            return joinPoint;
        });
        advChain.process();
    };
    AdvisorChainFactory.prototype.invokeAdvice = function (joinPoint, advicer) {
        var _this = this;
        var _a;
        var providers = [];
        providers.push(core_1.Provider.createExtends(joinpoints_1.Joinpoint, joinPoint, function (inst, provider) {
            inst._cache_JoinPoint = provider.resolve(_this.container);
        }));
        var metadata = advicer.advice;
        if (!core_1.isUndefined(joinPoint.args) && metadata.args) {
            providers.push(core_1.Provider.create(metadata.args, joinPoint.args));
        }
        if (metadata.annotationArgName) {
            providers.push(core_1.Provider.create(metadata.annotationArgName, function () {
                var curj = joinPoint;
                var annotations = curj.annotations;
                while (!annotations && joinPoint.provJoinpoint) {
                    curj = joinPoint.provJoinpoint;
                    if (curj && curj.annotations) {
                        annotations = curj.annotations;
                        break;
                    }
                }
                if (core_1.isArray(annotations)) {
                    if (metadata.annotationName) {
                        var d_1 = metadata.annotationName;
                        d_1 = /^@/.test(d_1) ? d_1 : "@" + d_1;
                        return annotations.filter(function (a) { return a.decorator === d_1; });
                    }
                    return annotations;
                }
                else {
                    return [];
                }
            }));
        }
        if (!core_1.isUndefined(joinPoint.returning) && metadata.returning) {
            providers.push(core_1.Provider.create(metadata.returning, joinPoint.returning));
        }
        if (!core_1.isUndefined(joinPoint.throwing) && metadata.throwing) {
            providers.push(core_1.Provider.create(metadata.throwing, joinPoint.throwing));
        }
        return (_a = this.advisor.getContainer(advicer.aspectType, this.container)).syncInvoke.apply(_a, [advicer.aspectType, advicer.advice.propertyKey, null].concat(providers));
    };
    AdvisorChainFactory.getClassAnnations = function () {
        return { "name": "AdvisorChainFactory", "params": { "constructor": ["container", "advisor", "advices"], "getAdvicers": ["adviceType"], "invoaction": ["joinPoint", "state", "valueOrthrowing"], "before": ["joinPoint"], "pointcut": ["joinPoint"], "after": ["joinPoint"], "afterThrowing": ["joinPoint"], "afterReturning": ["joinPoint"], "invokeAdvice": ["joinPoint", "advicer"] } };
    };
    AdvisorChainFactory = tslib_1.__decorate([
        NonePointcut_1.NonePointcut(),
        core_1.Injectable(IAdvisorChainFactory_1.AdvisorChainFactoryToken),
        tslib_1.__param(0, core_1.Inject(core_1.ContainerToken)), tslib_1.__param(1, core_1.Inject(IAdvisor_1.AdvisorToken)),
        tslib_1.__metadata("design:paramtypes", [Object, Object, Object])
    ], AdvisorChainFactory);
    return AdvisorChainFactory;
}());
exports.AdvisorChainFactory = AdvisorChainFactory;

//# sourceMappingURL=../sourcemaps/access/AdvisorChainFactory.js.map
