"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var core_1 = require("@ts-ioc/core");
var Aspect_1 = require("./decorators/Aspect");
var Advisor_1 = require("./Advisor");
var actions_1 = require("./actions");
var AdviceMatcher_1 = require("./AdviceMatcher");
var AopActionFactory_1 = require("./actions/AopActionFactory");
var joinpoints_1 = require("./joinpoints");
var access_1 = require("./access");
/**
 * aop ext for ioc. auto run setup after registered.
 * with @IocExt('setup') decorator.
 * @export
 * @class AopModule
 */
var AopModule = /** @class */ (function () {
    function AopModule(container) {
        this.container = container;
    }
    /**
     * register aop for container.
     *
     * @memberof AopModule
     */
    AopModule.prototype.setup = function () {
        var container = this.container;
        container.register(joinpoints_1.Joinpoint);
        container.register(access_1.AdvisorChainFactory);
        container.register(access_1.ReturningRecognizer);
        container.register(access_1.SyncProceeding);
        container.register(access_1.AsyncPromiseProceeding);
        container.register(access_1.AsyncObservableProceeding);
        container.register(access_1.AdvisorChain);
        container.register(access_1.ProxyMethod);
        container.register(Advisor_1.Advisor);
        container.register(AdviceMatcher_1.AdviceMatcher);
        var lifeScope = container.get(core_1.LifeScopeToken);
        var factory = new AopActionFactory_1.AopActionFactory();
        lifeScope.addAction(factory.create(actions_1.AopActions.registAspect), core_1.IocState.design);
        lifeScope.addAction(factory.create(actions_1.AopActions.matchPointcut), core_1.IocState.runtime, core_1.LifeState.beforeConstructor);
        lifeScope.addAction(factory.create(actions_1.AopActions.bindMethodPointcut), core_1.IocState.runtime, core_1.LifeState.AfterInit);
        lifeScope.addAction(factory.create(actions_1.AopActions.invokeBeforeConstructorAdvices), core_1.IocState.runtime, core_1.LifeState.beforeConstructor);
        lifeScope.addAction(factory.create(actions_1.AopActions.exetndsInstance), core_1.IocState.runtime, core_1.LifeState.onInit, core_1.LifeState.afterConstructor);
        lifeScope.addAction(factory.create(actions_1.AopActions.invokeAfterConstructorAdvices), core_1.IocState.runtime, core_1.LifeState.afterConstructor);
        lifeScope.registerDecorator(Aspect_1.Aspect, actions_1.AopActions.registAspect, actions_1.AopActions.exetndsInstance);
    };
    AopModule.getClassAnnations = function () {
        return { "name": "AopModule", "params": { "constructor": ["container"], "setup": [] } };
    };
    AopModule = tslib_1.__decorate([
        core_1.IocExt('setup'),
        tslib_1.__param(0, core_1.Inject(core_1.ContainerToken)),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], AopModule);
    return AopModule;
}());
exports.AopModule = AopModule;

//# sourceMappingURL=sourcemaps/AopModule.js.map
