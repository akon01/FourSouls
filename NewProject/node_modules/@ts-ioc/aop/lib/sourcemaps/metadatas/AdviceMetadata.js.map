{"version":3,"sources":["metadatas/AdviceMetadata.ts"],"names":[],"mappings":"","file":"../../metadatas/AdviceMetadata.js","sourcesContent":["import { MethodMetadata, Type } from '@ts-ioc/core';\r\n\r\n/**\r\n * advice metadata.\r\n *\r\n * @export\r\n * @interface AdviceMetadata\r\n * @extends {MethodMetadata}\r\n */\r\nexport interface AdviceMetadata extends MethodMetadata {\r\n    /**\r\n     * path or module name, match express\r\n     * execution(moduelName.*.*(..)\")\r\n     * match method with a decorator annotation.\r\n     * @annotation(DecoratorName)\r\n     */\r\n    pointcut: string | RegExp;\r\n\r\n    /**\r\n     * method with specail decortor.\r\n     *\r\n     * @type {(Function | string)}\r\n     * @memberof AdviceMetadata\r\n     */\r\n    annotation?: Function | string;\r\n\r\n    /**\r\n     * math only the object.\r\n     *\r\n     * @type {*}\r\n     * @memberof AdviceMetadata\r\n     */\r\n    target?: any;\r\n\r\n    /**\r\n     * advice within.\r\n     *\r\n     * @type {(Type<any> | Type<any>[])}\r\n     * @memberof AdviceMetadata\r\n     */\r\n    within?: Type<any> | Type<any>[];\r\n\r\n    /**\r\n     * annotation name, special annotation metadata for annotation advices.\r\n     *\r\n     * @type {string}\r\n     * @memberof AdviceMetadata\r\n     */\r\n    annotationName?: string;\r\n\r\n    /**\r\n     * set name provider of annotation metadata for annotation advices.\r\n     *\r\n     * @type {string}\r\n     * @memberof AdviceMetadata\r\n     */\r\n    annotationArgName?: string;\r\n\r\n    /**\r\n     * advice type name.\r\n     * eg. `Before`, `Pointcut`, `Around`, `After`, `AfterThrowing`, `AfterReturning`\r\n     *\r\n     * @type {string}\r\n     * @memberof AdviceMetadata\r\n     */\r\n    adviceName?: string;\r\n}\r\n"]}