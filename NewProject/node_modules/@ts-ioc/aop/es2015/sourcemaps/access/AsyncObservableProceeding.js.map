{"version":3,"sources":["access/AsyncObservableProceeding.ts"],"names":[],"mappings":";;;AAAA,uCAAuF;AACvF,6DAAkF;AAElF,mDAAgD;AAChD,6DAA0D;AAI1D,IAAa,yBAAyB,GAAtC,MAAa,yBAAyB;IAClC;IAEA,CAAC;IAED,UAAU,CAAC,SAAoB,EAAE,GAAG,OAAkC;QAClE,2CAA2C;QAC3C,kDAAkD;QAClD,6DAA6D;QAC7D,sCAAsC;QACtC,8DAA8D;QAC9D,qCAAqC;QACrC,sDAAsD;QACtD,yCAAyC;QACzC,oEAAoE;QACpE,2DAA2D;QAC3D,wEAAwE;QACxE,2DAA2D;QAC3D,+BAA+B;QAC/B,4EAA4E;QAC5E,wBAAwB;QACxB,uBAAuB;QACvB,cAAc;QACd,aAAa;QACb,IAAI,mBAAY,CAAC,SAAS,CAAC,SAAS,CAAC,IAAI,iBAAU,CAAC,SAAS,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE;YAC9E,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;gBACrB,SAAS,CAAC,SAAS,GAAG,SAAS,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE;oBACtD,SAAS,CAAC,cAAc,GAAG,GAAG,CAAC;oBAC/B,MAAM,CAAC,SAAS,CAAC,CAAC;oBAClB,IAAI,mBAAY,CAAC,SAAS,CAAC,cAAc,CAAC,EAAE;wBACxC,OAAO,SAAS,CAAC,cAAc,CAAC;qBACnC;yBAAM,IAAI,gBAAS,CAAC,SAAS,CAAC,cAAc,CAAC,EAAE;wBAC5C,OAAO,SAAS,CAAC,cAAc,CAAC;qBACnC;yBAAM;wBACH,OAAO,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;qBACpD;gBACL,CAAC,CAAC,CAAC;YACP,CAAC,CAAC,CAAC;SAEN;aAAM;YACH,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;gBACrB,MAAM,CAAC,SAAS,CAAC,CAAC;YACtB,CAAC,CAAC,CAAC;SACN;IACL,CAAC;IAEmB,MAAM,CAAC,iBAAiB;QACpB,OAAO,EAAC,MAAM,EAAC,2BAA2B,EAAC,QAAQ,EAAC,EAAC,aAAa,EAAC,EAAE,EAAC,YAAY,EAAC,CAAC,WAAW,EAAC,SAAS,CAAC,EAAC,EAAC,CAAC;IACjH,CAAC;CACL,CAAA;AAjDP,yBAAyB;IAFrC,2BAAY,EAAE;IACd,gBAAS,CAAC,2CAAsB,EAAE,6BAAa,CAAC,UAAU,CAAC;;GAC/C,yBAAyB,CAiDlB;AAjDP,8DAAyB","file":"../../access/AsyncObservableProceeding.js","sourcesContent":["import { isFunction, isObservable, isPromise, Express, Singleton } from '@ts-ioc/core';\r\nimport { IAdvisorProceeding, AdvisorProceedingToken } from './IAdvisorProceeding';\r\nimport { Joinpoint } from '../joinpoints';\r\nimport { ReturningType } from './ReturningType';\r\nimport { NonePointcut } from '../decorators/NonePointcut';\r\n\r\n@NonePointcut()\r\n@Singleton(AdvisorProceedingToken, ReturningType.observable)\r\nexport class AsyncObservableProceeding implements IAdvisorProceeding {\r\n    constructor() {\r\n\r\n    }\r\n\r\n    proceeding(joinPoint: Joinpoint, ...actions: Express<Joinpoint, any>[]) {\r\n        // if (isObservable(joinPoint.returning)) {\r\n        //     if (isFunction(joinPoint.returning.pipe)) {\r\n        //         const flatMap = require('rxjs/operators').flatMap;\r\n        //         actions.forEach(action => {\r\n        //             joinPoint.returning = joinPoint.returning.pipe(\r\n        //                 flatMap((val) => {\r\n        //                     joinPoint.returningValue = val;\r\n        //                     action(joinPoint);\r\n        //                     if (isObservable(joinPoint.returningValue)) {\r\n        //                         return joinPoint.returningValue;\r\n        //                     } else if (isPromise(joinPoint.returningValue)) {\r\n        //                         return joinPoint.returningValue;\r\n        //                     } else {\r\n        //                         return Promise.resolve(joinPoint.returningValue);\r\n        //                     }\r\n        //                 }));\r\n        //         });\r\n        //     } else\r\n        if (isObservable(joinPoint.returning) && isFunction(joinPoint.returning.flatMap)) {\r\n            actions.forEach(action => {\r\n                joinPoint.returning = joinPoint.returning.flatMap((val) => {\r\n                    joinPoint.returningValue = val;\r\n                    action(joinPoint);\r\n                    if (isObservable(joinPoint.returningValue)) {\r\n                        return joinPoint.returningValue;\r\n                    } else if (isPromise(joinPoint.returningValue)) {\r\n                        return joinPoint.returningValue;\r\n                    } else {\r\n                        return Promise.resolve(joinPoint.returningValue);\r\n                    }\r\n                });\r\n            });\r\n\r\n        } else {\r\n            actions.forEach(action => {\r\n                action(joinPoint);\r\n            });\r\n        }\r\n    }\r\n\n                        static getClassAnnations():any  {\n                            return {\"name\":\"AsyncObservableProceeding\",\"params\":{\"constructor\":[],\"proceeding\":[\"joinPoint\",\"actions\"]}};\n                        }\n                   }\r\n"]}