import { Type, AbstractType, Token, SymbolType } from './types';
/**
 * is registration class or not.
 *
 * @export
 * @param {*} target
 * @returns
 */
export declare function isRegistrationClass(target: any): target is Type<Registration<any>>;
/**
 * inject token.
 * @export
 * @class Registration
 * @template T
 */
export declare class Registration<T> {
    static readonly isIocRegClass = true;
    protected type: string;
    protected classType: SymbolType<any>;
    protected desc: string;
    /**
     * Creates an instance of Registration.
     * @param {(Token<T> | Token<any>)} provideType
     * @param {string} desc
     * @memberof Registration
     */
    constructor(provideType: Token<T> | Token<any>, desc: string);
    protected init(provideType: Token<T> | Token<any>, desc?: string): void;
    /**
     * get provide.
     *
     * @returns {SymbolType<any>}
     * @memberof Registration
     */
    getProvide(): SymbolType<any>;
    /**
     * get class.
     *
     * @returns
     * @memberof Registration
     */
    getClass(): Type<T> | AbstractType<T>;
    /**
     * get desc.
     *
     * @returns
     * @memberof Registration
     */
    getDesc(): string;
    /**
     * to string.
     *
     * @returns {string}
     * @memberof Registration
     */
    toString(): string;
    protected format(reg: Token<T>): string;
    static getClassAnnations(): any;
}
