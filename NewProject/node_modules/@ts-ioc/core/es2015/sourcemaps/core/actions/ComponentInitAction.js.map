{"version":3,"sources":["core/actions/ComponentInitAction.ts"],"names":[],"mappings":";;AAEA,uDAAoD;AAGpD,uCAAyC;AACzC,+CAA4C;AAC5C,4CAA6C;AAe7C;;;;;;GAMG;AACH,MAAa,mBAAoB,SAAQ,iCAAe;IAEpD;QACI,KAAK,CAAC,yBAAW,CAAC,aAAa,CAAC,CAAA;IACpC,CAAC;IAES,OAAO,CAAC,SAAqB,EAAE,IAA6B;QAClE,IAAI,IAAI,CAAC,cAAc,IAAI,IAAI,CAAC,cAAc,KAAK,SAAS,EAAE;YAC1D,OAAO;SACV;QACD,IAAI,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,MAAM,EAAE;YAChC,IAAI,SAAS,CAAC,YAAY,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,UAAU,EAAE,yBAAa,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,yBAAW,CAAC,aAAa,CAAC,CAAC,EAAE;gBACvI,IAAI,SAAS,GAAG,IAAI,CAAC,MAAgB,CAAC;gBACtC,IAAI,kBAAU,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE;oBAC9B,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,UAAU,EAAE,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;iBAC/E;aACJ;SACJ;IACL,CAAC;IAEmB,MAAM,CAAC,iBAAiB;QACpB,OAAO,EAAC,MAAM,EAAC,qBAAqB,EAAC,QAAQ,EAAC,EAAC,aAAa,EAAC,EAAE,EAAC,SAAS,EAAC,CAAC,WAAW,EAAC,MAAM,CAAC,EAAC,EAAC,CAAC;IACrG,CAAC;CACL;AAvBpB,kDAuBoB","file":"../../../core/actions/ComponentInitAction.js","sourcesContent":["import { ActionData } from '../ActionData';\r\nimport { ClassMetadata } from '../metadatas';\r\nimport { ActionComposite } from './ActionComposite';\r\nimport { IContainer } from '../../IContainer';\r\nimport { OnInit } from '../ComponentLifecycle';\r\nimport { isFunction } from '../../utils';\r\nimport { CoreActions } from './CoreActions';\r\nimport { DecoratorType } from '../factories';\r\n\r\n\r\n\r\n/**\r\n * component init action data.\r\n *\r\n * @export\r\n * @interface ComponentInitActionData\r\n * @extends {ActionData<ClassMetadata>}\r\n */\r\nexport interface ComponentInitActionData extends ActionData<ClassMetadata> {\r\n\r\n}\r\n\r\n/**\r\n * component before init action, to run @Component decorator class before init hooks.\r\n *\r\n * @export\r\n * @class ComponentInitAction\r\n * @extends {ActionComposite}\r\n */\r\nexport class ComponentInitAction extends ActionComposite {\r\n\r\n    constructor() {\r\n        super(CoreActions.componentInit)\r\n    }\r\n\r\n    protected working(container: IContainer, data: ComponentInitActionData) {\r\n        if (data.raiseContainer && data.raiseContainer !== container) {\r\n            return;\r\n        }\r\n        if (data.targetType && data.target) {\r\n            if (container.getLifeScope().hasDecorator(data.targetType, DecoratorType.Class, surm => surm.actions.includes(CoreActions.componentInit))) {\r\n                let component = data.target as OnInit;\r\n                if (isFunction(component.onInit)) {\r\n                    container.syncInvoke(data.target || data.targetType, 'onInit', data.target);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\n                        static getClassAnnations():any  {\n                            return {\"name\":\"ComponentInitAction\",\"params\":{\"constructor\":[],\"working\":[\"container\",\"data\"]}};\n                        }\n                   }\r\n\r\n"]}