{"version":3,"sources":["core/actions/AutorunAction.ts"],"names":[],"mappings":";;;AAEA,qDAAoD;AAEpD,qCAAyC;AACzC,6CAA4C;AAC5C,0CAAiE;AACjE,iDAAgD;AAChD,+CAA8C;AAa9C;;;;;;GAMG;AACH;IAAmC,yCAAe;IAE9C;eACI,kBAAM,yBAAW,CAAC,OAAO,CAAC;IAC9B,CAAC;IAES,oCAAY,GAAtB;QACI,OAAO,CAAC,eAAM,EAAE,iBAAO,CAAC,CAAC;IAC7B,CAAC;IAES,+BAAO,GAAjB,UAAkB,SAAqB,EAAE,IAAuB;QAC5D,IAAI,IAAI,CAAC,cAAc,IAAI,IAAI,CAAC,cAAc,KAAK,SAAS,EAAE;YAC1D,OAAO;SACV;QACD,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,UAAU,EAAE;YAClC,IAAI,UAAU,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;YACrC,UAAU,CAAC,OAAO,CAAC,UAAA,SAAS;gBACxB,IAAI,4BAAgB,CAAC,SAAS,EAAE,IAAI,CAAC,UAAU,CAAC,EAAE;oBAC9C,IAAI,KAAK,GAAG,2BAAe,CAAkB,SAAS,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;oBACzE,IAAI,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,UAAA,EAAE,IAAI,OAAA,CAAC,CAAC,EAAE,CAAC,OAAO,EAAZ,CAAY,CAAC,CAAC;oBAC1C,IAAI,CAAC,IAAI,IAAI,KAAK,CAAC,MAAM,EAAE;wBACvB,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAA;qBAClB;oBACD,IAAI,IAAI,EAAE;wBACN,IAAI,QAAQ,GAAG,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;wBAC5C,IAAI,QAAQ,IAAI,IAAI,CAAC,OAAO,IAAI,kBAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,EAAE;4BAChE,SAAS,CAAC,UAAU,CAAC,QAAQ,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;yBAChD;qBACJ;iBACJ;YACL,CAAC,CAAC,CAAC;SAEN;IACL,CAAC;IAE0B,+BAAiB,GAAxB;QACI,OAAO,EAAC,MAAM,EAAC,eAAe,EAAC,QAAQ,EAAC,EAAC,aAAa,EAAC,EAAE,EAAC,cAAc,EAAC,EAAE,EAAC,SAAS,EAAC,CAAC,WAAW,EAAC,MAAM,CAAC,EAAC,EAAC,CAAC;IACjH,CAAC;IACN,oBAAC;AAAD,CAtCnB,AAsCoB,CAtCe,iCAAe,GAsC9B;AAtCP,sCAAa","file":"../../../core/actions/AutorunAction.js","sourcesContent":["import { ActionData } from '../ActionData';\r\nimport { AutorunMetadata } from '../metadatas';\r\nimport { ActionComposite } from './ActionComposite';\r\nimport { IContainer } from '../../IContainer';\r\nimport { isFunction } from '../../utils';\r\nimport { CoreActions } from './CoreActions';\r\nimport { hasClassMetadata, getTypeMetadata } from '../factories';\r\nimport { Autorun } from '../decorators/AutoRun';\r\nimport { IocExt } from '../decorators/IocExt';\r\n\r\n/**\r\n * auto run action data.\r\n *\r\n * @export\r\n * @interface AutorunActionData\r\n * @extends {ActionData<AutorunMetadata>}\r\n */\r\nexport interface AutorunActionData extends ActionData<AutorunMetadata> {\r\n\r\n}\r\n\r\n/**\r\n * Inject DrawType action.\r\n *\r\n * @export\r\n * @class SetPropAction\r\n * @extends {ActionComposite}\r\n */\r\nexport class AutorunAction extends ActionComposite {\r\n\r\n    constructor() {\r\n        super(CoreActions.autorun)\r\n    }\r\n\r\n    protected getDecorator(): Function[] {\r\n        return [IocExt, Autorun];\r\n    }\r\n\r\n    protected working(container: IContainer, data: AutorunActionData) {\r\n        if (data.raiseContainer && data.raiseContainer !== container) {\r\n            return;\r\n        }\r\n        if (data.tokenKey && data.targetType) {\r\n            let decorators = this.getDecorator();\r\n            decorators.forEach(decorator => {\r\n                if (hasClassMetadata(decorator, data.targetType)) {\r\n                    let metas = getTypeMetadata<AutorunMetadata>(decorator, data.targetType);\r\n                    let meta = metas.find(it => !!it.autorun);\r\n                    if (!meta && metas.length) {\r\n                        meta = metas[0]\r\n                    }\r\n                    if (meta) {\r\n                        let instance = container.get(data.tokenKey);\r\n                        if (instance && meta.autorun && isFunction(instance[meta.autorun])) {\r\n                            container.syncInvoke(instance, meta.autorun);\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n\r\n        }\r\n    }\r\n\n                        static getClassAnnations():any  {\n                            return {\"name\":\"AutorunAction\",\"params\":{\"constructor\":[],\"getDecorator\":[],\"working\":[\"container\",\"data\"]}};\n                        }\n                   }\r\n\r\n"]}