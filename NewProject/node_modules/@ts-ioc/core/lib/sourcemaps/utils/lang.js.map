{"version":3,"sources":["utils/lang.ts"],"names":[],"mappings":"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","file":"../../utils/lang.js","sourcesContent":["import { ObjectMap, Type, Token, ClassType } from '../types';\r\nimport { isNullOrUndefined, isArray, isObject, isFunction, isClass, isClassType, isString } from './typeCheck';\r\n// use core-js in browser.\r\n\r\n\r\n/**\r\n * map base.\r\n *\r\n * @export\r\n * @class MapBase\r\n * @template K\r\n * @template V\r\n */\r\nexport class MapBase <K, V> {\r\n    protected map: Map<K, V>;\r\n\r\n    get size(): number {\r\n        return this.map.size;\r\n    }\r\n\r\n    constructor() {\r\n        this.map = new Map();\r\n    }\r\n\r\n    clear(): void {\r\n        this.map.clear();\r\n    }\r\n    delete(key: K): boolean {\r\n        return this.map.delete(key);\r\n    }\r\n    get(key: K): V | undefined {\r\n        return this.map.get(key);\r\n    }\r\n    has(key: K): boolean {\r\n        return this.map.has(key);\r\n    }\r\n    set(key: K, value: V): this {\r\n        this.map.set(key, value);\r\n        return this;\r\n    }\r\n\r\n    keys(): K[] {\r\n        return Array.from(this.map.keys());\r\n    }\r\n\r\n    values(): V[] {\r\n        return Array.from(this.map.values());\r\n    }\r\n\n                        static getClassAnnations():any  {\n                            return {\"name\":\"MapBase\",\"params\":{\"constructor\":[],\"clear\":[],\"delete\":[\"key\"],\"get\":[\"key\"],\"has\":[\"key\"],\"set\":[\"key\",\"value\"],\"keys\":[],\"values\":[]}};\n                        }\n                   }\r\n\r\n/**\r\n * map set  for tsioc old version.\r\n *\r\n * @export\r\n * @class MapSet\r\n * @template K\r\n * @template V\r\n */\r\nexport class MapSet<K, V> extends MapBase<K, V> {\r\n    constructor() {\r\n        super()\r\n    }\r\n\r\n    forEach(callbackfn: (value: V, key: K, map: Map<K, V>) => void, thisArg?: any): void {\r\n        this.map.forEach(callbackfn, thisArg);\r\n    }\r\n\n                        static getClassAnnations():any  {\n                            return {\"name\":\"MapSet\",\"params\":{\"constructor\":[],\"forEach\":[\"callbackfn\",\"thisArg\"]}};\n                        }\n                   }\r\n\r\n/**\r\n * lang utils\r\n */\r\nexport namespace lang {\r\n    /**\r\n     * assert param is right or not.\r\n     *\r\n     * @export\r\n     * @param {*} param\r\n     * @param {(string | Function)} msg\r\n     */\r\n    export function assert(param: any, msg: string | Function) {\r\n        if (isNullOrUndefined(param)) {\r\n            throw new Error(isFunction(msg) ? msg(param) : msg);\r\n        }\r\n    }\r\n    /**\r\n     * check assert param invalid by express\r\n     *\r\n     * @export\r\n     * @param {(boolean | (() => boolean))} express\r\n     * @param {(string | Function)} msg\r\n     */\r\n    export function assertExp(express: boolean | (() => boolean), msg: string | Function) {\r\n        if (!(isFunction(express) ? express() : express)) {\r\n            throw new Error(isFunction(msg) ? msg() : msg);\r\n        }\r\n    }\r\n    /**\r\n     * get object keys.\r\n     *\r\n     * @param {*} target\r\n     * @returns {string[]}\r\n     */\r\n    export function keys(target: any): string[] {\r\n        if (isObject(target)) {\r\n            if (isFunction(Object.keys)) {\r\n                return Object.keys(target);\r\n            }\r\n        }\r\n        return [];\r\n    }\r\n\r\n    /**\r\n     * values of target object.\r\n     *\r\n     * @export\r\n     * @param {*} target\r\n     * @returns {any[]}\r\n     */\r\n    export function values(target: any): any[] {\r\n        if (isObject(target)) {\r\n            if (isFunction(Object.values)) {\r\n                return Object.values(target);\r\n            } else {\r\n                return keys(target).map(n => target[n]);\r\n            }\r\n        }\r\n        return [];\r\n    }\r\n\r\n\r\n    /**\r\n     * assign\r\n     *\r\n     * @export\r\n     * @template T\r\n     * @param {T} target\r\n     * @param {...any[]} source\r\n     * @returns {T}\r\n     */\r\n    export function assign<T, U, V>(target: T, source1: U, source2?: V, sources?: any[]): (T & U & V) | (T & U) {\r\n        if (sources && sources.length) {\r\n            sources.unshift(source2 || {});\r\n            sources.unshift(source1 || {});\r\n            return Object.assign(target as any, ...sources);\r\n        } else if (source2) {\r\n            return Object.assign(target, source1 || {} as U, source2);\r\n        } else {\r\n            return Object.assign(target, source1 || {} as U);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * create an new object from target object omit some field.\r\n     *\r\n     * @export\r\n     * @param {ObjectMap<any>} target\r\n     * @param {...string[]} fields\r\n     * @returns {*}\r\n     */\r\n    export function omit(target: ObjectMap<any>, ...fields: string[]): any {\r\n        if (isObject(target)) {\r\n            let result: any = {};\r\n            keys(target).forEach(key => {\r\n                if (fields.indexOf(key) < 0) {\r\n                    result[key] = target[key];\r\n                }\r\n            });\r\n            return result;\r\n        } else {\r\n            return target;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * object has field or not.\r\n     *\r\n     * @export\r\n     * @param {ObjectMap<any>} target\r\n     * @returns\r\n     */\r\n    export function hasField(target: ObjectMap<any>) {\r\n        return keys(target).length > 0;\r\n    }\r\n\r\n    /**\r\n     * for in opter for object or array.\r\n     *\r\n     * @export\r\n     * @template T\r\n     * @param {(ObjectMap<T> | T[])} target\r\n     * @param {(item: T, idx?: number|string) => void|boolean} iterator\r\n     */\r\n    export function forIn<T>(target: ObjectMap<T> | T[], iterator: (item: T, idx?: number | string) => void | boolean) {\r\n        if (isArray(target)) {\r\n            target.some((it, idx) => iterator(it, idx) === false);\r\n        } else if (isObject(target)) {\r\n            keys(target).some((key, idx) => iterator(target[key], key) === false);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * find\r\n     *\r\n     * @template T\r\n     * @param {(ObjectMap<T> | T[])} target\r\n     * @param {((item: T, idx?: number | string) => boolean)} express\r\n     */\r\n    export function find<T>(target: ObjectMap<T> | T[], express: (item: T, idx?: number | string) => boolean) {\r\n        let item: T;\r\n        forIn(target, (it, idx) => {\r\n            if (!item) {\r\n                if (express(it, idx)) {\r\n                    item = it;\r\n                    return false;\r\n                }\r\n                return true;\r\n            } else {\r\n                return true;\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    /**\r\n     * first.\r\n     *\r\n     * @export\r\n     * @template T\r\n     * @param {T[]} list\r\n     * @returns {T}\r\n     */\r\n    export function first<T>(list: T[]): T {\r\n        if (isArray(list) && list.length) {\r\n            return list[0];\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * last.\r\n     *\r\n     * @export\r\n     * @template T\r\n     * @param {T[]} list\r\n     * @returns {T}\r\n     */\r\n    export function last<T>(list: T[]): T {\r\n        if (isArray(list) && list.length) {\r\n            return list[list.length - 1];\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * get class annations.\r\n     *\r\n     * @export\r\n     * @param {ClassType<any>} target\r\n     * @returns\r\n     */\r\n    export function getClassAnnations(target: ClassType<any>) {\r\n        return isFunction(target.getClassAnnations) ? target.getClassAnnations() : target.classAnnations;\r\n    }\r\n\r\n    /**\r\n     * target has class annations or not.\r\n     *\r\n     * @export\r\n     * @param {ClassType<any>} target\r\n     * @returns {boolean}\r\n     */\r\n    export function hasClassAnnations(target: ClassType<any>): boolean {\r\n        if (isFunction(target.getClassAnnations)) {\r\n            return true;\r\n        }\r\n        return target.classAnnations && isString(target.classAnnations.name) && target.classAnnations.name.length > 0;\r\n    }\r\n\r\n\r\n    /**\r\n     * get calss of object.\r\n     *\r\n     * @export\r\n     * @param {*} target\r\n     * @returns {Type<any>}\r\n     */\r\n    export function getClass(target: any): Type<any> {\r\n        if (isNullOrUndefined(target)) {\r\n            return null;\r\n        }\r\n        if (isClass(target)) {\r\n            return target;\r\n        }\r\n        return target.constructor || target.prototype.constructor;\r\n    }\r\n\r\n    /**\r\n     * get class name.\r\n     *\r\n     * @export\r\n     * @param {AbstractType<any>} target\r\n     * @returns {string}\r\n     */\r\n    export function getClassName(target: any): string {\r\n        let classType = isFunction(target) ? target : getClass(target);\r\n        if (!isFunction(classType)) {\r\n            return '';\r\n        }\r\n        if (/^[a-z]$/.test(classType.name)) {\r\n            let classAnnations = getClassAnnations(classType);\r\n            return classAnnations ? classAnnations.name : classType.name;\r\n        }\r\n        return classType.name;\r\n    }\r\n\r\n    /**\r\n     * get target type parent class.\r\n     *\r\n     * @export\r\n     * @param {ClassType<any>} target\r\n     * @returns {ClassType<any>}\r\n     */\r\n    export function getParentClass(target: ClassType<any>): ClassType<any> {\r\n        let p = Reflect.getPrototypeOf(target.prototype);\r\n        return isClass(p) ? p : p.constructor as ClassType<any>;\r\n    }\r\n\r\n    /**\r\n     * get all parent class in chain.\r\n     *\r\n     * @export\r\n     * @param {ClassType<any>} target\r\n     * @returns {ClassType<any>[]}\r\n     */\r\n    export function getClassChain(target: ClassType<any>): ClassType<any>[] {\r\n        let types: ClassType<any>[] = [];\r\n        forInClassChain(target, type => {\r\n            types.push(type);\r\n        });\r\n        return types;\r\n    }\r\n\r\n    /**\r\n     * iterate base classes of target in chain. return false will break iterate.\r\n     *\r\n     * @export\r\n     * @param {Type<any>} target\r\n     * @param {(token: Type<any>) => any} express\r\n     */\r\n    export function forInClassChain(target: ClassType<any>, express: (token: ClassType<any>) => any): void {\r\n        while (isClassType(target) && target !== Object) {\r\n            if (express(target) === false) {\r\n                break;\r\n            }\r\n            target = getParentClass(target);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * target is extends class of baseClass or not.\r\n     *\r\n     * @export\r\n     * @param {Token<any>} target\r\n     * @param {(ClassType<any> | ((type: ClassType<any>) => boolean))} baseClass\r\n     * @returns {boolean}\r\n     */\r\n    export function isExtendsClass(target: Token<any>, baseClass: ClassType<any> | ((type: ClassType<any>) => boolean)): boolean {\r\n        let isExtnds = false;\r\n        if (isClassType(target)) {\r\n            forInClassChain(target, t => {\r\n                if (isClassType(baseClass)) {\r\n                    isExtnds = t === baseClass;\r\n                } else {\r\n                    isExtnds = baseClass(t);\r\n                }\r\n                return !isExtnds;\r\n            });\r\n        }\r\n        return isExtnds;\r\n    }\r\n}\r\n"]}