"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const Container_1 = require("./Container");
const IContainerBuilder_1 = require("./IContainerBuilder");
const injectors_1 = require("./injectors");
const utils_1 = require("./utils");
/**
 * default container builder.
 *
 * @export
 * @class DefaultContainerBuilder
 * @implements {IContainerBuilder}
 */
class ContainerBuilder {
    constructor(loader) {
        this._loader = loader;
    }
    get loader() {
        if (!this._loader) {
            this._loader = new injectors_1.DefaultModuleLoader();
        }
        return this._loader;
    }
    create() {
        let container = new Container_1.Container();
        container.bindProvider(IContainerBuilder_1.ContainerBuilderToken, () => this);
        container.bindProvider(injectors_1.ModuleLoaderToken, () => this.loader);
        return container;
    }
    /**
     * build container.
     *
     * @param {...LoadType[]} [modules]
     * @returns
     * @memberof DefaultContainerBuilder
     */
    build(...modules) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            let container = this.create();
            if (modules.length) {
                yield this.loadModule(container, ...modules);
            }
            return container;
        });
    }
    /**
     * load modules for container.
     *
     * @param {IContainer} container
     * @param {...LoadType[]} modules
     * @returns {Promise<Type<any>[]>}
     * @memberof DefaultContainerBuilder
     */
    loadModule(container, ...modules) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            let regModules = yield this.loader.loadTypes(modules);
            let injTypes = [];
            if (regModules && regModules.length) {
                let injChain = this.getInjectorChain(container);
                yield utils_1.PromiseUtil.step(regModules.map(typs => () => tslib_1.__awaiter(this, void 0, void 0, function* () {
                    let ityps = yield injChain.inject(container, typs);
                    injTypes = injTypes.concat(ityps);
                })));
            }
            return injTypes;
        });
    }
    syncBuild(...modules) {
        let container = this.create();
        if (modules.length) {
            this.syncLoadModule(container, ...modules);
        }
        return container;
    }
    syncLoadModule(container, ...modules) {
        let regModules = this.loader.getTypes(modules);
        let injTypes = [];
        if (regModules && regModules.length) {
            let injChain = this.getInjectorChain(container);
            regModules.forEach(typs => {
                let ityps = injChain.syncInject(container, typs);
                injTypes = injTypes.concat(ityps);
            });
        }
        return injTypes;
    }
    getInjectorChain(container) {
        if (!container.has(injectors_1.ModuleInjectorChainToken)) {
            container.register(injectors_1.ModuleInjector)
                .bindProvider(injectors_1.ModuleValidateToken, new injectors_1.ModuelValidate())
                .bindProvider(injectors_1.IocExtModuleValidateToken, new injectors_1.IocExtModuleValidate())
                .bindProvider(injectors_1.ModuleInjectorChainToken, new injectors_1.ModuleInjectorChain()
                .next(container.resolve(injectors_1.ModuleInjectorToken, { provide: injectors_1.ModuleValidateToken, useValue: container.get(injectors_1.IocExtModuleValidateToken) }, { skipNext: true }))
                .next(container.resolve(injectors_1.ModuleInjectorToken)));
        }
        return container.get(injectors_1.ModuleInjectorChainToken);
    }
    static getClassAnnations() {
        return { "name": "ContainerBuilder", "params": { "constructor": ["loader"], "create": [], "build": ["modules"], "loadModule": ["container", "modules"], "syncBuild": ["modules"], "syncLoadModule": ["container", "modules"], "getInjectorChain": ["container"] } };
    }
}
exports.ContainerBuilder = ContainerBuilder;

//# sourceMappingURL=sourcemaps/ContainerBuilder.js.map
