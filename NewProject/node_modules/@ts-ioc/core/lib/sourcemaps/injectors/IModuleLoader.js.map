{"version":3,"sources":["injectors/IModuleLoader.ts"],"names":[],"mappings":";;AACA,8CAA6C;AAE7C;;GAEG;AACU,QAAA,iBAAiB,GAAG,IAAI,yBAAW,CAAgB,iBAAiB,CAAC,CAAC","file":"../../injectors/IModuleLoader.js","sourcesContent":["import { Type, Modules, LoadType } from '../types';\r\nimport { InjectToken } from '../InjectToken';\r\n\r\n/**\r\n * module loader token.\r\n */\r\nexport const ModuleLoaderToken = new InjectToken<IModuleLoader>('DI_ModuleLoader');\r\n\r\n\r\n/**\r\n * module loader interface for ioc.\r\n *\r\n * @export\r\n * @interface IModuleLoader\r\n */\r\nexport interface IModuleLoader {\r\n    /**\r\n     * load modules by files patterns, module name or modules.\r\n     *\r\n     * @param {LoadType[]} modules\r\n     * @returns {Promise<Modules[]>}\r\n     * @memberof IModuleLoader\r\n     */\r\n    load(modules: LoadType[]): Promise<Modules[]>;\r\n\r\n    /**\r\n     * load all class types in modules\r\n     *\r\n     * @param {LoadType[]} modules\r\n     * @returns {Promise<Type<any>[]>}\r\n     * @memberof IModuleLoader\r\n     */\r\n    loadTypes(modules: LoadType[]): Promise<Type<any>[][]>;\r\n\r\n    /**\r\n     * get all class type in modules.\r\n     *\r\n     * @param {Modules[]} modules\r\n     * @returns {Type<any>[]}\r\n     * @memberof IModuleLoader\r\n     */\r\n    getTypes(modules: Modules[]): Type<any>[][];\r\n\r\n}\r\n\r\n"]}