"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var utils_1 = require("../utils");
/**
 * default module loader.
 *
 * @export
 * @class DefaultModuleLoader
 * @implements {IModuleLoader}
 */
var DefaultModuleLoader = /** @class */ (function () {
    function DefaultModuleLoader() {
    }
    DefaultModuleLoader.prototype.getLoader = function () {
        if (!this._loader) {
            this._loader = this.createLoader();
        }
        return this._loader;
    };
    /**
     * load module.
     *
     * @param {...LoadType[]} modules
     * @returns {Promise<Modules[]>}
     * @memberof DefaultModuleLoader
     */
    DefaultModuleLoader.prototype.load = function (modules) {
        var _this = this;
        if (modules.length) {
            return Promise.all(modules.map(function (mdty) {
                if (utils_1.isString(mdty)) {
                    return _this.isFile(mdty) ? _this.loadFile(mdty) : _this.loadModule(mdty);
                }
                else if (utils_1.isObject(mdty) && (mdty['modules'] || mdty['files'])) {
                    return _this.loadPathModule(mdty);
                }
                else {
                    return mdty ? [mdty] : [];
                }
            }))
                .then(function (allms) {
                var rmodules = [];
                allms.forEach(function (ms) {
                    rmodules = rmodules.concat(ms);
                });
                return rmodules;
            });
        }
        else {
            return Promise.resolve([]);
        }
    };
    /**
     * load types from module.
     *
     * @param {...LoadType[]} modules
     * @returns {Promise<Type<any>[]>}
     * @memberof IContainerBuilder
     */
    DefaultModuleLoader.prototype.loadTypes = function (modules) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var mdls;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.load(modules)];
                    case 1:
                        mdls = _a.sent();
                        return [2 /*return*/, this.getTypes(mdls)];
                }
            });
        });
    };
    /**
     * get all class type in modules.
     *
     * @param {Modules[]} modules
     * @param {...Express<Type<any>, boolean>[]} filters
     * @returns {Type<any>[]}
     * @memberof DefaultModuleLoader
     */
    DefaultModuleLoader.prototype.getTypes = function (modules) {
        var _this = this;
        var regModules = [];
        modules.forEach(function (m) {
            var types = _this.getContentTypes(m);
            regModules.push(types);
        });
        return regModules;
    };
    DefaultModuleLoader.prototype.loadFile = function (files, basePath) {
        var loader = this.getLoader();
        var fRes;
        if (utils_1.isArray(files)) {
            fRes = Promise.all(files.map(function (f) { return loader(f); }))
                .then(function (allms) {
                var rms = [];
                allms.forEach(function (ms) {
                    rms = rms.concat(ms);
                });
                return rms;
            });
        }
        else {
            fRes = loader(files);
        }
        return fRes.then(function (ms) { return ms.filter(function (it) { return !!it; }); });
    };
    DefaultModuleLoader.prototype.isFile = function (str) {
        return str && /\/((\w|%|\.))+\.\w+$/.test(str.replace(/\\\\/gi, '/'));
    };
    DefaultModuleLoader.prototype.loadModule = function (moduleName) {
        var loader = this.getLoader();
        return loader(moduleName).then(function (ms) { return ms.filter(function (it) { return !!it; }); });
    };
    DefaultModuleLoader.prototype.loadPathModule = function (pmd) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var modules;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        modules = [];
                        if (!pmd.files) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.loadFile(pmd.files, pmd.basePath)
                                .then(function (allmoduls) {
                                allmoduls.forEach(function (ms) {
                                    modules = modules.concat(ms);
                                });
                                return modules;
                            })];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        if (!pmd.modules) return [3 /*break*/, 4];
                        return [4 /*yield*/, Promise.all(pmd.modules.map(function (nmd) {
                                return utils_1.isString(nmd) ? _this.loadModule(nmd) : nmd;
                            })).then(function (ms) {
                                modules = modules.concat(ms);
                                return modules;
                            })];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4: return [2 /*return*/, modules];
                }
            });
        });
    };
    DefaultModuleLoader.prototype.createLoader = function () {
        if (typeof require !== 'undefined') {
            return function (modulepath) {
                return new Promise(function (resolve, reject) {
                    require(modulepath, function (mud) {
                        resolve(mud);
                    }, function (err) {
                        reject(err);
                    });
                });
            };
        }
        else {
            throw new Error('has not module loader');
        }
    };
    DefaultModuleLoader.prototype.getContentTypes = function (regModule) {
        var regModules = [];
        if (utils_1.isClass(regModule)) {
            regModules.push(regModule);
        }
        else if (regModule) {
            var rmodules = regModule['exports'] ? regModule['exports'] : regModule;
            for (var p in rmodules) {
                var type = rmodules[p];
                if (utils_1.isClass(type)) {
                    regModules.push(type);
                }
            }
        }
        return regModules;
    };
    DefaultModuleLoader.getClassAnnations = function () {
        return { "name": "DefaultModuleLoader", "params": { "constructor": [], "getLoader": [], "load": ["modules"], "loadTypes": ["modules"], "getTypes": ["modules"], "loadFile": ["files", "basePath"], "isFile": ["str"], "loadModule": ["moduleName"], "loadPathModule": ["pmd"], "createLoader": [], "getContentTypes": ["regModule"] } };
    };
    return DefaultModuleLoader;
}());
exports.DefaultModuleLoader = DefaultModuleLoader;

//# sourceMappingURL=../sourcemaps/injectors/DefaultModuleLoader.js.map
