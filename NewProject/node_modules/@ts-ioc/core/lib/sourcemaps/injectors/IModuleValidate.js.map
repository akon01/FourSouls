{"version":3,"sources":["injectors/IModuleValidate.ts"],"names":[],"mappings":";;;AACA,sDAAqD;AA4BrD;;;;;;;GAOG;AACH;IAA0E,qDAAkB;IACxF,mCAAY,SAAiB;eACzB,kBAAM,SAAS,EAAE,gBAAgB,CAAC;IACtC,CAAC;IAE0B,2CAAiB,GAAxB;QACI,OAAO,EAAC,MAAM,EAAC,2BAA2B,EAAC,QAAQ,EAAC,EAAC,aAAa,EAAC,CAAC,WAAW,CAAC,EAAC,EAAC,CAAC;IACvF,CAAC;IACN,gCAAC;AAAD,CARnB,AAQoB,CARsD,iCAAe,GAQrE;AARP,8DAAyB;AAUtC;;GAEG;AACU,QAAA,mBAAmB,GAAG,IAAI,yBAAyB,CAAkB,EAAE,CAAC,CAAC","file":"../../injectors/IModuleValidate.js","sourcesContent":["import { Type } from '../types';\r\nimport { RefRegistration } from '../InjectReference';\r\n\r\n/**\r\n * module validate.\r\n *\r\n * @export\r\n * @interface IModuleValidate\r\n */\r\nexport interface IModuleValidate {\r\n    /**\r\n     * is right module or not.\r\n     *\r\n     * @param {Type<any>} type\r\n     * @returns {boolean}\r\n     * @memberof IModuleValidate\r\n     */\r\n    valid(type: Type<any>): boolean;\r\n\r\n    /**\r\n     * get special decorators of the module.\r\n     *\r\n     * @returns {string}\r\n     * @memberof IModuleValidate\r\n     */\r\n    getDecorator(): string | string[];\r\n}\r\n\r\n\r\n/**\r\n * inject module validate token for decorator or class.\r\n *\r\n * @export\r\n * @class InjectMetadataManagerToken\r\n * @extends {RefRegistration<IMetadataManager>}\r\n * @template T\r\n */\r\nexport class InjectModuleValidateToken<T extends IModuleValidate> extends RefRegistration<T> {\r\n    constructor(decorator: string) {\r\n        super(decorator, 'ModuleValidate');\r\n    }\r\n\n                        static getClassAnnations():any  {\n                            return {\"name\":\"InjectModuleValidateToken\",\"params\":{\"constructor\":[\"decorator\"]}};\n                        }\n                   }\r\n\r\n/**\r\n * Module Validate Token\r\n */\r\nexport const ModuleValidateToken = new InjectModuleValidateToken<IModuleValidate>('');\r\n"]}