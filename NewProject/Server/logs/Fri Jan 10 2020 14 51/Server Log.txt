Start Log 

 Player 1 14:51:03 $MATCH:  

 Player 1 14:51:03 $START_GAME:  

 Player 2 14:51:03 $MOVE_TO_TABLE:  

 Player 1 14:51:04 $MOVE_TO_TABLE:  

 Player 2 14:51:10 $FINISH_LOAD:  
{"id":2,"turnPlayerId":2} 

 Player 1 14:51:10 $FINISH_LOAD:  
{"id":1,"turnPlayerId":2} 

 Player 2 14:51:10 $ASSIGN_CHAR_TO_PLAYER:  
{"playerId":1,"charCardId":267,"itemCardId":268} 

 Player 2 14:51:10 $CHOOSE_FOR_EDEN:  
{"playerId":2,"originPlayerId":2} 

 Player 1 14:51:10 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"PLAYER_ADD_ITEM","args":[{"type":0,"number":268}],"result":true,"preventMethod":false,"methodScopeId":267,"scopeIsPlayer":true,"index":1,"originStackId":-1},"isAfterActivation":true,"index":1} 

 Player 2 14:51:10 $DECK_ARRAGMENT:  
{"deckType":5,"arrangement":[195,174,163,202,186,164,167,148,170,198,181,190,162,161,156,172,180,146,199,171,149,188,147,175,154,177,169,152,182,179,165,176,184,183,187,185,191,197,173,196,178,189,200,155,158,166,150,192,193,201,151,159,157,153,168,160,194]} 

 Player 2 14:51:15 $EDEN_CHOSEN:  
{"cardId":174,"playerId":2} 

 Player 2 14:51:15 $DECK_ARRAGMENT:  
{"deckType":5,"arrangement":[195,163,202,186,164,167,148,170,198,181,190,162,161,156,172,180,146,199,171,149,188,147,175,154,177,169,152,182,179,165,176,184,183,187,185,191,197,173,196,178,189,200,155,158,166,150,192,193,201,151,159,157,153,168,160,194]} 

 Player 2 14:51:16 $FLIP_CARD:  
{"cardId":174} 

 Player 2 14:51:16 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"PLAYER_ADD_ITEM","args":[{"type":0,"number":174}],"result":true,"preventMethod":false,"methodScopeId":265,"scopeIsPlayer":true,"index":1,"originStackId":-1},"isAfterActivation":true,"index":1} 

 Player 2 14:51:16 $REGISTER_PASSIVE_ITEM:  
{"cardId":174} 

 Player 2 14:51:16 $ASSIGN_CHAR_TO_PLAYER:  
{"playerId":2,"charCardId":265,"itemCardId":174} 

 Player 2 14:51:16 $DECK_ARRAGMENT:  
{"deckType":1,"arrangement":[89,67,42,33,54,107,86,10,83,40,21,18,109,7,78,95,39,25,105,133,60,58,49,101,30,112,31,141,93,88,87,80,55,77,110,104,52,120,8,98,81,122,125,73,75,50,106,26,69,51,139,14,135,79,17,63,114,62,22,47,119,13,44,124,138,70,16,15,90,92,131,32,19,43,71,68,20,35,82,117,38,134,74,111,34,108,72,103,137,99,115,143,41,76,28,130,9,64,94,59,102,123,37,127,116,96,132,57,140,45,118,29,65,61,97,36,23,84,27,11,46,53,100,128,136,12,24,129,91,121,66,113,126,56,85,142,48]} 

 Player 2 14:51:16 $DECK_ARRAGMENT:  
{"deckType":2,"arrangement":[258,251,224,219,216,206,232,218,238,229,234,230,209,254,250,208,243,244,207,233,253,256,237,214,212,220,246,242,239,252,236,245,223,215,255,240,217,247,225,231,221,235,228,210,249,205,211,222,213,248,257,227,226,241]} 

 Player 2 14:51:16 $DECK_ARRAGMENT:  
{"deckType":5,"arrangement":[173,171,167,163,153,160,186,152,158,146,189,169,195,183,175,150,193,188,155,151,172,190,164,198,184,192,159,179,161,178,185,165,170,147,177,149,181,202,148,187,199,168,154,162,166,191,182,157,194,180,201,200,196,197,156,176]} 

 Player 2 14:51:16 $DRAW_CARD:  
{"deckType":5} 

 Player 2 14:51:16 $FLIP_CARD:  
{"cardId":176} 

 Player 2 14:51:16 $ADD_STORE_CARD:  
{"cardId":176} 

 Player 2 14:51:16 $DRAW_CARD:  
{"deckType":5} 

 Player 2 14:51:16 $FLIP_CARD:  
{"cardId":156} 

 Player 2 14:51:16 $ADD_STORE_CARD:  
{"cardId":156} 

 Player 2 14:51:16 $DRAW_CARD:  
{"deckType":2} 

 Player 2 14:51:16 $FLIP_CARD:  
{"cardId":241} 

 Player 2 14:51:16 $ADD_MONSTER:  
{"monsterPlaceId":1,"monsterId":241} 

 Player 2 14:51:16 $NEW_MONSTER_ON_PLACE:  
{"cardId":241,"monsterPlaceId":1} 

 Player 2 14:51:16 $DRAW_CARD:  
{"deckType":2} 

 Player 2 14:51:16 $DECK_ADD_TO_BOTTOM:  
{"deckType":2,"cardId":226} 

 Player 2 14:51:16 $DRAW_CARD:  
{"deckType":2} 

 Player 2 14:51:16 $DECK_ADD_TO_BOTTOM:  
{"deckType":2,"cardId":227} 

 Player 2 14:51:16 $DRAW_CARD:  
{"deckType":2} 

 Player 2 14:51:16 $FLIP_CARD:  
{"cardId":257} 

 Player 2 14:51:16 $ADD_MONSTER:  
{"monsterPlaceId":2,"monsterId":257} 

 Player 2 14:51:16 $NEW_MONSTER_ON_PLACE:  
{"cardId":257,"monsterPlaceId":2} 

 Player 2 14:51:17 $SET_MONEY:  
{"playerId":1,"numOfCoins":3} 

 Player 2 14:51:17 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"PLAYER_CHANGE_MONEY","args":[{"type":2,"number":3}],"result":null,"preventMethod":false,"methodScopeId":267,"scopeIsPlayer":true,"index":2,"originStackId":-1},"isAfterActivation":true,"index":2} 

 Player 2 14:51:17 $DRAW_CARD:  
{"deckType":1} 

 Player 2 14:51:17 $MOVE_CARD:  
{"moveIndex":1,"cardId":48,"placeID":1,"flipIfFlipped":false,"firstPos":{"x":1,"y":-5,"z":0},"playerId":2,"placeType":"Hand"} 

 Player 1 14:51:17 $MOVE_CARD_END:  
{"moveIndex":1,"cardId":48,"flipIfFlipped":false,"playerId":2} 

 Player 2 14:51:17 $CARD_DRAWN:  
{"playerId":1,"deckType":1,"drawnCardId":48} 

 Player 2 14:51:17 $FLIP_CARD:  
{"cardId":48} 

 Player 2 14:51:17 $FLIP_CARD:  
{"cardId":48} 

 Player 2 14:51:17 $PLAYER_GET_LOOT:  
{"playerId":1,"cardId":48} 

 Player 2 14:51:17 $DRAW_CARD:  
{"deckType":1} 

 Player 2 14:51:17 $MOVE_CARD:  
{"moveIndex":2,"cardId":142,"placeID":1,"flipIfFlipped":false,"firstPos":{"x":1,"y":-5,"z":0},"playerId":2,"placeType":"Hand"} 

 Player 1 14:51:18 $MOVE_CARD_END:  
{"moveIndex":2,"cardId":142,"flipIfFlipped":false,"playerId":2} 

 Player 2 14:51:18 $CARD_DRAWN:  
{"playerId":1,"deckType":1,"drawnCardId":142} 

 Player 2 14:51:18 $FLIP_CARD:  
{"cardId":142} 

 Player 2 14:51:18 $FLIP_CARD:  
{"cardId":142} 

 Player 2 14:51:18 $PLAYER_GET_LOOT:  
{"playerId":1,"cardId":142} 

 Player 2 14:51:18 $DRAW_CARD:  
{"deckType":1} 

 Player 2 14:51:18 $MOVE_CARD:  
{"moveIndex":3,"cardId":85,"placeID":1,"flipIfFlipped":false,"firstPos":{"x":1,"y":-5,"z":0},"playerId":2,"placeType":"Hand"} 

 Player 1 14:51:18 $MOVE_CARD_END:  
{"moveIndex":3,"cardId":85,"flipIfFlipped":false,"playerId":2} 

 Player 2 14:51:18 $CARD_DRAWN:  
{"playerId":1,"deckType":1,"drawnCardId":85} 

 Player 2 14:51:18 $FLIP_CARD:  
{"cardId":85} 

 Player 2 14:51:18 $FLIP_CARD:  
{"cardId":85} 

 Player 2 14:51:18 $PLAYER_GET_LOOT:  
{"playerId":1,"cardId":85} 

 Player 2 14:51:18 $SET_MONEY:  
{"playerId":2,"numOfCoins":3} 

 Player 2 14:51:18 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"PLAYER_CHANGE_MONEY","args":[{"type":2,"number":3}],"result":null,"preventMethod":false,"methodScopeId":265,"scopeIsPlayer":true,"index":3,"originStackId":-1},"isAfterActivation":true,"index":3} 

 Player 2 14:51:18 $DRAW_CARD:  
{"deckType":1} 

 Player 2 14:51:18 $MOVE_CARD:  
{"moveIndex":4,"cardId":56,"placeID":2,"flipIfFlipped":false,"firstPos":{"x":1,"y":-5,"z":0},"playerId":2,"placeType":"Hand"} 

 Player 1 14:51:19 $MOVE_CARD_END:  
{"moveIndex":4,"cardId":56,"flipIfFlipped":false,"playerId":2} 

 Player 2 14:51:19 $CARD_DRAWN:  
{"playerId":2,"deckType":1,"drawnCardId":56} 

 Player 2 14:51:19 $FLIP_CARD:  
{"cardId":56} 

 Player 2 14:51:19 $PLAYER_GET_LOOT:  
{"playerId":2,"cardId":56} 

 Player 2 14:51:19 $DRAW_CARD:  
{"deckType":1} 

 Player 2 14:51:19 $MOVE_CARD:  
{"moveIndex":5,"cardId":126,"placeID":2,"flipIfFlipped":false,"firstPos":{"x":1,"y":-5,"z":0},"playerId":2,"placeType":"Hand"} 

 Player 1 14:51:19 $MOVE_CARD_END:  
{"moveIndex":5,"cardId":126,"flipIfFlipped":false,"playerId":2} 

 Player 2 14:51:19 $CARD_DRAWN:  
{"playerId":2,"deckType":1,"drawnCardId":126} 

 Player 2 14:51:19 $FLIP_CARD:  
{"cardId":126} 

 Player 2 14:51:19 $PLAYER_GET_LOOT:  
{"playerId":2,"cardId":126} 

 Player 2 14:51:19 $DRAW_CARD:  
{"deckType":1} 

 Player 2 14:51:19 $MOVE_CARD:  
{"moveIndex":6,"cardId":113,"placeID":2,"flipIfFlipped":false,"firstPos":{"x":1,"y":-5,"z":0},"playerId":2,"placeType":"Hand"} 

 Player 1 14:51:20 $MOVE_CARD_END:  
{"moveIndex":6,"cardId":113,"flipIfFlipped":false,"playerId":2} 

 Player 2 14:51:20 $CARD_DRAWN:  
{"playerId":2,"deckType":1,"drawnCardId":113} 

 Player 2 14:51:20 $FLIP_CARD:  
{"cardId":113} 

 Player 2 14:51:20 $PLAYER_GET_LOOT:  
{"playerId":2,"cardId":113} 

 Player 2 14:51:20 $GAME_HAS_STARTED:  

 Player 2 14:51:20 $SET_TURN:  
{"playerId":2} 

 Player 2 14:51:20 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 2 14:51:20 $NEXT_STACK_ID:  

 Player 2 14:51:20 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 14:51:20 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 start turn loot"} 

 Player 2 14:51:20 $ADD_TO_STACK:  
{"stackEffect":{"entityId":1,"creatorCardId":265,"turnPlayerCardId":265,"stackEffectType":13}} 

 Player 2 14:51:20 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 start turn loot"} 

 Player 2 14:51:20 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":1,"creatorCardId":265,"turnPlayerCardId":265,"stackEffectType":13}} 

 Player 2 14:51:20 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":0,"_text":"Add StartTurnLoot 1 "}} 

 Player 2 14:51:20 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 2 14:51:20 $ACTION_MASSAGE_REMOVE:  
{"id":0} 

 Player 2 14:51:20 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 start turn loot"} 

 Player 2 14:51:20 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":1,"creatorCardId":265,"turnPlayerCardId":265,"stackEffectType":13}} 

 Player 2 14:51:20 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":1,"_text":"Response Adding StartTurnLoot 1"},"childOfId":0} 

 Player 2 14:51:20 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":2,"_text":"Wait For Response From Player 2 "},"childOfId":0} 

 Player 2 14:51:20 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 2 14:51:20 $ACTION_MASSAGE_REMOVE:  
{"id":2} 

 Player 2 14:51:21 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":3,"_text":"Wait For Response From Player 1 "},"childOfId":0} 

 Player 2 14:51:21 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 2 14:51:21 $GET_REACTION:  
{"playerId":1,"activePlayerId":2} 

 Player 1 14:51:21 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 14:51:21 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 14:51:21 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 start turn loot"} 

 Player 1 14:51:21 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 start turn loot"} 

 Player 1 14:51:21 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 start turn loot"} 

 Player 1 14:51:21 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 start turn loot"} 

 Player 1 14:51:21 $RESPOND_TO:  
{"playerId":2,"stackEffectResponse":false} 

 Player 2 14:51:21 $ACTION_MASSAGE_REMOVE:  
{"id":3} 

 Player 2 14:51:21 $ACTION_MASSAGE_REMOVE:  
{"id":1} 

 Player 2 14:51:21 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":4,"_text":"Resolve StartTurnLoot 1 "}} 

 Player 2 14:51:21 $DRAW_CARD:  
{"deckType":1} 

 Player 2 14:51:21 $MOVE_CARD:  
{"moveIndex":7,"cardId":66,"placeID":2,"flipIfFlipped":false,"firstPos":{"x":1,"y":-5,"z":0},"playerId":2,"placeType":"Hand"} 

 Player 1 14:51:21 $MOVE_CARD_END:  
{"moveIndex":7,"cardId":66,"flipIfFlipped":false,"playerId":2} 

 Player 2 14:51:21 $CARD_DRAWN:  
{"playerId":2,"deckType":1,"drawnCardId":66} 

 Player 2 14:51:21 $FLIP_CARD:  
{"cardId":66} 

 Player 2 14:51:21 $PLAYER_GET_LOOT:  
{"playerId":2,"cardId":66} 

 Player 2 14:51:21 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 start turn loot"} 

 Player 2 14:51:21 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":1,"creatorCardId":265,"turnPlayerCardId":265,"stackEffectType":13}} 

 Player 2 14:51:21 $ACTION_MASSAGE_REMOVE:  
{"id":4} 

 Player 2 14:51:21 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 14:51:21 $REMOVE_SE_VIS_PREV:  
{"stackEffect":{"entityId":1,"creatorCardId":265,"turnPlayerCardId":265,"stackEffectType":13}} 

 Player 2 14:51:21 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":5,"_text":"Remove After Resolve StartTurnLoot 1  "}} 

 Player 2 14:51:22 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 14:51:22 $REMOVE_FROM_STACK:  
{"stackEffect":{"entityId":1,"creatorCardId":265,"turnPlayerCardId":265,"stackEffectType":13}} 

 Player 2 14:51:22 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":6,"_text":"Response Remove After Resolve StartTurnLoot 1"},"childOfId":5} 

 Player 2 14:51:22 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":7,"_text":"Wait For Response From Player 1 "},"childOfId":5} 

 Player 2 14:51:22 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 2 14:51:22 $GET_REACTION:  
{"playerId":1,"activePlayerId":2} 

 Player 1 14:51:22 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 start turn loot"} 

 Player 1 14:51:22 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 start turn loot"} 

 Player 1 14:51:22 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 start turn loot"} 

 Player 1 14:51:22 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 start turn loot"} 

 Player 1 14:51:22 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 start turn loot"} 

 Player 1 14:51:22 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 start turn loot"} 

 Player 1 14:51:22 $RESPOND_TO:  
{"playerId":2,"stackEffectResponse":false} 

 Player 2 14:51:22 $ACTION_MASSAGE_REMOVE:  
{"id":7} 

 Player 2 14:51:22 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":8,"_text":"Wait For Response From Player 2 "},"childOfId":5} 

 Player 2 14:51:22 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 2 14:51:22 $ACTION_MASSAGE_REMOVE:  
{"id":8} 

 Player 2 14:51:22 $ACTION_MASSAGE_REMOVE:  
{"id":6} 

 Player 2 14:51:22 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":9,"_text":"Stack Was Emptied "}} 

 Player 2 14:51:22 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 14:51:22 $ACTION_MASSAGE_REMOVE:  
{"id":0} 

 Player 2 14:51:22 $ACTION_MASSAGE_REMOVE:  
{"id":1} 

 Player 2 14:51:22 $ACTION_MASSAGE_REMOVE:  
{"id":2} 

 Player 2 14:51:22 $ACTION_MASSAGE_REMOVE:  
{"id":3} 

 Player 2 14:51:22 $ACTION_MASSAGE_REMOVE:  
{"id":4} 

 Player 2 14:51:22 $ACTION_MASSAGE_REMOVE:  
{"id":5} 

 Player 2 14:51:22 $ACTION_MASSAGE_REMOVE:  
{"id":9} 

 Player 2 14:51:22 $UPDATE_ACTIONS:  

 Player 2 14:51:23 $ACTION_MASSAGE_REMOVE:  
{"id":9} 

 Player 2 14:51:24 $ACTION_MASSAGE_REMOVE:  
{"id":5} 

 Player 2 14:51:29 $MOVE_CARD:  
{"moveIndex":8,"cardId":107,"placeID":2,"flipIfFlipped":true,"playerId":2,"placeType":"Hand"} 

 Player 1 14:51:29 $MOVE_CARD_END:  
{"moveIndex":8,"cardId":107,"flipIfFlipped":true,"playerId":2} 

 Player 2 14:51:29 $PLAYER_GET_LOOT:  
{"playerId":2,"cardId":107} 

 Player 2 14:51:32 $NEXT_STACK_ID:  

 Player 2 14:51:32 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 14:51:32 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 play Holy Card "} 

 Player 2 14:51:32 $ADD_TO_STACK:  
{"stackEffect":{"entityId":2,"creatorCardId":265,"hasLockingStackEffect":false,"hasLockingStackEffectResolved":false,"lootToPlayCardId":107,"lootPlayerId":2,"hasDataBeenCollectedYet":false,"stackEffectType":8}} 

 Player 2 14:51:32 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 play Holy Card "} 

 Player 2 14:51:32 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":2,"creatorCardId":265,"hasLockingStackEffect":false,"hasLockingStackEffectResolved":false,"lootToPlayCardId":107,"lootPlayerId":2,"hasDataBeenCollectedYet":false,"stackEffectType":8}} 

 Player 2 14:51:32 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":10,"_text":"Add PlayLootCardStackEffect 2 "}} 

 Player 2 14:51:32 $PLAYER_LOSE_LOOT:  
{"playerId":2,"cardId":107} 

 Player 2 14:51:32 $MOVE_CARD:  
{"moveIndex":9,"cardId":107,"placeID":277,"flipIfFlipped":true,"playerId":2,"placeType":"Card"} 

 Player 1 14:51:32 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 14:51:32 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 14:51:32 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 play Holy Card "} 

 Player 1 14:51:32 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 play Holy Card "} 

 Player 1 14:51:32 $MOVE_CARD_END:  
{"moveIndex":9,"cardId":107,"flipIfFlipped":true,"playerId":2} 

 Player 2 14:51:32 $MOVE_CARD_TO_PILE:  
{"type":7,"cardId":107} 

 Player 2 14:51:32 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 play Holy Card: AddPassiveEffect"} 

 Player 2 14:51:34 $SHOW_DECISION:  
{"startCardId":107,"endCardId":265} 

 Player 2 14:51:37 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 2 14:51:37 $ACTION_MASSAGE_REMOVE:  
{"id":10} 

 Player 2 14:51:37 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 play Holy Card: AddPassiveEffect"} 

 Player 2 14:51:37 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":2,"creatorCardId":265,"hasLockingStackEffect":false,"hasLockingStackEffectResolved":false,"lootToPlayCardId":107,"lootPlayerId":2,"effectToDo":{"effectName":"AddPassiveEffect","cardEffectNum":0,"cardPlayerId":2,"cardId":107,"effctType":1},"hasDataBeenCollectedYet":true,"stackEffectType":8}} 

 Player 2 14:51:37 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":11,"_text":"Response Adding PlayLootCardStackEffect 2"},"childOfId":10} 

 Player 2 14:51:37 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":12,"_text":"Wait For Response From Player 2 "},"childOfId":10} 

 Player 2 14:51:37 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 2 14:51:37 $ACTION_MASSAGE_REMOVE:  
{"id":12} 

 Player 2 14:51:37 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":13,"_text":"Wait For Response From Player 1 "},"childOfId":10} 

 Player 2 14:51:37 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 2 14:51:37 $GET_REACTION:  
{"playerId":1,"activePlayerId":2} 

 Player 1 14:51:37 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 play Holy Card "} 

 Player 1 14:51:37 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 play Holy Card "} 

 Player 1 14:51:37 $RESPOND_TO:  
{"playerId":2,"stackEffectResponse":false} 

 Player 2 14:51:37 $ACTION_MASSAGE_REMOVE:  
{"id":13} 

 Player 2 14:51:37 $ACTION_MASSAGE_REMOVE:  
{"id":11} 

 Player 2 14:51:37 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":14,"_text":"Resolve PlayLootCardStackEffect 2 "}} 

 Player 2 14:51:37 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 play Holy Card: AddPassiveEffect"} 

 Player 2 14:51:37 $ACTIVATE_PARTICLE_EFFECT:  
{"cardId":107,"particleType":6} 

 Player 2 14:51:39 $DISABLE_PARTICLE_EFFECT:  
{"cardId":107,"particleType":6} 

 Player 2 14:51:39 $REGISTER_ONE_TURN_PASSIVE_EFFECT:  
{"cardId":107,"effectIndex":{"type":3,"index":0},"conditionData":[{"effectTargets":[265],"chainEffectsData":[],"methodArgs":[],"isPassive":false,"effectCard":107,"effectCardOwner":107,"effectCardPlayer":107}]} 

 Player 2 14:51:39 $REMOVE_FROM_PILE:  
{"cardId":107} 

 Player 2 14:51:39 $MOVE_CARD:  
{"moveIndex":10,"cardId":107,"placeID":278,"flipIfFlipped":true,"playerId":2,"placeType":"Card"} 

 Player 1 14:51:40 $MOVE_CARD_END:  
{"moveIndex":10,"cardId":107,"flipIfFlipped":true,"playerId":2} 

 Player 2 14:51:40 $MOVE_CARD_TO_PILE:  
{"type":1,"cardId":107} 

 Player 2 14:51:40 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 play Holy Card: AddPassiveEffect"} 

 Player 2 14:51:40 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":2,"creatorCardId":265,"hasLockingStackEffect":false,"hasLockingStackEffectResolved":false,"lootToPlayCardId":107,"lootPlayerId":2,"hasDataBeenCollectedYet":true,"stackEffectType":8}} 

 Player 2 14:51:40 $ACTION_MASSAGE_REMOVE:  
{"id":14} 

 Player 2 14:51:40 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 14:51:40 $REMOVE_SE_VIS_PREV:  
{"stackEffect":{"entityId":2,"creatorCardId":265,"hasLockingStackEffect":false,"hasLockingStackEffectResolved":false,"lootToPlayCardId":107,"lootPlayerId":2,"hasDataBeenCollectedYet":true,"stackEffectType":8}} 

 Player 2 14:51:40 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":15,"_text":"Remove After Resolve PlayLootCardStackEffect 2  "}} 

 Player 2 14:51:40 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 14:51:40 $REMOVE_FROM_STACK:  
{"stackEffect":{"entityId":2,"creatorCardId":265,"hasLockingStackEffect":false,"hasLockingStackEffectResolved":false,"lootToPlayCardId":107,"lootPlayerId":2,"hasDataBeenCollectedYet":true,"stackEffectType":8}} 

 Player 2 14:51:40 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":16,"_text":"Response Remove After Resolve PlayLootCardStackEffect 2"},"childOfId":15} 

 Player 2 14:51:40 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":17,"_text":"Wait For Response From Player 1 "},"childOfId":15} 

 Player 2 14:51:40 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 2 14:51:40 $GET_REACTION:  
{"playerId":1,"activePlayerId":2} 

 Player 1 14:51:40 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 play Holy Card "} 

 Player 1 14:51:40 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 play Holy Card "} 

 Player 1 14:51:40 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 play Holy Card "} 

 Player 1 14:51:40 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 play Holy Card "} 

 Player 1 14:51:40 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 play Holy Card "} 

 Player 1 14:51:40 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 play Holy Card "} 

 Player 1 14:51:40 $RESPOND_TO:  
{"playerId":2,"stackEffectResponse":false} 

 Player 2 14:51:40 $ACTION_MASSAGE_REMOVE:  
{"id":17} 

 Player 2 14:51:40 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":18,"_text":"Wait For Response From Player 2 "},"childOfId":15} 

 Player 2 14:51:40 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 2 14:51:40 $ACTION_MASSAGE_REMOVE:  
{"id":18} 

 Player 2 14:51:40 $ACTION_MASSAGE_REMOVE:  
{"id":16} 

 Player 2 14:51:40 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":19,"_text":"Stack Was Emptied "}} 

 Player 2 14:51:40 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 14:51:40 $ACTION_MASSAGE_REMOVE:  
{"id":0} 

 Player 2 14:51:41 $ACTION_MASSAGE_REMOVE:  
{"id":1} 

 Player 2 14:51:41 $ACTION_MASSAGE_REMOVE:  
{"id":2} 

 Player 2 14:51:41 $ACTION_MASSAGE_REMOVE:  
{"id":3} 

 Player 2 14:51:41 $ACTION_MASSAGE_REMOVE:  
{"id":4} 

 Player 2 14:51:41 $ACTION_MASSAGE_REMOVE:  
{"id":5} 

 Player 2 14:51:41 $ACTION_MASSAGE_REMOVE:  
{"id":9} 

 Player 2 14:51:41 $ACTION_MASSAGE_REMOVE:  
{"id":10} 

 Player 2 14:51:41 $ACTION_MASSAGE_REMOVE:  
{"id":14} 

 Player 2 14:51:41 $ACTION_MASSAGE_REMOVE:  
{"id":15} 

 Player 2 14:51:41 $ACTION_MASSAGE_REMOVE:  
{"id":19} 

 Player 2 14:51:42 $ACTION_MASSAGE_REMOVE:  
{"id":19} 

 Player 2 14:51:43 $ACTION_MASSAGE_REMOVE:  
{"id":15} 

 Player 2 14:51:47 $SHOW_DECISION:  
{"startCardId":265,"endCardId":257} 

 Player 2 14:51:50 $NEXT_STACK_ID:  

 Player 2 14:51:50 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 14:51:50 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2  declared attack on Widow"} 

 Player 2 14:51:50 $ADD_TO_STACK:  
{"stackEffect":{"entityId":3,"creatorCardId":265,"attackingPlayerCardId":265,"idOfCardBeingAttacked":257,"stackEffectType":4}} 

 Player 2 14:51:50 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2  declared attack on Widow"} 

 Player 2 14:51:50 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":3,"creatorCardId":265,"attackingPlayerCardId":265,"idOfCardBeingAttacked":257,"stackEffectType":4}} 

 Player 2 14:51:50 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":20,"_text":"Add DeclareAttack 3 "}} 

 Player 2 14:51:50 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 2 14:51:50 $ACTION_MASSAGE_REMOVE:  
{"id":20} 

 Player 2 14:51:50 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2  declared attack on Widow"} 

 Player 2 14:51:50 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":3,"creatorCardId":265,"attackingPlayerCardId":265,"idOfCardBeingAttacked":257,"stackEffectType":4}} 

 Player 2 14:51:50 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":21,"_text":"Response Adding DeclareAttack 3"},"childOfId":20} 

 Player 2 14:51:50 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":22,"_text":"Wait For Response From Player 2 "},"childOfId":20} 

 Player 2 14:51:50 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 2 14:51:50 $ACTION_MASSAGE_REMOVE:  
{"id":22} 

 Player 2 14:51:50 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":23,"_text":"Wait For Response From Player 1 "},"childOfId":20} 

 Player 2 14:51:50 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 2 14:51:50 $GET_REACTION:  
{"playerId":1,"activePlayerId":2} 

 Player 1 14:51:50 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 14:51:50 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 14:51:50 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2  declared attack on Widow"} 

 Player 1 14:51:50 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2  declared attack on Widow"} 

 Player 1 14:51:50 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2  declared attack on Widow"} 

 Player 1 14:51:50 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2  declared attack on Widow"} 

 Player 1 14:51:50 $RESPOND_TO:  
{"playerId":2,"stackEffectResponse":false} 

 Player 2 14:51:50 $ACTION_MASSAGE_REMOVE:  
{"id":23} 

 Player 2 14:51:50 $ACTION_MASSAGE_REMOVE:  
{"id":21} 

 Player 2 14:51:50 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":24,"_text":"Resolve DeclareAttack 3 "}} 

 Player 2 14:51:50 $ACTIVATE_PARTICLE_EFFECT:  
{"cardId":257,"particleType":5} 

 Player 2 14:51:50 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"PLAYER_DECLARE_ATTACK","args":[],"result":null,"preventMethod":false,"methodScopeId":265,"scopeIsPlayer":true,"index":4,"originStackId":3},"isAfterActivation":true,"index":4} 

 Player 2 14:51:51 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2  declared attack on Widow"} 

 Player 2 14:51:51 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":3,"creatorCardId":265,"attackingPlayerCardId":265,"idOfCardBeingAttacked":257,"stackEffectType":4}} 

 Player 2 14:51:51 $ACTION_MASSAGE_REMOVE:  
{"id":24} 

 Player 2 14:51:51 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 14:51:51 $REMOVE_SE_VIS_PREV:  
{"stackEffect":{"entityId":3,"creatorCardId":265,"attackingPlayerCardId":265,"idOfCardBeingAttacked":257,"stackEffectType":4}} 

 Player 2 14:51:51 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":25,"_text":"Remove After Resolve DeclareAttack 3  "}} 

 Player 2 14:51:51 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 14:51:51 $REMOVE_FROM_STACK:  
{"stackEffect":{"entityId":3,"creatorCardId":265,"attackingPlayerCardId":265,"idOfCardBeingAttacked":257,"stackEffectType":4}} 

 Player 2 14:51:51 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":26,"_text":"Response Remove After Resolve DeclareAttack 3"},"childOfId":25} 

 Player 2 14:51:51 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":27,"_text":"Wait For Response From Player 1 "},"childOfId":25} 

 Player 2 14:51:51 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 2 14:51:51 $GET_REACTION:  
{"playerId":1,"activePlayerId":2} 

 Player 1 14:51:51 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2  declared attack on Widow"} 

 Player 1 14:51:51 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2  declared attack on Widow"} 

 Player 1 14:51:51 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2  declared attack on Widow"} 

 Player 1 14:51:51 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2  declared attack on Widow"} 

 Player 1 14:51:51 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2  declared attack on Widow"} 

 Player 1 14:51:51 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2  declared attack on Widow"} 

 Player 1 14:51:51 $RESPOND_TO:  
{"playerId":2,"stackEffectResponse":false} 

 Player 2 14:51:51 $ACTION_MASSAGE_REMOVE:  
{"id":27} 

 Player 2 14:51:51 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":28,"_text":"Wait For Response From Player 2 "},"childOfId":25} 

 Player 2 14:51:51 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 2 14:51:51 $ACTION_MASSAGE_REMOVE:  
{"id":28} 

 Player 2 14:51:51 $ACTION_MASSAGE_REMOVE:  
{"id":26} 

 Player 2 14:51:51 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":29,"_text":"Stack Was Emptied "}} 

 Player 2 14:51:51 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 14:51:51 $ACTION_MASSAGE_REMOVE:  
{"id":0} 

 Player 2 14:51:51 $ACTION_MASSAGE_REMOVE:  
{"id":1} 

 Player 2 14:51:51 $ACTION_MASSAGE_REMOVE:  
{"id":2} 

 Player 2 14:51:51 $ACTION_MASSAGE_REMOVE:  
{"id":3} 

 Player 2 14:51:51 $ACTION_MASSAGE_REMOVE:  
{"id":4} 

 Player 2 14:51:51 $ACTION_MASSAGE_REMOVE:  
{"id":5} 

 Player 2 14:51:51 $ACTION_MASSAGE_REMOVE:  
{"id":9} 

 Player 2 14:51:52 $ACTION_MASSAGE_REMOVE:  
{"id":10} 

 Player 2 14:51:52 $ACTION_MASSAGE_REMOVE:  
{"id":14} 

 Player 2 14:51:52 $ACTION_MASSAGE_REMOVE:  
{"id":15} 

 Player 2 14:51:52 $ACTION_MASSAGE_REMOVE:  
{"id":19} 

 Player 2 14:51:52 $ACTION_MASSAGE_REMOVE:  
{"id":20} 

 Player 2 14:51:52 $ACTION_MASSAGE_REMOVE:  
{"id":24} 

 Player 2 14:51:52 $ACTION_MASSAGE_REMOVE:  
{"id":25} 

 Player 2 14:51:52 $ACTION_MASSAGE_REMOVE:  
{"id":29} 

 Player 2 14:51:52 $NEXT_STACK_ID:  

 Player 2 14:51:52 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 14:51:52 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is rolling against Widow<Monster>"} 

 Player 2 14:51:52 $ADD_TO_STACK:  
{"stackEffect":{"entityId":4,"creatorCardId":265,"rollingPlayerCardId":265,"stackEffectType":2,"attackedMonsterCardId":257}} 

 Player 2 14:51:52 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is rolling against Widow<Monster>"} 

 Player 2 14:51:52 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":4,"creatorCardId":265,"rollingPlayerCardId":265,"stackEffectType":2,"attackedMonsterCardId":257}} 

 Player 2 14:51:52 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":30,"_text":"Add AttackRoll 4 "}} 

 Player 2 14:51:52 $ROLL_DICE:  
{"playerId":2} 

 Player 1 14:51:52 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 14:51:52 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 14:51:52 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is rolling against Widow<Monster>"} 

 Player 1 14:51:52 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is rolling against Widow<Monster>"} 

 Player 2 14:51:53 $ACTION_MASSAGE_REMOVE:  
{"id":29} 

 Player 2 14:51:53 $ACTION_MASSAGE_REMOVE:  
{"id":25} 

 Player 2 14:51:54 $ROLL_DICE_ENDED:  
{"playerId":2,"numberRolled":6} 

 Player 2 14:51:54 $UPDATE_STACK_VIS:  
{"stackId":4,"text":"player rolled 6 vs Widow<Monster>"} 

 Player 2 14:51:54 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 rolled 6 vs Widow<Monster>"} 

 Player 2 14:51:54 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 2 14:51:54 $ACTION_MASSAGE_REMOVE:  
{"id":30} 

 Player 2 14:51:54 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 rolled 6 vs Widow<Monster>"} 

 Player 2 14:51:54 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":4,"creatorCardId":265,"numberRolled":6,"rollingPlayerCardId":265,"stackEffectType":2,"attackedMonsterCardId":257}} 

 Player 2 14:51:54 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":31,"_text":"Response Adding AttackRoll 4"},"childOfId":30} 

 Player 2 14:51:54 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":32,"_text":"Wait For Response From Player 2 "},"childOfId":30} 

 Player 2 14:51:54 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 2 14:51:54 $ACTION_MASSAGE_REMOVE:  
{"id":32} 

 Player 2 14:51:54 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":33,"_text":"Wait For Response From Player 1 "},"childOfId":30} 

 Player 2 14:51:54 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 2 14:51:54 $GET_REACTION:  
{"playerId":1,"activePlayerId":2} 

 Player 1 14:51:54 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is rolling against Widow<Monster>"} 

 Player 1 14:51:54 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is rolling against Widow<Monster>"} 

 Player 1 14:51:54 $RESPOND_TO:  
{"playerId":2,"stackEffectResponse":false} 

 Player 2 14:51:54 $ACTION_MASSAGE_REMOVE:  
{"id":33} 

 Player 2 14:51:54 $ACTION_MASSAGE_REMOVE:  
{"id":31} 

 Player 2 14:51:54 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":34,"_text":"Resolve AttackRoll 4 "}} 

 Player 2 14:51:54 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":35,"_text":"Added 0 to original roll"}} 

 Player 2 14:51:54 $NEXT_STACK_ID:  

 Player 2 14:51:54 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 rolled 6 vs Widow<Monster>"} 

 Player 2 14:51:54 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 2 14:51:54 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow combat damage to Eden \n2:Player 2 rolled 6 vs Widow<Monster>"} 

 Player 2 14:51:54 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":5,"creatorCardId":265,"entityToDoDamageCardId":257,"entityToTakeDamageCardId":265,"isMonsterDoDamage":true,"isPlayerTakeDamage":true,"isMonsterTakeDamage":false,"isPlayerDoDamage":false,"stackEffectType":3}} 

 Player 2 14:51:54 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow combat damage to Eden \n2:Player 2 rolled 6 vs Widow<Monster>"} 

 Player 2 14:51:54 $REMOVE_SE_VIS_PREV:  
{"stackEffect":{"entityId":4,"creatorCardId":265,"numberRolled":6,"rollingPlayerCardId":265,"stackEffectType":2,"attackedMonsterCardId":257}} 

 Player 2 14:51:54 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow combat damage to Eden \n2:Player 2 rolled 6 vs Widow<Monster>"} 

 Player 2 14:51:54 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":5,"creatorCardId":265,"entityToDoDamageCardId":257,"entityToTakeDamageCardId":265,"isMonsterDoDamage":true,"isPlayerTakeDamage":true,"isMonsterTakeDamage":false,"isPlayerDoDamage":false,"stackEffectType":3}} 

 Player 2 14:51:54 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow combat damage to Eden \n2:Player 2 rolled 6 vs Widow<Monster>"} 

 Player 2 14:51:54 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":4,"creatorCardId":265,"numberRolled":6,"rollingPlayerCardId":265,"stackEffectType":2,"attackedMonsterCardId":257}} 

 Player 2 14:51:54 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow combat damage to Eden \n2:Player 2 rolled 6 vs Widow<Monster>"} 

 Player 2 14:51:54 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow combat damage to Eden \n2:Player 2 rolled 6 vs Widow<Monster>"} 

 Player 2 14:51:54 $REPLACE_STACK:  
{"currentStack":[{"entityId":5,"creatorCardId":265,"entityToDoDamageCardId":257,"entityToTakeDamageCardId":265,"isMonsterDoDamage":true,"isPlayerTakeDamage":true,"isMonsterTakeDamage":false,"isPlayerDoDamage":false,"stackEffectType":3},{"entityId":4,"creatorCardId":265,"numberRolled":6,"rollingPlayerCardId":265,"stackEffectType":2,"attackedMonsterCardId":257}]} 

 Player 2 14:51:54 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"PLAYER_ROLL_DICE","args":[{"type":2,"number":1},{"type":2,"number":2},{"type":2,"number":4}],"result":null,"preventMethod":false,"methodScopeId":265,"scopeIsPlayer":true,"index":5,"originStackId":4},"isAfterActivation":true,"index":5} 

 Player 2 14:51:55 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow combat damage to Eden \n2:Player 2 rolled 6 vs Widow<Monster>"} 

 Player 2 14:51:55 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":4,"creatorCardId":265,"numberRolled":6,"rollingPlayerCardId":265,"stackEffectType":2,"attackedMonsterCardId":257}} 

 Player 2 14:51:55 $ACTION_MASSAGE_REMOVE:  
{"id":34} 

 Player 2 14:51:55 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow combat damage to Eden"} 

 Player 2 14:51:55 $REMOVE_SE_VIS_PREV:  
{"stackEffect":{"entityId":4,"creatorCardId":265,"numberRolled":6,"rollingPlayerCardId":265,"stackEffectType":2,"attackedMonsterCardId":257}} 

 Player 2 14:51:55 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":36,"_text":"Remove After Resolve AttackRoll 4  "}} 

 Player 2 14:51:55 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow combat damage to Eden"} 

 Player 2 14:51:55 $REMOVE_FROM_STACK:  
{"stackEffect":{"entityId":4,"creatorCardId":265,"numberRolled":6,"rollingPlayerCardId":265,"stackEffectType":2,"attackedMonsterCardId":257}} 

 Player 2 14:51:55 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":37,"_text":"Response Remove After Resolve AttackRoll 4"},"childOfId":36} 

 Player 2 14:51:55 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":38,"_text":"Wait For Response From Player 2 "},"childOfId":36} 

 Player 2 14:51:55 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 2 14:51:55 $ACTION_MASSAGE_REMOVE:  
{"id":38} 

 Player 2 14:51:55 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":39,"_text":"Wait For Response From Player 1 "},"childOfId":36} 

 Player 2 14:51:55 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 2 14:51:55 $GET_REACTION:  
{"playerId":1,"activePlayerId":2} 

 Player 1 14:51:55 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is rolling against Widow<Monster>"} 

 Player 1 14:51:55 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is rolling against Widow<Monster>"} 

 Player 1 14:51:55 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow combat damage to Eden"} 

 Player 1 14:51:55 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow combat damage to Eden"} 

 Player 1 14:51:55 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow combat damage to Eden"} 

 Player 1 14:51:55 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow combat damage to Eden"} 

 Player 1 14:51:55 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow combat damage to Eden"} 

 Player 1 14:51:55 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow combat damage to Eden"} 

 Player 1 14:51:55 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow combat damage to Eden"} 

 Player 1 14:51:55 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow combat damage to Eden"} 

 Player 1 14:51:55 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow combat damage to Eden"} 

 Player 1 14:51:55 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow combat damage to Eden"} 

 Player 1 14:51:55 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow combat damage to Eden \n2:Player 2 is rolling against Widow<Monster>"} 

 Player 1 14:51:55 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow combat damage to Eden \n2:Player 2 is rolling against Widow<Monster>"} 

 Player 1 14:51:55 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow combat damage to Eden \n2:Player 2 is rolling against Widow<Monster>"} 

 Player 1 14:51:55 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow combat damage to Eden \n2:Player 2 is rolling against Widow<Monster>"} 

 Player 1 14:51:55 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow combat damage to Eden \n2:Player 2 is rolling against Widow<Monster>"} 

 Player 1 14:51:55 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow combat damage to Eden \n2:Player 2 is rolling against Widow<Monster>"} 

 Player 1 14:51:55 $RESPOND_TO:  
{"playerId":2,"stackEffectResponse":false} 

 Player 2 14:51:55 $ACTION_MASSAGE_REMOVE:  
{"id":39} 

 Player 2 14:51:56 $ACTION_MASSAGE_REMOVE:  
{"id":37} 

 Player 2 14:51:56 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":40,"_text":"Resolve CombatDamage 5 "}} 

 Player 2 14:51:56 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow 1 combat damage to Eden"} 

 Player 2 14:51:56 $UPDATE_STACK_VIS:  
{"stackId":5,"text":"Widow will deal 1 combat damage to Eden"} 

 Player 2 14:51:56 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow 1 combat damage to Eden"} 

 Player 2 14:51:56 $PLAYER_GET_HIT:  
{"playerId":2,"damage":1,"damageDealerId":257} 

 Player 2 14:51:56 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"PLAYER_GET_HIT","args":[{"type":2,"number":1},{"type":0,"number":257}],"result":null,"preventMethod":false,"methodScopeId":265,"scopeIsPlayer":true,"index":6,"originStackId":-1},"isAfterActivation":true,"index":6} 

 Player 2 14:51:56 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow 1 combat damage to Eden"} 

 Player 2 14:51:56 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":5,"creatorCardId":265,"entityToDoDamageCardId":257,"entityToTakeDamageCardId":265,"isMonsterDoDamage":true,"isPlayerTakeDamage":true,"isMonsterTakeDamage":false,"isPlayerDoDamage":false,"stackEffectType":3}} 

 Player 2 14:51:56 $ACTION_MASSAGE_REMOVE:  
{"id":40} 

 Player 2 14:51:56 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 14:51:56 $REMOVE_SE_VIS_PREV:  
{"stackEffect":{"entityId":5,"creatorCardId":265,"entityToDoDamageCardId":257,"entityToTakeDamageCardId":265,"isMonsterDoDamage":true,"isPlayerTakeDamage":true,"isMonsterTakeDamage":false,"isPlayerDoDamage":false,"stackEffectType":3}} 

 Player 2 14:51:56 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":41,"_text":"Remove After Resolve CombatDamage 5  "}} 

 Player 2 14:51:56 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 14:51:56 $REMOVE_FROM_STACK:  
{"stackEffect":{"entityId":5,"creatorCardId":265,"entityToDoDamageCardId":257,"entityToTakeDamageCardId":265,"isMonsterDoDamage":true,"isPlayerTakeDamage":true,"isMonsterTakeDamage":false,"isPlayerDoDamage":false,"stackEffectType":3}} 

 Player 2 14:51:56 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":42,"_text":"Response Remove After Resolve CombatDamage 5"},"childOfId":41} 

 Player 2 14:51:56 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":43,"_text":"Wait For Response From Player 1 "},"childOfId":41} 

 Player 2 14:51:56 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 2 14:51:56 $GET_REACTION:  
{"playerId":1,"activePlayerId":2} 

 Player 1 14:51:56 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow combat damage to Eden"} 

 Player 1 14:51:56 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow combat damage to Eden"} 

 Player 1 14:51:56 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow combat damage to Eden"} 

 Player 1 14:51:56 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow combat damage to Eden"} 

 Player 1 14:51:56 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow combat damage to Eden"} 

 Player 1 14:51:56 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow combat damage to Eden"} 

 Player 1 14:51:56 $RESPOND_TO:  
{"playerId":2,"stackEffectResponse":false} 

 Player 2 14:51:56 $ACTION_MASSAGE_REMOVE:  
{"id":43} 

 Player 2 14:51:56 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":44,"_text":"Wait For Response From Player 2 "},"childOfId":41} 

 Player 2 14:51:56 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 2 14:51:56 $ACTION_MASSAGE_REMOVE:  
{"id":44} 

 Player 2 14:51:56 $ACTION_MASSAGE_REMOVE:  
{"id":42} 

 Player 2 14:51:56 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":45,"_text":"Stack Was Emptied "}} 

 Player 2 14:51:56 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 14:51:57 $ACTION_MASSAGE_REMOVE:  
{"id":0} 

 Player 2 14:51:57 $ACTION_MASSAGE_REMOVE:  
{"id":1} 

 Player 2 14:51:57 $ACTION_MASSAGE_REMOVE:  
{"id":2} 

 Player 2 14:51:57 $ACTION_MASSAGE_REMOVE:  
{"id":3} 

 Player 2 14:51:57 $ACTION_MASSAGE_REMOVE:  
{"id":4} 

 Player 2 14:51:57 $ACTION_MASSAGE_REMOVE:  
{"id":5} 

 Player 2 14:51:57 $ACTION_MASSAGE_REMOVE:  
{"id":9} 

 Player 2 14:51:57 $ACTION_MASSAGE_REMOVE:  
{"id":10} 

 Player 2 14:51:57 $ACTION_MASSAGE_REMOVE:  
{"id":14} 

 Player 2 14:51:57 $ACTION_MASSAGE_REMOVE:  
{"id":15} 

 Player 2 14:51:57 $ACTION_MASSAGE_REMOVE:  
{"id":19} 

 Player 2 14:51:57 $ACTION_MASSAGE_REMOVE:  
{"id":20} 

 Player 2 14:51:57 $ACTION_MASSAGE_REMOVE:  
{"id":24} 

 Player 2 14:51:57 $ACTION_MASSAGE_REMOVE:  
{"id":25} 

 Player 2 14:51:57 $ACTION_MASSAGE_REMOVE:  
{"id":29} 

 Player 2 14:51:57 $ACTION_MASSAGE_REMOVE:  
{"id":30} 

 Player 2 14:51:57 $ACTION_MASSAGE_REMOVE:  
{"id":34} 

 Player 2 14:51:57 $ACTION_MASSAGE_REMOVE:  
{"id":35} 

 Player 2 14:51:57 $ACTION_MASSAGE_REMOVE:  
{"id":36} 

 Player 2 14:51:57 $ACTION_MASSAGE_REMOVE:  
{"id":40} 

 Player 2 14:51:57 $ACTION_MASSAGE_REMOVE:  
{"id":41} 

 Player 2 14:51:57 $ACTION_MASSAGE_REMOVE:  
{"id":45} 

 Player 2 14:51:57 $ACTION_MASSAGE_REMOVE:  
{"id":35} 

 Player 2 14:51:57 $ACTION_MASSAGE_REMOVE:  
{"id":36} 

 Player 2 14:51:57 $NEXT_STACK_ID:  

 Player 2 14:51:57 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 14:51:57 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is rolling against Widow<Monster>"} 

 Player 2 14:51:57 $ADD_TO_STACK:  
{"stackEffect":{"entityId":6,"creatorCardId":265,"rollingPlayerCardId":265,"stackEffectType":2,"attackedMonsterCardId":257}} 

 Player 2 14:51:57 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is rolling against Widow<Monster>"} 

 Player 2 14:51:57 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":6,"creatorCardId":265,"rollingPlayerCardId":265,"stackEffectType":2,"attackedMonsterCardId":257}} 

 Player 2 14:51:57 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":46,"_text":"Add AttackRoll 6 "}} 

 Player 2 14:51:57 $ROLL_DICE:  
{"playerId":2} 

 Player 1 14:51:57 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 14:51:57 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 14:51:57 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is rolling against Widow<Monster>"} 

 Player 1 14:51:58 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is rolling against Widow<Monster>"} 

 Player 2 14:51:58 $ACTION_MASSAGE_REMOVE:  
{"id":45} 

 Player 2 14:51:59 $ACTION_MASSAGE_REMOVE:  
{"id":41} 

 Player 2 14:51:59 $ROLL_DICE_ENDED:  
{"playerId":2,"numberRolled":2} 

 Player 2 14:51:59 $UPDATE_STACK_VIS:  
{"stackId":6,"text":"player rolled 2 vs Widow<Monster>"} 

 Player 2 14:51:59 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 rolled 2 vs Widow<Monster>"} 

 Player 2 14:51:59 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 2 14:51:59 $ACTION_MASSAGE_REMOVE:  
{"id":46} 

 Player 2 14:51:59 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 rolled 2 vs Widow<Monster>"} 

 Player 2 14:51:59 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":6,"creatorCardId":265,"numberRolled":2,"rollingPlayerCardId":265,"stackEffectType":2,"attackedMonsterCardId":257}} 

 Player 2 14:51:59 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":47,"_text":"Response Adding AttackRoll 6"},"childOfId":46} 

 Player 2 14:51:59 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":48,"_text":"Wait For Response From Player 2 "},"childOfId":46} 

 Player 2 14:52:00 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 14:52:00 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is rolling against Widow<Monster>"} 

 Player 1 14:52:00 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is rolling against Widow<Monster>"} 

 Player 2 14:52:03 $ACTION_MASSAGE_REMOVE:  
{"id":48} 

 Player 2 14:52:03 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":49,"_text":"Wait For Response From Player 1 "},"childOfId":46} 

 Player 2 14:52:04 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 2 14:52:04 $GET_REACTION:  
{"playerId":1,"activePlayerId":2} 

 Player 1 14:52:06 $RESPOND_TO:  
{"playerId":2,"stackEffectResponse":true} 

 Player 1 14:52:06 $SHOW_DECISION:  
{"startCardId":267,"endCardId":267} 

 Player 2 14:52:06 $ACTION_MASSAGE_REMOVE:  
{"id":49} 

 Player 2 14:52:06 $ACTION_MASSAGE_REMOVE:  
{"id":47} 

 Player 1 14:52:08 $RESPOND_TO:  
{"playerId":-1,"stackEffectResponse":false} 

 Player 1 14:52:09 $NEXT_STACK_ID:  

 Player 1 14:52:09 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is rolling against Widow<Monster>"} 

 Player 1 14:52:09 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is rolling against Widow<Monster> \n2:Player 1 activated Isaac"} 

 Player 1 14:52:09 $ADD_TO_STACK:  
{"stackEffect":{"entityId":7,"creatorCardId":267,"hasLockingStackEffect":false,"itemToPlayCardId":267,"itemPlayerId":1,"hasDataBeenCollectedYet":false,"stackEffectType":1}} 

 Player 1 14:52:09 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is rolling against Widow<Monster> \n2:Player 1 activated Isaac"} 

 Player 1 14:52:09 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":7,"creatorCardId":267,"hasLockingStackEffect":false,"itemToPlayCardId":267,"itemPlayerId":1,"hasDataBeenCollectedYet":false,"stackEffectType":1}} 

 Player 1 14:52:09 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":50,"_text":"Add ActivateItem 7 "}} 

 Player 2 14:52:09 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 rolled 2 vs Widow<Monster>"} 

 Player 2 14:52:09 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 rolled 2 vs Widow<Monster>"} 

 Player 2 14:52:09 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 rolled 2 vs Widow<Monster> \n2:Player 1 activated Isaac"} 

 Player 2 14:52:09 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 rolled 2 vs Widow<Monster> \n2:Player 1 activated Isaac"} 

 Player 1 14:52:11 $SHOW_DECISION:  
{"startCardId":267,"endCardId":48} 

 Player 1 14:52:14 $USE_ITEM:  
{"cardId":267} 

 Player 1 14:52:14 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 14:52:14 $ACTION_MASSAGE_REMOVE:  
{"id":50} 

 Player 1 14:52:14 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is rolling against Widow<Monster> \n2:Player 1 activated Isaac"} 

 Player 1 14:52:14 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":7,"creatorCardId":267,"hasLockingStackEffect":false,"itemToPlayCardId":267,"itemPlayerId":1,"effectToDoData":{"type":1,"index":0},"hasDataBeenCollectedYet":true,"stackEffectType":1}} 

 Player 1 14:52:14 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":51,"_text":"Response Adding ActivateItem 7"},"childOfId":50} 

 Player 1 14:52:14 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":52,"_text":"Wait For Response From Player 2 "},"childOfId":50} 

 Player 1 14:52:14 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 14:52:14 $GET_REACTION:  
{"playerId":2,"activePlayerId":1} 

 Player 2 14:52:14 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 rolled 2 vs Widow<Monster> \n2:Player 1 activated Isaac"} 

 Player 2 14:52:14 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 rolled 2 vs Widow<Monster> \n2:Player 1 activated Isaac"} 

 Player 2 14:52:15 $RESPOND_TO:  
{"playerId":1,"stackEffectResponse":false} 

 Player 1 14:52:15 $ACTION_MASSAGE_REMOVE:  
{"id":52} 

 Player 1 14:52:15 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":53,"_text":"Wait For Response From Player 1 "},"childOfId":50} 

 Player 1 14:52:15 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 14:52:15 $ACTION_MASSAGE_REMOVE:  
{"id":53} 

 Player 1 14:52:15 $ACTION_MASSAGE_REMOVE:  
{"id":51} 

 Player 1 14:52:15 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":54,"_text":"Resolve ActivateItem 7 "}} 

 Player 1 14:52:15 $ACTIVATE_PARTICLE_EFFECT:  
{"cardId":267,"particleType":6} 

 Player 1 14:52:17 $DISABLE_PARTICLE_EFFECT:  
{"cardId":267,"particleType":6} 

 Player 1 14:52:17 $NEXT_STACK_ID:  

 Player 1 14:52:17 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is rolling against Widow<Monster> \n2:Player 1 activated Isaac"} 

 Player 1 14:52:17 $PLAYER_LOSE_LOOT:  
{"playerId":1,"cardId":48} 

 Player 1 14:52:17 $MOVE_CARD:  
{"moveIndex":11,"cardId":48,"placeID":277,"flipIfFlipped":true,"playerId":1,"placeType":"Card"} 

 Player 2 14:52:17 $MOVE_CARD_END:  
{"moveIndex":11,"cardId":48,"flipIfFlipped":true,"playerId":1} 

 Player 1 14:52:17 $MOVE_CARD_TO_PILE:  
{"type":7,"cardId":48} 

 Player 1 14:52:17 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is rolling against Widow<Monster> \n2:Player 1 play 3 Cents(10): addMoney \n3:Player 1 activated Isaac"} 

 Player 1 14:52:17 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 14:52:17 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is rolling against Widow<Monster> \n2:Player 1 play 3 Cents(10): addMoney \n3:Player 1 activated Isaac"} 

 Player 1 14:52:17 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":8,"creatorCardId":267,"hasLockingStackEffect":false,"hasLockingStackEffectResolved":false,"lootToPlayCardId":48,"lootPlayerId":1,"effectToDo":{"effectName":"addMoney","cardEffectNum":0,"cardPlayerId":1,"cardId":48,"effctType":1},"hasDataBeenCollectedYet":true,"stackEffectType":8}} 

 Player 1 14:52:17 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is rolling against Widow<Monster> \n2:Player 1 play 3 Cents(10): addMoney \n3:Player 1 activated Isaac"} 

 Player 1 14:52:17 $REMOVE_SE_VIS_PREV:  
{"stackEffect":{"entityId":6,"creatorCardId":265,"rollingPlayerCardId":265,"stackEffectType":2,"attackedMonsterCardId":257}} 

 Player 1 14:52:17 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is rolling against Widow<Monster> \n2:Player 1 play 3 Cents(10): addMoney \n3:Player 1 activated Isaac"} 

 Player 1 14:52:17 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":6,"creatorCardId":265,"numberRolled":2,"rollingPlayerCardId":265,"stackEffectType":2,"attackedMonsterCardId":257}} 

 Player 1 14:52:17 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is rolling against Widow<Monster> \n2:Player 1 play 3 Cents(10): addMoney \n3:Player 1 activated Isaac"} 

 Player 1 14:52:17 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":8,"creatorCardId":267,"hasLockingStackEffect":false,"hasLockingStackEffectResolved":false,"lootToPlayCardId":48,"lootPlayerId":1,"effectToDo":{"effectName":"addMoney","cardEffectNum":0,"cardPlayerId":1,"cardId":48,"effctType":1},"hasDataBeenCollectedYet":true,"stackEffectType":8}} 

 Player 1 14:52:17 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is rolling against Widow<Monster> \n2:Player 1 play 3 Cents(10): addMoney \n3:Player 1 activated Isaac"} 

 Player 1 14:52:17 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":7,"creatorCardId":267,"hasLockingStackEffect":false,"itemToPlayCardId":267,"itemPlayerId":1,"effectToDoData":{"type":1,"index":0},"hasDataBeenCollectedYet":true,"stackEffectType":1}} 

 Player 1 14:52:17 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is rolling against Widow<Monster> \n2:Player 1 play 3 Cents(10): addMoney \n3:Player 1 activated Isaac"} 

 Player 1 14:52:18 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is rolling against Widow<Monster> \n2:Player 1 play 3 Cents(10): addMoney \n3:Player 1 activated Isaac"} 

 Player 1 14:52:18 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is rolling against Widow<Monster> \n2:Player 1 play 3 Cents(10): addMoney \n3:Player 1 activated Isaac"} 

 Player 1 14:52:18 $REPLACE_STACK:  
{"currentStack":[{"entityId":6,"creatorCardId":265,"numberRolled":2,"rollingPlayerCardId":265,"stackEffectType":2,"attackedMonsterCardId":257},{"entityId":8,"creatorCardId":267,"hasLockingStackEffect":false,"hasLockingStackEffectResolved":false,"lootToPlayCardId":48,"lootPlayerId":1,"effectToDo":{"effectName":"addMoney","cardEffectNum":0,"cardPlayerId":1,"cardId":48,"effctType":1},"hasDataBeenCollectedYet":true,"stackEffectType":8},{"entityId":7,"creatorCardId":267,"hasLockingStackEffect":false,"itemToPlayCardId":267,"itemPlayerId":1,"effectToDoData":{"type":1,"index":0},"hasDataBeenCollectedYet":true,"stackEffectType":1}]} 

 Player 1 14:52:18 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is rolling against Widow<Monster> \n2:Player 1 play 3 Cents(10): addMoney \n3:Player 1 activated Isaac"} 

 Player 1 14:52:18 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":7,"creatorCardId":267,"hasLockingStackEffect":false,"itemToPlayCardId":267,"itemPlayerId":1,"hasDataBeenCollectedYet":true,"stackEffectType":1}} 

 Player 1 14:52:18 $ACTION_MASSAGE_REMOVE:  
{"id":54} 

 Player 1 14:52:18 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is rolling against Widow<Monster> \n2:Player 1 play 3 Cents(10): addMoney"} 

 Player 1 14:52:18 $REMOVE_SE_VIS_PREV:  
{"stackEffect":{"entityId":7,"creatorCardId":267,"hasLockingStackEffect":false,"itemToPlayCardId":267,"itemPlayerId":1,"hasDataBeenCollectedYet":true,"stackEffectType":1}} 

 Player 1 14:52:18 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":55,"_text":"Remove After Resolve ActivateItem 7  "}} 

 Player 1 14:52:18 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is rolling against Widow<Monster> \n2:Player 1 play 3 Cents(10): addMoney"} 

 Player 1 14:52:18 $REMOVE_FROM_STACK:  
{"stackEffect":{"entityId":7,"creatorCardId":267,"hasLockingStackEffect":false,"itemToPlayCardId":267,"itemPlayerId":1,"hasDataBeenCollectedYet":true,"stackEffectType":1}} 

 Player 1 14:52:18 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":56,"_text":"Response Remove After Resolve ActivateItem 7"},"childOfId":55} 

 Player 1 14:52:18 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":57,"_text":"Wait For Response From Player 2 "},"childOfId":55} 

 Player 1 14:52:18 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 14:52:18 $GET_REACTION:  
{"playerId":2,"activePlayerId":1} 

 Player 2 14:52:18 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 rolled 2 vs Widow<Monster> \n2:Player 1 activated Isaac"} 

 Player 2 14:52:18 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 rolled 2 vs Widow<Monster> \n2:Player 1 activated Isaac"} 

 Player 2 14:52:18 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 rolled 2 vs Widow<Monster> \n2:Player 1 play 3 Cents(10) "} 

 Player 2 14:52:18 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 rolled 2 vs Widow<Monster> \n2:Player 1 play 3 Cents(10) "} 

 Player 2 14:52:18 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 rolled 2 vs Widow<Monster> \n2:Player 1 play 3 Cents(10) "} 

 Player 2 14:52:18 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 rolled 2 vs Widow<Monster> \n2:Player 1 play 3 Cents(10) "} 

 Player 2 14:52:18 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 rolled 2 vs Widow<Monster> \n2:Player 1 play 3 Cents(10) "} 

 Player 2 14:52:18 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 rolled 2 vs Widow<Monster> \n2:Player 1 play 3 Cents(10) "} 

 Player 2 14:52:18 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 rolled 2 vs Widow<Monster> \n2:Player 1 play 3 Cents(10) "} 

 Player 2 14:52:18 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 rolled 2 vs Widow<Monster> \n2:Player 1 play 3 Cents(10) "} 

 Player 2 14:52:18 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 rolled 2 vs Widow<Monster> \n2:Player 1 play 3 Cents(10) "} 

 Player 2 14:52:18 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 rolled 2 vs Widow<Monster> \n2:Player 1 play 3 Cents(10) "} 

 Player 2 14:52:18 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 rolled 2 vs Widow<Monster> \n2:Player 1 play 3 Cents(10) "} 

 Player 2 14:52:18 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 rolled 2 vs Widow<Monster> \n2:Player 1 play 3 Cents(10) "} 

 Player 2 14:52:18 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 rolled 2 vs Widow<Monster> \n2:Player 1 play 3 Cents(10) "} 

 Player 2 14:52:18 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 rolled 2 vs Widow<Monster> \n2:Player 1 play 3 Cents(10) "} 

 Player 2 14:52:18 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is rolling against Widow<Monster> \n2:Player 1 play 3 Cents(10)  \n3:Player 1 activated Isaac"} 

 Player 2 14:52:18 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is rolling against Widow<Monster> \n2:Player 1 play 3 Cents(10)  \n3:Player 1 activated Isaac"} 

 Player 2 14:52:18 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is rolling against Widow<Monster> \n2:Player 1 play 3 Cents(10)  \n3:Player 1 activated Isaac"} 

 Player 2 14:52:18 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is rolling against Widow<Monster> \n2:Player 1 play 3 Cents(10)  \n3:Player 1 activated Isaac"} 

 Player 2 14:52:18 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is rolling against Widow<Monster> \n2:Player 1 play 3 Cents(10)  \n3:Player 1 activated Isaac"} 

 Player 2 14:52:18 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is rolling against Widow<Monster> \n2:Player 1 play 3 Cents(10)  \n3:Player 1 activated Isaac"} 

 Player 2 14:52:18 $RESPOND_TO:  
{"playerId":1,"stackEffectResponse":false} 

 Player 1 14:52:19 $ACTION_MASSAGE_REMOVE:  
{"id":57} 

 Player 1 14:52:19 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":58,"_text":"Wait For Response From Player 1 "},"childOfId":55} 

 Player 1 14:52:19 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 14:52:19 $ACTION_MASSAGE_REMOVE:  
{"id":58} 

 Player 1 14:52:19 $ACTION_MASSAGE_REMOVE:  
{"id":56} 

 Player 1 14:52:19 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":59,"_text":"Resolve PlayLootCardStackEffect 8 "}} 

 Player 1 14:52:19 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is rolling against Widow<Monster> \n2:Player 1 play 3 Cents(10): addMoney"} 

 Player 1 14:52:19 $ACTIVATE_PARTICLE_EFFECT:  
{"cardId":48,"particleType":6} 

 Player 1 14:52:20 $ACTION_MASSAGE_REMOVE:  
{"id":55} 

 Player 1 14:52:21 $DISABLE_PARTICLE_EFFECT:  
{"cardId":48,"particleType":6} 

 Player 1 14:52:21 $SET_MONEY:  
{"playerId":1,"numOfCoins":6} 

 Player 1 14:52:21 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"PLAYER_CHANGE_MONEY","args":[{"type":2,"number":3}],"result":null,"preventMethod":false,"methodScopeId":267,"scopeIsPlayer":true,"index":2,"originStackId":-1},"isAfterActivation":true,"index":2} 

 Player 1 14:52:21 $REMOVE_FROM_PILE:  
{"cardId":48} 

 Player 1 14:52:21 $MOVE_CARD:  
{"moveIndex":12,"cardId":48,"placeID":278,"flipIfFlipped":true,"playerId":1,"placeType":"Card"} 

 Player 2 14:52:21 $MOVE_CARD_END:  
{"moveIndex":12,"cardId":48,"flipIfFlipped":true,"playerId":1} 

 Player 1 14:52:21 $MOVE_CARD_TO_PILE:  
{"type":1,"cardId":48} 

 Player 1 14:52:21 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is rolling against Widow<Monster> \n2:Player 1 play 3 Cents(10): addMoney"} 

 Player 1 14:52:21 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":8,"creatorCardId":267,"hasLockingStackEffect":false,"hasLockingStackEffectResolved":false,"lootToPlayCardId":48,"lootPlayerId":1,"hasDataBeenCollectedYet":true,"stackEffectType":8}} 

 Player 1 14:52:21 $ACTION_MASSAGE_REMOVE:  
{"id":59} 

 Player 1 14:52:21 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is rolling against Widow<Monster>"} 

 Player 1 14:52:21 $REMOVE_SE_VIS_PREV:  
{"stackEffect":{"entityId":8,"creatorCardId":267,"hasLockingStackEffect":false,"hasLockingStackEffectResolved":false,"lootToPlayCardId":48,"lootPlayerId":1,"hasDataBeenCollectedYet":true,"stackEffectType":8}} 

 Player 1 14:52:21 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":60,"_text":"Remove After Resolve PlayLootCardStackEffect 8  "}} 

 Player 1 14:52:21 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is rolling against Widow<Monster>"} 

 Player 1 14:52:21 $REMOVE_FROM_STACK:  
{"stackEffect":{"entityId":8,"creatorCardId":267,"hasLockingStackEffect":false,"hasLockingStackEffectResolved":false,"lootToPlayCardId":48,"lootPlayerId":1,"hasDataBeenCollectedYet":true,"stackEffectType":8}} 

 Player 1 14:52:21 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":61,"_text":"Response Remove After Resolve PlayLootCardStackEffect 8"},"childOfId":60} 

 Player 1 14:52:21 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":62,"_text":"Wait For Response From Player 1 "},"childOfId":60} 

 Player 1 14:52:21 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 14:52:21 $ACTION_MASSAGE_REMOVE:  
{"id":62} 

 Player 1 14:52:21 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":63,"_text":"Wait For Response From Player 2 "},"childOfId":60} 

 Player 1 14:52:21 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 14:52:21 $GET_REACTION:  
{"playerId":2,"activePlayerId":1} 

 Player 2 14:52:22 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is rolling against Widow<Monster> \n2:Player 1 play 3 Cents(10) "} 

 Player 2 14:52:22 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is rolling against Widow<Monster> \n2:Player 1 play 3 Cents(10) "} 

 Player 2 14:52:22 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is rolling against Widow<Monster> \n2:Player 1 play 3 Cents(10) "} 

 Player 2 14:52:22 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is rolling against Widow<Monster> \n2:Player 1 play 3 Cents(10) "} 

 Player 2 14:52:22 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is rolling against Widow<Monster> \n2:Player 1 play 3 Cents(10) "} 

 Player 2 14:52:22 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is rolling against Widow<Monster> \n2:Player 1 play 3 Cents(10) "} 

 Player 2 14:52:22 $RESPOND_TO:  
{"playerId":1,"stackEffectResponse":false} 

 Player 1 14:52:22 $ACTION_MASSAGE_REMOVE:  
{"id":63} 

 Player 1 14:52:22 $ACTION_MASSAGE_REMOVE:  
{"id":61} 

 Player 1 14:52:22 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":64,"_text":"Resolve AttackRoll 6 "}} 

 Player 1 14:52:22 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is rolling against Widow<Monster>"} 

 Player 1 14:52:22 $DO_STACK_EFFECT:  
{"originPlayerId":1,"playerId":2,"currentStack":[{"entityId":6,"creatorCardId":265,"numberRolled":2,"rollingPlayerCardId":265,"stackEffectType":2,"attackedMonsterCardId":257}]} 

 Player 2 14:52:22 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is rolling against Widow<Monster>"} 

 Player 2 14:52:22 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is rolling against Widow<Monster>"} 

 Player 2 14:52:22 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":65,"_text":"Added 0 to original roll"}} 

 Player 2 14:52:22 $NEXT_STACK_ID:  

 Player 2 14:52:22 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is rolling against Widow<Monster>"} 

 Player 2 14:52:22 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 2 14:52:22 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow combat damage to Eden \n2:Player 2 is rolling against Widow<Monster>"} 

 Player 2 14:52:22 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":9,"creatorCardId":265,"entityToDoDamageCardId":257,"entityToTakeDamageCardId":265,"isMonsterDoDamage":true,"isPlayerTakeDamage":true,"isMonsterTakeDamage":false,"isPlayerDoDamage":false,"stackEffectType":3}} 

 Player 2 14:52:22 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow combat damage to Eden \n2:Player 2 is rolling against Widow<Monster>"} 

 Player 2 14:52:22 $REMOVE_SE_VIS_PREV:  
{"stackEffect":{"entityId":6,"creatorCardId":265,"numberRolled":2,"rollingPlayerCardId":265,"stackEffectType":2,"attackedMonsterCardId":257}} 

 Player 2 14:52:22 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow combat damage to Eden \n2:Player 2 is rolling against Widow<Monster>"} 

 Player 2 14:52:22 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":9,"creatorCardId":265,"entityToDoDamageCardId":257,"entityToTakeDamageCardId":265,"isMonsterDoDamage":true,"isPlayerTakeDamage":true,"isMonsterTakeDamage":false,"isPlayerDoDamage":false,"stackEffectType":3}} 

 Player 2 14:52:22 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow combat damage to Eden \n2:Player 2 is rolling against Widow<Monster>"} 

 Player 2 14:52:22 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":6,"creatorCardId":265,"numberRolled":2,"rollingPlayerCardId":265,"stackEffectType":2,"attackedMonsterCardId":257}} 

 Player 2 14:52:22 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow combat damage to Eden \n2:Player 2 is rolling against Widow<Monster>"} 

 Player 2 14:52:22 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow combat damage to Eden \n2:Player 2 is rolling against Widow<Monster>"} 

 Player 2 14:52:22 $REPLACE_STACK:  
{"currentStack":[{"entityId":9,"creatorCardId":265,"entityToDoDamageCardId":257,"entityToTakeDamageCardId":265,"isMonsterDoDamage":true,"isPlayerTakeDamage":true,"isMonsterTakeDamage":false,"isPlayerDoDamage":false,"stackEffectType":3},{"entityId":6,"creatorCardId":265,"numberRolled":2,"rollingPlayerCardId":265,"stackEffectType":2,"attackedMonsterCardId":257}]} 

 Player 2 14:52:22 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"PLAYER_ROLL_DICE","args":[{"type":2,"number":1},{"type":2,"number":1},{"type":2,"number":4}],"result":null,"preventMethod":false,"methodScopeId":265,"scopeIsPlayer":true,"index":7,"originStackId":6},"isAfterActivation":true,"index":7} 

 Player 2 14:52:22 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow combat damage to Eden \n2:Player 2 is rolling against Widow<Monster>"} 

 Player 2 14:52:22 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":6,"creatorCardId":265,"numberRolled":2,"rollingPlayerCardId":265,"stackEffectType":2,"attackedMonsterCardId":257}} 

 Player 2 14:52:22 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow combat damage to Eden \n2:Player 2 is rolling against Widow<Monster>"} 

 Player 2 14:52:23 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow combat damage to Eden \n2:Player 2 is rolling against Widow<Monster>"} 

 Player 2 14:52:23 $FINISH_DO_STACK_EFFECT:  
{"playerId":1,"newStack":[{"entityId":9,"creatorCardId":265,"entityToDoDamageCardId":257,"entityToTakeDamageCardId":265,"isMonsterDoDamage":true,"isPlayerTakeDamage":true,"isMonsterTakeDamage":false,"isPlayerDoDamage":false,"stackEffectType":3},{"entityId":6,"creatorCardId":265,"numberRolled":2,"rollingPlayerCardId":265,"stackEffectType":2,"attackedMonsterCardId":257}]} 

 Player 1 14:52:23 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is rolling against Widow<Monster>"} 

 Player 1 14:52:23 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is rolling against Widow<Monster>"} 

 Player 1 14:52:23 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow combat damage to Eden"} 

 Player 1 14:52:23 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow combat damage to Eden"} 

 Player 1 14:52:23 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow combat damage to Eden"} 

 Player 1 14:52:23 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow combat damage to Eden"} 

 Player 1 14:52:23 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow combat damage to Eden"} 

 Player 1 14:52:23 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow combat damage to Eden"} 

 Player 1 14:52:23 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow combat damage to Eden"} 

 Player 1 14:52:23 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow combat damage to Eden"} 

 Player 1 14:52:23 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow combat damage to Eden"} 

 Player 1 14:52:23 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow combat damage to Eden"} 

 Player 1 14:52:23 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow combat damage to Eden \n2:Player 2 is rolling against Widow<Monster>"} 

 Player 1 14:52:23 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow combat damage to Eden \n2:Player 2 is rolling against Widow<Monster>"} 

 Player 1 14:52:23 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow combat damage to Eden \n2:Player 2 is rolling against Widow<Monster>"} 

 Player 1 14:52:23 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow combat damage to Eden \n2:Player 2 is rolling against Widow<Monster>"} 

 Player 1 14:52:23 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow combat damage to Eden \n2:Player 2 is rolling against Widow<Monster>"} 

 Player 1 14:52:23 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow combat damage to Eden \n2:Player 2 is rolling against Widow<Monster>"} 

 Player 1 14:52:23 $ACTION_MASSAGE_REMOVE:  
{"id":64} 

 Player 1 14:52:23 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow combat damage to Eden \n2:Player 2 is rolling against Widow<Monster>"} 

 Player 1 14:52:23 $REMOVE_SE_VIS_PREV:  
{"stackEffect":{"entityId":9,"creatorCardId":265,"entityToDoDamageCardId":257,"entityToTakeDamageCardId":265,"isMonsterDoDamage":true,"isPlayerTakeDamage":true,"isMonsterTakeDamage":false,"isPlayerDoDamage":false,"stackEffectType":3}} 

 Player 1 14:52:23 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow combat damage to Eden \n2:Player 2 is rolling against Widow<Monster>"} 

 Player 1 14:52:23 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":9,"creatorCardId":265,"entityToDoDamageCardId":257,"entityToTakeDamageCardId":265,"isMonsterDoDamage":true,"isPlayerTakeDamage":true,"isMonsterTakeDamage":false,"isPlayerDoDamage":false,"stackEffectType":3}} 

 Player 1 14:52:23 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow combat damage to Eden \n2:Player 2 is rolling against Widow<Monster>"} 

 Player 1 14:52:23 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":6,"creatorCardId":265,"numberRolled":2,"rollingPlayerCardId":265,"stackEffectType":2,"attackedMonsterCardId":257}} 

 Player 1 14:52:23 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow combat damage to Eden \n2:Player 2 is rolling against Widow<Monster>"} 

 Player 1 14:52:23 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow combat damage to Eden \n2:Player 2 is rolling against Widow<Monster>"} 

 Player 1 14:52:23 $REPLACE_STACK:  
{"currentStack":[{"entityId":9,"creatorCardId":265,"entityToDoDamageCardId":257,"entityToTakeDamageCardId":265,"isMonsterDoDamage":true,"isPlayerTakeDamage":true,"isMonsterTakeDamage":false,"isPlayerDoDamage":false,"stackEffectType":3},{"entityId":6,"creatorCardId":265,"numberRolled":2,"rollingPlayerCardId":265,"stackEffectType":2,"attackedMonsterCardId":257}]} 

 Player 1 14:52:23 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow combat damage to Eden"} 

 Player 1 14:52:23 $REMOVE_SE_VIS_PREV:  
{"stackEffect":{"entityId":6,"creatorCardId":265,"numberRolled":2,"rollingPlayerCardId":265,"stackEffectType":2,"attackedMonsterCardId":257}} 

 Player 1 14:52:23 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":66,"_text":"Remove After Resolve AttackRoll 6  "}} 

 Player 1 14:52:23 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow combat damage to Eden"} 

 Player 1 14:52:23 $REMOVE_FROM_STACK:  
{"stackEffect":{"entityId":6,"creatorCardId":265,"numberRolled":2,"rollingPlayerCardId":265,"stackEffectType":2,"attackedMonsterCardId":257}} 

 Player 1 14:52:23 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":67,"_text":"Response Remove After Resolve AttackRoll 6"},"childOfId":66} 

 Player 1 14:52:24 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":68,"_text":"Wait For Response From Player 2 "},"childOfId":66} 

 Player 1 14:52:24 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 14:52:24 $GET_REACTION:  
{"playerId":2,"activePlayerId":1} 

 Player 2 14:52:24 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow combat damage to Eden \n2:Player 2 is rolling against Widow<Monster>"} 

 Player 2 14:52:24 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow combat damage to Eden \n2:Player 2 is rolling against Widow<Monster>"} 

 Player 2 14:52:24 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow combat damage to Eden \n2:Player 2 is rolling against Widow<Monster>"} 

 Player 2 14:52:24 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow combat damage to Eden \n2:Player 2 is rolling against Widow<Monster>"} 

 Player 2 14:52:24 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow combat damage to Eden \n2:Player 2 is rolling against Widow<Monster>"} 

 Player 2 14:52:24 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow combat damage to Eden \n2:Player 2 is rolling against Widow<Monster>"} 

 Player 2 14:52:24 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow combat damage to Eden \n2:Player 2 is rolling against Widow<Monster>"} 

 Player 2 14:52:24 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow combat damage to Eden \n2:Player 2 is rolling against Widow<Monster>"} 

 Player 2 14:52:24 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow combat damage to Eden \n2:Player 2 is rolling against Widow<Monster>"} 

 Player 2 14:52:24 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow combat damage to Eden \n2:Player 2 is rolling against Widow<Monster>"} 

 Player 2 14:52:24 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow combat damage to Eden \n2:Player 2 is rolling against Widow<Monster>"} 

 Player 2 14:52:24 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow combat damage to Eden \n2:Player 2 is rolling against Widow<Monster>"} 

 Player 2 14:52:24 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow combat damage to Eden \n2:Player 2 is rolling against Widow<Monster>"} 

 Player 2 14:52:24 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow combat damage to Eden \n2:Player 2 is rolling against Widow<Monster>"} 

 Player 2 14:52:24 $RESPOND_TO:  
{"playerId":1,"stackEffectResponse":false} 

 Player 1 14:52:24 $ACTION_MASSAGE_REMOVE:  
{"id":68} 

 Player 1 14:52:24 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":69,"_text":"Wait For Response From Player 1 "},"childOfId":66} 

 Player 1 14:52:24 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 14:52:24 $ACTION_MASSAGE_REMOVE:  
{"id":69} 

 Player 1 14:52:24 $ACTION_MASSAGE_REMOVE:  
{"id":67} 

 Player 1 14:52:24 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":70,"_text":"Resolve CombatDamage 9 "}} 

 Player 1 14:52:24 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow combat damage to Eden"} 

 Player 1 14:52:24 $DO_STACK_EFFECT:  
{"originPlayerId":1,"playerId":2,"currentStack":[{"entityId":9,"creatorCardId":265,"entityToDoDamageCardId":257,"entityToTakeDamageCardId":265,"isMonsterDoDamage":true,"isPlayerTakeDamage":true,"isMonsterTakeDamage":false,"isPlayerDoDamage":false,"stackEffectType":3}]} 

 Player 1 14:52:24 $ACTION_MASSAGE_REMOVE:  
{"id":60} 

 Player 2 14:52:24 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow combat damage to Eden"} 

 Player 2 14:52:24 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow combat damage to Eden"} 

 Player 2 14:52:24 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow 1 combat damage to Eden"} 

 Player 2 14:52:24 $UPDATE_STACK_VIS:  
{"stackId":9,"text":"Widow will deal 1 combat damage to Eden"} 

 Player 2 14:52:24 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow 1 combat damage to Eden"} 

 Player 2 14:52:24 $PLAYER_GET_HIT:  
{"playerId":2,"damage":1,"damageDealerId":257} 

 Player 2 14:52:24 $NEXT_STACK_ID:  

 Player 2 14:52:24 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow 1 combat damage to Eden"} 

 Player 2 14:52:24 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 2 14:52:25 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow 1 combat damage to Eden \n2:Player 2 is about to die"} 

 Player 2 14:52:25 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":10,"creatorCardId":265,"playerToDieCardId":265,"stackEffectType":15,"killerId":257}} 

 Player 2 14:52:25 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow 1 combat damage to Eden \n2:Player 2 is about to die"} 

 Player 2 14:52:25 $REMOVE_SE_VIS_PREV:  
{"stackEffect":{"entityId":9,"creatorCardId":265,"entityToDoDamageCardId":257,"entityToTakeDamageCardId":265,"isMonsterDoDamage":true,"isPlayerTakeDamage":true,"isMonsterTakeDamage":false,"isPlayerDoDamage":false,"stackEffectType":3}} 

 Player 2 14:52:25 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow 1 combat damage to Eden \n2:Player 2 is about to die"} 

 Player 2 14:52:25 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":9,"creatorCardId":265,"entityToDoDamageCardId":257,"entityToTakeDamageCardId":265,"isMonsterDoDamage":true,"isPlayerTakeDamage":true,"isMonsterTakeDamage":false,"isPlayerDoDamage":false,"stackEffectType":3}} 

 Player 2 14:52:25 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow 1 combat damage to Eden \n2:Player 2 is about to die"} 

 Player 2 14:52:25 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":10,"creatorCardId":265,"playerToDieCardId":265,"stackEffectType":15,"killerId":257}} 

 Player 2 14:52:25 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow 1 combat damage to Eden \n2:Player 2 is about to die"} 

 Player 2 14:52:25 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow 1 combat damage to Eden \n2:Player 2 is about to die"} 

 Player 2 14:52:25 $REPLACE_STACK:  
{"currentStack":[{"entityId":9,"creatorCardId":265,"entityToDoDamageCardId":257,"entityToTakeDamageCardId":265,"isMonsterDoDamage":true,"isPlayerTakeDamage":true,"isMonsterTakeDamage":false,"isPlayerDoDamage":false,"stackEffectType":3},{"entityId":10,"creatorCardId":265,"playerToDieCardId":265,"stackEffectType":15,"killerId":257}]} 

 Player 2 14:52:25 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"PLAYER_GET_HIT","args":[{"type":2,"number":1},{"type":0,"number":257}],"result":null,"preventMethod":false,"methodScopeId":265,"scopeIsPlayer":true,"index":8,"originStackId":-1},"isAfterActivation":true,"index":8} 

 Player 2 14:52:25 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow 1 combat damage to Eden \n2:Player 2 is about to die"} 

 Player 2 14:52:25 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow 1 combat damage to Eden \n2:Player 2 is about to die"} 

 Player 2 14:52:25 $FINISH_DO_STACK_EFFECT:  
{"playerId":1,"newStack":[{"entityId":9,"creatorCardId":265,"entityToDoDamageCardId":257,"entityToTakeDamageCardId":265,"isMonsterDoDamage":true,"isPlayerTakeDamage":true,"isMonsterTakeDamage":false,"isPlayerDoDamage":false,"stackEffectType":3},{"entityId":10,"creatorCardId":265,"playerToDieCardId":265,"stackEffectType":15,"killerId":257}]} 

 Player 2 14:52:25 $ACTION_MASSAGE_REMOVE:  
{"id":65} 

 Player 1 14:52:25 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow combat damage to Eden"} 

 Player 1 14:52:25 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow combat damage to Eden"} 

 Player 1 14:52:25 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die"} 

 Player 1 14:52:25 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die"} 

 Player 1 14:52:25 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die"} 

 Player 1 14:52:25 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die"} 

 Player 1 14:52:25 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die"} 

 Player 1 14:52:25 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die"} 

 Player 1 14:52:25 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die"} 

 Player 1 14:52:25 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die"} 

 Player 1 14:52:25 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die"} 

 Player 1 14:52:25 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die"} 

 Player 1 14:52:25 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow combat damage to Eden \n2:Player 2 is about to die"} 

 Player 1 14:52:25 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow combat damage to Eden \n2:Player 2 is about to die"} 

 Player 1 14:52:25 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow combat damage to Eden \n2:Player 2 is about to die"} 

 Player 1 14:52:25 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow combat damage to Eden \n2:Player 2 is about to die"} 

 Player 1 14:52:25 $ACTION_MASSAGE_REMOVE:  
{"id":70} 

 Player 1 14:52:25 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow combat damage to Eden \n2:Player 2 is about to die"} 

 Player 1 14:52:25 $REMOVE_SE_VIS_PREV:  
{"stackEffect":{"entityId":9,"creatorCardId":265,"entityToDoDamageCardId":257,"entityToTakeDamageCardId":265,"isMonsterDoDamage":true,"isPlayerTakeDamage":true,"isMonsterTakeDamage":false,"isPlayerDoDamage":false,"stackEffectType":3}} 

 Player 1 14:52:25 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow combat damage to Eden \n2:Player 2 is about to die"} 

 Player 1 14:52:26 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":9,"creatorCardId":265,"entityToDoDamageCardId":257,"entityToTakeDamageCardId":265,"isMonsterDoDamage":true,"isPlayerTakeDamage":true,"isMonsterTakeDamage":false,"isPlayerDoDamage":false,"stackEffectType":3}} 

 Player 1 14:52:26 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow combat damage to Eden \n2:Player 2 is about to die"} 

 Player 1 14:52:26 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":10,"creatorCardId":265,"playerToDieCardId":265,"stackEffectType":15,"killerId":257}} 

 Player 1 14:52:26 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow combat damage to Eden \n2:Player 2 is about to die"} 

 Player 1 14:52:26 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow combat damage to Eden \n2:Player 2 is about to die"} 

 Player 1 14:52:26 $REPLACE_STACK:  
{"currentStack":[{"entityId":9,"creatorCardId":265,"entityToDoDamageCardId":257,"entityToTakeDamageCardId":265,"isMonsterDoDamage":true,"isPlayerTakeDamage":true,"isMonsterTakeDamage":false,"isPlayerDoDamage":false,"stackEffectType":3},{"entityId":10,"creatorCardId":265,"playerToDieCardId":265,"stackEffectType":15,"killerId":257}]} 

 Player 1 14:52:26 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die"} 

 Player 1 14:52:26 $REMOVE_SE_VIS_PREV:  
{"stackEffect":{"entityId":9,"creatorCardId":265,"entityToDoDamageCardId":257,"entityToTakeDamageCardId":265,"isMonsterDoDamage":true,"isPlayerTakeDamage":true,"isMonsterTakeDamage":false,"isPlayerDoDamage":false,"stackEffectType":3}} 

 Player 1 14:52:26 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":71,"_text":"Remove After Resolve CombatDamage 9  "}} 

 Player 1 14:52:26 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die"} 

 Player 1 14:52:26 $REMOVE_FROM_STACK:  
{"stackEffect":{"entityId":9,"creatorCardId":265,"entityToDoDamageCardId":257,"entityToTakeDamageCardId":265,"isMonsterDoDamage":true,"isPlayerTakeDamage":true,"isMonsterTakeDamage":false,"isPlayerDoDamage":false,"stackEffectType":3}} 

 Player 1 14:52:26 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":72,"_text":"Response Remove After Resolve CombatDamage 9"},"childOfId":71} 

 Player 1 14:52:26 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":73,"_text":"Wait For Response From Player 2 "},"childOfId":71} 

 Player 1 14:52:26 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 14:52:26 $GET_REACTION:  
{"playerId":2,"activePlayerId":1} 

 Player 1 14:52:26 $ACTION_MASSAGE_REMOVE:  
{"id":66} 

 Player 2 14:52:26 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow 1 combat damage to Eden \n2:Player 2 is about to die"} 

 Player 2 14:52:26 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow 1 combat damage to Eden \n2:Player 2 is about to die"} 

 Player 2 14:52:26 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow 1 combat damage to Eden \n2:Player 2 is about to die"} 

 Player 2 14:52:26 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow 1 combat damage to Eden \n2:Player 2 is about to die"} 

 Player 2 14:52:26 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow 1 combat damage to Eden \n2:Player 2 is about to die"} 

 Player 2 14:52:26 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow 1 combat damage to Eden \n2:Player 2 is about to die"} 

 Player 2 14:52:26 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow 1 combat damage to Eden \n2:Player 2 is about to die"} 

 Player 2 14:52:26 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow 1 combat damage to Eden \n2:Player 2 is about to die"} 

 Player 2 14:52:26 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow 1 combat damage to Eden \n2:Player 2 is about to die"} 

 Player 2 14:52:26 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow 1 combat damage to Eden \n2:Player 2 is about to die"} 

 Player 2 14:52:26 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow combat damage to Eden \n2:Player 2 is about to die"} 

 Player 2 14:52:26 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow combat damage to Eden \n2:Player 2 is about to die"} 

 Player 2 14:52:26 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow combat damage to Eden \n2:Player 2 is about to die"} 

 Player 2 14:52:26 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Widow combat damage to Eden \n2:Player 2 is about to die"} 

 Player 2 14:52:26 $RESPOND_TO:  
{"playerId":1,"stackEffectResponse":false} 

 Player 1 14:52:26 $ACTION_MASSAGE_REMOVE:  
{"id":73} 

 Player 1 14:52:26 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":74,"_text":"Wait For Response From Player 1 "},"childOfId":71} 

 Player 1 14:52:26 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 14:52:26 $ACTION_MASSAGE_REMOVE:  
{"id":74} 

 Player 1 14:52:26 $ACTION_MASSAGE_REMOVE:  
{"id":72} 

 Player 1 14:52:27 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":75,"_text":"Resolve PlayerDeath 10 "}} 

 Player 1 14:52:27 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die"} 

 Player 1 14:52:27 $DO_STACK_EFFECT:  
{"originPlayerId":1,"playerId":2,"currentStack":[{"entityId":10,"creatorCardId":265,"playerToDieCardId":265,"stackEffectType":15,"killerId":257}]} 

 Player 2 14:52:27 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die"} 

 Player 2 14:52:27 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die"} 

 Player 2 14:52:27 $DISABLE_PARTICLE_EFFECT:  
{"cardId":257,"particleType":5} 

 Player 2 14:52:27 $CANCEL_ATTACK:  

 Player 2 14:52:27 $NEXT_STACK_ID:  

 Player 2 14:52:27 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die"} 

 Player 2 14:52:27 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"PLAYER_PAY_DEATH_PANELTIES","args":[],"result":null,"preventMethod":false,"methodScopeId":265,"scopeIsPlayer":true,"index":1,"originStackId":11},"isAfterActivation":false,"index":1} 

 Player 2 14:52:27 $NEXT_STACK_ID:  

 Player 2 14:52:27 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die \n2:Player 2 is about to pay death penalties"} 

 Player 2 14:52:27 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die \n2:Player 2 is about to pay death penalties \n3:Activate Holy Card effect PreventDeathPanelties<PreventDeathPanelties>"} 

 Player 2 14:52:27 $ADD_TO_STACK:  
{"stackEffect":{"effectCollectedData":null,"entityId":12,"creatorCardId":265,"hasLockingStackEffect":false,"cardActivatorId":2,"cardWithEffectId":107,"effectToDo":{"effectName":"PreventDeathPenalties","cardEffectNum":0,"cardPlayerId":2,"cardId":107,"effctType":3},"isAfterActivation":false,"index":1,"hasDataBeenCollectedYet":false,"stackEffectType":14}} 

 Player 2 14:52:27 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die \n2:Player 2 is about to pay death penalties \n3:Activate Holy Card effect PreventDeathPanelties<PreventDeathPanelties>"} 

 Player 2 14:52:27 $ADD_SE_VIS_PREV:  
{"stackEffect":{"effectCollectedData":null,"entityId":12,"creatorCardId":265,"hasLockingStackEffect":false,"cardActivatorId":2,"cardWithEffectId":107,"effectToDo":{"effectName":"PreventDeathPenalties","cardEffectNum":0,"cardPlayerId":2,"cardId":107,"effctType":3},"isAfterActivation":false,"index":1,"hasDataBeenCollectedYet":false,"stackEffectType":14}} 

 Player 2 14:52:27 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":76,"_text":"Add ActivatePassiveEffect 12 "}} 

 Player 2 14:52:27 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die \n2:Player 2 is about to pay death penalties \n3:Activate Holy Card effect PreventDeathPanelties<PreventDeathPanelties>"} 

 Player 2 14:52:27 $ACTION_MASSAGE_REMOVE:  
{"id":76} 

 Player 2 14:52:27 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die \n2:Player 2 is about to pay death penalties \n3:Activate Holy Card effect PreventDeathPanelties<PreventDeathPanelties>"} 

 Player 2 14:52:27 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"effectCollectedData":null,"entityId":12,"creatorCardId":265,"hasLockingStackEffect":false,"cardActivatorId":2,"cardWithEffectId":107,"effectToDo":{"effectName":"PreventDeathPenalties","cardEffectNum":0,"cardPlayerId":2,"cardId":107,"effctType":3},"isAfterActivation":false,"index":1,"hasDataBeenCollectedYet":false,"stackEffectType":14}} 

 Player 2 14:52:27 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":77,"_text":"Response Adding ActivatePassiveEffect 12"},"childOfId":76} 

 Player 2 14:52:27 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":78,"_text":"Wait For Response From Player 1 "},"childOfId":76} 

 Player 2 14:52:27 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 2 14:52:27 $GET_REACTION:  
{"playerId":1,"activePlayerId":2} 

 Player 1 14:52:27 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die"} 

 Player 1 14:52:27 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die"} 

 Player 1 14:52:27 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die \n2:Activate Holy Card "} 

 Player 1 14:52:27 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die \n2:Activate Holy Card "} 

 Player 1 14:52:27 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die \n2:Activate Holy Card "} 

 Player 1 14:52:27 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die \n2:Activate Holy Card "} 

 Player 1 14:52:27 $RESPOND_TO:  
{"playerId":2,"stackEffectResponse":false} 

 Player 2 14:52:27 $ACTION_MASSAGE_REMOVE:  
{"id":78} 

 Player 2 14:52:27 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":79,"_text":"Wait For Response From Player 2 "},"childOfId":76} 

 Player 2 14:52:27 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 2 14:52:27 $ACTION_MASSAGE_REMOVE:  
{"id":79} 

 Player 2 14:52:28 $ACTION_MASSAGE_REMOVE:  
{"id":77} 

 Player 2 14:52:28 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":80,"_text":"Resolve ActivatePassiveEffect 12 "}} 

 Player 2 14:52:28 $ACTIVATE_PARTICLE_EFFECT:  
{"cardId":107,"particleType":6} 

 Player 1 14:52:28 $ACTION_MASSAGE_REMOVE:  
{"id":71} 

 Player 2 14:52:29 $DISABLE_PARTICLE_EFFECT:  
{"cardId":107,"particleType":6} 

 Player 2 14:52:29 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die \n2:Activate Holy Card effect PreventDeathPanelties<PreventDeathPanelties>"} 

 Player 2 14:52:29 $REMOVE_SE_VIS_PREV:  
{"stackEffect":{"entityId":11,"creatorCardId":265,"playerToPayCardId":265,"stackEffectType":16}} 

 Player 2 14:52:30 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":81,"_text":"Fizzle PlayerDeathPenalties 11"}} 

 Player 2 14:52:30 $FIZZLE_STACK_EFFECT:  
{"entityId":11} 

 Player 2 14:52:30 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"PLAYER_PAY_DEATH_PANELTIES","args":[],"result":null,"preventMethod":true,"methodScopeId":265,"scopeIsPlayer":true,"index":1,"originStackId":11},"isAfterActivation":false,"index":1} 

 Player 2 14:52:30 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die \n2:Activate Holy Card effect PreventDeathPanelties<PreventDeathPanelties>"} 

 Player 2 14:52:30 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"effectCollectedData":null,"entityId":12,"creatorCardId":265,"hasLockingStackEffect":false,"cardActivatorId":2,"cardWithEffectId":107,"isAfterActivation":false,"index":1,"hasDataBeenCollectedYet":false,"stackEffectType":14}} 

 Player 2 14:52:30 $ACTION_MASSAGE_REMOVE:  
{"id":80} 

 Player 2 14:52:30 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die"} 

 Player 2 14:52:30 $REMOVE_SE_VIS_PREV:  
{"stackEffect":{"effectCollectedData":null,"entityId":12,"creatorCardId":265,"hasLockingStackEffect":false,"cardActivatorId":2,"cardWithEffectId":107,"isAfterActivation":false,"index":1,"hasDataBeenCollectedYet":false,"stackEffectType":14}} 

 Player 2 14:52:30 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":82,"_text":"Remove After Resolve ActivatePassiveEffect 12  "}} 

 Player 2 14:52:30 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die"} 

 Player 2 14:52:30 $REMOVE_FROM_STACK:  
{"stackEffect":{"effectCollectedData":null,"entityId":12,"creatorCardId":265,"hasLockingStackEffect":false,"cardActivatorId":2,"cardWithEffectId":107,"isAfterActivation":false,"index":1,"hasDataBeenCollectedYet":false,"stackEffectType":14}} 

 Player 2 14:52:30 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":83,"_text":"Response Remove After Resolve ActivatePassiveEffect 12"},"childOfId":82} 

 Player 2 14:52:30 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":84,"_text":"Wait For Response From Player 2 "},"childOfId":82} 

 Player 2 14:52:30 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 2 14:52:30 $ACTION_MASSAGE_REMOVE:  
{"id":84} 

 Player 2 14:52:30 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":85,"_text":"Wait For Response From Player 1 "},"childOfId":82} 

 Player 2 14:52:30 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 2 14:52:30 $GET_REACTION:  
{"playerId":1,"activePlayerId":2} 

 Player 1 14:52:30 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die \n2:Activate Holy Card "} 

 Player 1 14:52:30 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die \n2:Activate Holy Card "} 

 Player 1 14:52:30 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die \n2:Activate Holy Card "} 

 Player 1 14:52:30 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die \n2:Activate Holy Card "} 

 Player 1 14:52:30 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die \n2:Activate Holy Card "} 

 Player 1 14:52:30 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die \n2:Activate Holy Card "} 

 Player 1 14:52:30 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die \n2:Activate Holy Card "} 

 Player 1 14:52:30 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die \n2:Activate Holy Card "} 

 Player 1 14:52:30 $RESPOND_TO:  
{"playerId":2,"stackEffectResponse":false} 

 Player 2 14:52:30 $ACTION_MASSAGE_REMOVE:  
{"id":85} 

 Player 2 14:52:30 $ACTION_MASSAGE_REMOVE:  
{"id":83} 

 Player 2 14:52:30 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":86,"_text":"Resolve PlayerDeath 10 "}} 

 Player 2 14:52:30 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die"} 

 Player 2 14:52:30 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":11,"creatorCardId":265,"playerToPayCardId":265,"stackEffectType":16}} 

 Player 2 14:52:30 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die"} 

 Player 2 14:52:30 $REMOVE_SE_VIS_PREV:  
{"stackEffect":{"entityId":10,"creatorCardId":265,"playerToDieCardId":265,"stackEffectType":15,"killerId":257}} 

 Player 2 14:52:30 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die"} 

 Player 2 14:52:31 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":10,"creatorCardId":265,"playerToDieCardId":265,"stackEffectType":15,"killerId":257}} 

 Player 2 14:52:31 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die"} 

 Player 2 14:52:31 $REPLACE_STACK:  
{"currentStack":[{"entityId":10,"creatorCardId":265,"playerToDieCardId":265,"stackEffectType":15,"killerId":257}]} 

 Player 2 14:52:31 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die"} 

 Player 2 14:52:31 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":10,"creatorCardId":265,"playerToDieCardId":265,"stackEffectType":15,"killerId":257}} 

 Player 2 14:52:31 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die"} 

 Player 2 14:52:31 $FINISH_DO_STACK_EFFECT:  
{"playerId":1,"newStack":[{"entityId":10,"creatorCardId":265,"playerToDieCardId":265,"stackEffectType":15,"killerId":257}]} 

 Player 1 14:52:31 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die"} 

 Player 1 14:52:31 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die"} 

 Player 1 14:52:31 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to pay death penalties"} 

 Player 1 14:52:31 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to pay death penalties"} 

 Player 1 14:52:31 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to pay death penalties"} 

 Player 1 14:52:31 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to pay death penalties"} 

 Player 1 14:52:31 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to pay death penalties"} 

 Player 1 14:52:31 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to pay death penalties"} 

 Player 1 14:52:31 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die"} 

 Player 1 14:52:31 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die"} 

 Player 1 14:52:31 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die"} 

 Player 1 14:52:31 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die"} 

 Player 1 14:52:31 $ACTION_MASSAGE_REMOVE:  
{"id":75} 

 Player 1 14:52:31 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die"} 

 Player 1 14:52:31 $REMOVE_SE_VIS_PREV:  
{"stackEffect":{"entityId":10,"creatorCardId":265,"playerToDieCardId":265,"stackEffectType":15,"killerId":257}} 

 Player 1 14:52:31 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die"} 

 Player 1 14:52:31 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":10,"creatorCardId":265,"playerToDieCardId":265,"stackEffectType":15,"killerId":257}} 

 Player 1 14:52:31 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die"} 

 Player 1 14:52:31 $REPLACE_STACK:  
{"currentStack":[{"entityId":10,"creatorCardId":265,"playerToDieCardId":265,"stackEffectType":15,"killerId":257}]} 

 Player 1 14:52:31 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 14:52:31 $REMOVE_SE_VIS_PREV:  
{"stackEffect":{"entityId":10,"creatorCardId":265,"playerToDieCardId":265,"stackEffectType":15,"killerId":257}} 

 Player 1 14:52:31 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":87,"_text":"Remove After Resolve PlayerDeath 10  "}} 

 Player 1 14:52:31 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 14:52:31 $REMOVE_FROM_STACK:  
{"stackEffect":{"entityId":10,"creatorCardId":265,"playerToDieCardId":265,"stackEffectType":15,"killerId":257}} 

 Player 1 14:52:31 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":88,"_text":"Response Remove After Resolve PlayerDeath 10"},"childOfId":87} 

 Player 1 14:52:31 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":89,"_text":"Wait For Response From Player 1 "},"childOfId":87} 

 Player 1 14:52:31 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 14:52:31 $ACTION_MASSAGE_REMOVE:  
{"id":89} 

 Player 1 14:52:31 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":90,"_text":"Wait For Response From Player 2 "},"childOfId":87} 

 Player 1 14:52:31 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 14:52:32 $GET_REACTION:  
{"playerId":2,"activePlayerId":1} 

 Player 2 14:52:32 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die"} 

 Player 2 14:52:32 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die"} 

 Player 2 14:52:32 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die"} 

 Player 2 14:52:32 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die"} 

 Player 2 14:52:32 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die"} 

 Player 2 14:52:32 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die"} 

 Player 2 14:52:32 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die"} 

 Player 2 14:52:32 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die"} 

 Player 2 14:52:32 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die"} 

 Player 2 14:52:32 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is about to die"} 

 Player 2 14:52:32 $RESPOND_TO:  
{"playerId":1,"stackEffectResponse":false} 

 Player 1 14:52:32 $ACTION_MASSAGE_REMOVE:  
{"id":90} 

 Player 1 14:52:32 $ACTION_MASSAGE_REMOVE:  
{"id":88} 

 Player 1 14:52:32 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":91,"_text":"Stack Was Emptied "}} 

 Player 1 14:52:32 $STACK_EMPTIED:  
{"playerId":2} 

 Player 1 14:52:32 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 14:52:32 $ACTION_MASSAGE_REMOVE:  
{"id":0} 

 Player 1 14:52:32 $ACTION_MASSAGE_REMOVE:  
{"id":1} 

 Player 1 14:52:32 $ACTION_MASSAGE_REMOVE:  
{"id":2} 

 Player 1 14:52:32 $ACTION_MASSAGE_REMOVE:  
{"id":3} 

 Player 1 14:52:32 $ACTION_MASSAGE_REMOVE:  
{"id":4} 

 Player 1 14:52:32 $ACTION_MASSAGE_REMOVE:  
{"id":5} 

 Player 1 14:52:32 $ACTION_MASSAGE_REMOVE:  
{"id":9} 

 Player 1 14:52:32 $ACTION_MASSAGE_REMOVE:  
{"id":10} 

 Player 1 14:52:32 $ACTION_MASSAGE_REMOVE:  
{"id":14} 

 Player 1 14:52:32 $ACTION_MASSAGE_REMOVE:  
{"id":15} 

 Player 1 14:52:32 $ACTION_MASSAGE_REMOVE:  
{"id":19} 

 Player 1 14:52:32 $ACTION_MASSAGE_REMOVE:  
{"id":20} 

 Player 1 14:52:32 $ACTION_MASSAGE_REMOVE:  
{"id":24} 

 Player 1 14:52:32 $ACTION_MASSAGE_REMOVE:  
{"id":25} 

 Player 1 14:52:32 $ACTION_MASSAGE_REMOVE:  
{"id":29} 

 Player 1 14:52:32 $ACTION_MASSAGE_REMOVE:  
{"id":30} 

 Player 1 14:52:32 $ACTION_MASSAGE_REMOVE:  
{"id":34} 

 Player 1 14:52:32 $ACTION_MASSAGE_REMOVE:  
{"id":35} 

 Player 1 14:52:32 $ACTION_MASSAGE_REMOVE:  
{"id":36} 

 Player 1 14:52:32 $ACTION_MASSAGE_REMOVE:  
{"id":40} 

 Player 1 14:52:32 $ACTION_MASSAGE_REMOVE:  
{"id":41} 

 Player 1 14:52:33 $ACTION_MASSAGE_REMOVE:  
{"id":45} 

 Player 1 14:52:33 $ACTION_MASSAGE_REMOVE:  
{"id":46} 

 Player 1 14:52:33 $ACTION_MASSAGE_REMOVE:  
{"id":50} 

 Player 1 14:52:33 $ACTION_MASSAGE_REMOVE:  
{"id":54} 

 Player 1 14:52:33 $ACTION_MASSAGE_REMOVE:  
{"id":55} 

 Player 1 14:52:33 $ACTION_MASSAGE_REMOVE:  
{"id":59} 

 Player 1 14:52:33 $ACTION_MASSAGE_REMOVE:  
{"id":60} 

 Player 1 14:52:33 $ACTION_MASSAGE_REMOVE:  
{"id":64} 

 Player 1 14:52:33 $ACTION_MASSAGE_REMOVE:  
{"id":65} 

 Player 1 14:52:33 $ACTION_MASSAGE_REMOVE:  
{"id":66} 

 Player 1 14:52:33 $ACTION_MASSAGE_REMOVE:  
{"id":70} 

 Player 1 14:52:33 $ACTION_MASSAGE_REMOVE:  
{"id":71} 

 Player 1 14:52:33 $ACTION_MASSAGE_REMOVE:  
{"id":75} 

 Player 1 14:52:33 $ACTION_MASSAGE_REMOVE:  
{"id":76} 

 Player 1 14:52:33 $ACTION_MASSAGE_REMOVE:  
{"id":80} 

 Player 1 14:52:33 $ACTION_MASSAGE_REMOVE:  
{"id":81} 

 Player 1 14:52:33 $ACTION_MASSAGE_REMOVE:  
{"id":82} 

 Player 1 14:52:33 $ACTION_MASSAGE_REMOVE:  
{"id":86} 

 Player 1 14:52:33 $ACTION_MASSAGE_REMOVE:  
{"id":87} 

 Player 1 14:52:33 $ACTION_MASSAGE_REMOVE:  
{"id":91} 

 Player 1 14:52:33 $TURN_PLAYER_DO_STACK_EFFECT:  
{"playerId":2} 

 Player 2 14:52:33 $ACTION_MASSAGE_REMOVE:  
{"id":81} 

 Player 2 14:52:33 $ACTION_MASSAGE_REMOVE:  
{"id":82} 

 Player 1 14:52:33 $ACTION_MASSAGE_REMOVE:  
{"id":91} 

 Player 1 14:52:34 $ACTION_MASSAGE_REMOVE:  
{"id":87} 

 Player 2 16:32:20 $MATCH: 