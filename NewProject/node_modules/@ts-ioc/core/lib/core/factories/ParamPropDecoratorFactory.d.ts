import 'reflect-metadata';
import { ParamPropMetadata } from '../metadatas';
import { MetadataAdapter, MetadataExtends } from './DecoratorFactory';
import { Token } from '../../types';
/**
 * property parameter decorator.
 */
export declare type PropParamDecorator = (target: Object, propertyKey: string | symbol, parameterIndex?: number) => void;
/**
 * Parameter and Property decorator.
 *
 * @export
 * @interface IParamPropDecorator
 */
export interface IParamPropDecorator<T extends ParamPropMetadata> {
    /**
     * define parameter or property decorator with param.
     *
     * @param {Token<T>} provider define provider to resolve value to the parameter or property.
     */
    (provider: Token<any>): PropParamDecorator;
    /**
     * define parameter or property decorator with metadata map.
     * @param {T} [metadata] define matadata map to resolve value to the parameter or property.
     */
    (metadata?: T): PropParamDecorator;
    /**
     * define parameter or property decorator.
     */
    (target: object, propertyKey: string | symbol, parameterIndex?: number): void;
}
/**
 * create parameter or property decorator
 *
 * @export
 * @template T
 * @param {string} name
 * @param {MetadataAdapter} [adapter]  metadata adapter
 * @param {MetadataExtends<T>} [metadataExtends] add extents for metadata.
 * @returns {IParamPropDecorator<T>}
 */
export declare function createParamPropDecorator<T extends ParamPropMetadata>(name: string, adapter?: MetadataAdapter, metadataExtends?: MetadataExtends<T>): IParamPropDecorator<T>;
