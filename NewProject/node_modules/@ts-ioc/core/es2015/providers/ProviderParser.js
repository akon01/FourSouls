"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("../utils");
const ProviderMap_1 = require("./ProviderMap");
const Provider_1 = require("./Provider");
/**
 * provider matcher. use to find custome providers in resolve.
 *
 * note: object map provider can not resolve token.
 *
 * @export
 * @class ProviderMatcher
 * @implements {IProviderMatcher}
 */
class ProviderParser {
    constructor(container) {
        this.container = container;
    }
    parse(...providers) {
        if (providers.length === 1 && ProviderMap_1.isProviderMap(providers[0])) {
            return providers[0];
        }
        let map = this.container.resolve(ProviderMap_1.ProviderMapToken);
        providers.forEach((p, index) => {
            if (utils_1.isUndefined(p) || utils_1.isNull(p)) {
                return;
            }
            if (ProviderMap_1.isProviderMap(p)) {
                map.copy(p);
            }
            else if (p instanceof Provider_1.Provider) {
                if (p instanceof Provider_1.ParamProvider) {
                    if (!p.type && utils_1.isNumber(p.index)) {
                        map.add(p.index, (...providers) => p.resolve(this.container, ...providers));
                    }
                    else {
                        map.add(p.type, (...providers) => p.resolve(this.container, ...providers));
                    }
                }
                else {
                    map.add(p.type, (...providers) => p.resolve(this.container, ...providers));
                }
            }
            else if (utils_1.isClass(p)) {
                if (!this.container.has(p)) {
                    this.container.register(p);
                }
                map.add(p, p);
            }
            else if (utils_1.isBaseObject(p)) {
                let pr = p;
                let isobjMap = false;
                if (utils_1.isToken(pr.provide)) {
                    if (utils_1.isArray(pr.deps) && pr.deps.length) {
                        pr.deps.forEach(d => {
                            if (utils_1.isClass(d) && !this.container.has(d)) {
                                this.container.register(d);
                            }
                        });
                    }
                    if (!utils_1.isUndefined(pr.useValue)) {
                        map.add(pr.provide, () => pr.useValue);
                    }
                    else if (utils_1.isClass(pr.useClass)) {
                        if (!this.container.has(pr.useClass)) {
                            this.container.register(pr.useClass);
                        }
                        map.add(pr.provide, pr.useClass);
                    }
                    else if (utils_1.isFunction(pr.useFactory)) {
                        map.add(pr.provide, (...providers) => {
                            let args = [];
                            if (utils_1.isArray(pr.deps) && pr.deps.length) {
                                args = pr.deps.map(d => {
                                    if (utils_1.isToken(d)) {
                                        return this.container.resolve(d, ...providers);
                                    }
                                    else {
                                        return d;
                                    }
                                });
                            }
                            return pr.useFactory.apply(pr, args);
                        });
                    }
                    else if (utils_1.isToken(pr.useExisting)) {
                        map.add(pr.provide, (...providers) => this.container.resolve(pr.useExisting, ...providers));
                    }
                    else {
                        isobjMap = true;
                    }
                }
                else {
                    isobjMap = true;
                }
                if (isobjMap) {
                    utils_1.lang.forIn(p, (val, name) => {
                        if (name && utils_1.isString(name)) {
                            // object map can not resolve token. set all fileld as value factory.
                            map.add(name, () => val);
                        }
                    });
                }
            }
            else if (utils_1.isFunction(p)) {
                map.add(name, () => p);
            }
        });
        return map;
    }
    static getClassAnnations() {
        return { "name": "ProviderParser", "params": { "constructor": ["container"], "parse": ["providers"] } };
    }
}
exports.ProviderParser = ProviderParser;
function isProvider(target) {
    return ProviderMap_1.isProviderMap(target) || utils_1.isBaseObject(target) || target instanceof Provider_1.Provider;
}
exports.isProvider = isProvider;

//# sourceMappingURL=../sourcemaps/providers/ProviderParser.js.map
