{"version":3,"sources":["injectors/IModuleInjectorChain.ts"],"names":[],"mappings":";;AAAA,8CAA6C;AA0D7C;;GAEG;AACU,QAAA,wBAAwB,GAAG,IAAI,yBAAW,CAAuB,wBAAwB,CAAC,CAAC","file":"../../injectors/IModuleInjectorChain.js","sourcesContent":["import { InjectToken } from '../InjectToken';\r\nimport { IContainer } from '../IContainer';\r\nimport { Type } from '../types';\r\nimport { IModuleInjector } from './IModuleInjector';\r\n\r\n/**\r\n * module Injector chian interface.\r\n *\r\n * @export\r\n * @interface IModuleInjectorChain\r\n */\r\nexport interface IModuleInjectorChain {\r\n    /**\r\n     * injector chain.\r\n     *\r\n     * @type {IModuleInjector[]}\r\n     * @memberof IModuleInjectorChain\r\n     */\r\n    readonly injectors: IModuleInjector[];\r\n\r\n    /**\r\n     * set first step.\r\n     *\r\n     * @param {IModuleInjector} injector\r\n     * @memberof IModuleInjectorChain\r\n     */\r\n    first(injector: IModuleInjector): this;\r\n\r\n    /**\r\n     * set next step.\r\n     *\r\n     * @param {IModuleInjector} injector\r\n     * @memberof IModuleInjectorChain\r\n     */\r\n    next(injector: IModuleInjector): this;\r\n\r\n    /**\r\n     * inject module via injector chain.\r\n     *\r\n     * @param {IContainer} container\r\n     * @param {Type<any>[]} modules\r\n     * @returns {Promise(Type<any>[]>}\r\n     * @memberof IModuleInjectorChain\r\n     */\r\n    inject(container: IContainer, modules: Type<any>[]): Promise<Type<any>[]>;\r\n\r\n    /**\r\n     * sync inject module.\r\n     *\r\n     * @param {IContainer} container\r\n     * @param {Type<any>[]} modules\r\n     * @returns {Type<any>[]}\r\n     * @memberof IModuleInjectorChain\r\n     */\r\n    syncInject(container: IContainer, modules: Type<any>[]): Type<any>[];\r\n}\r\n\r\n\r\n/**\r\n * module fileter token. mast use as singlton.\r\n */\r\nexport const ModuleInjectorChainToken = new InjectToken<IModuleInjectorChain>('DI_ModuleInjectorChain');\r\n"]}