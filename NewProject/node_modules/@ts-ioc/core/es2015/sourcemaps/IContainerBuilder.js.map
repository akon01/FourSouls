{"version":3,"sources":["IContainerBuilder.ts"],"names":[],"mappings":";;AAEA,+CAA4C;AAG5C;;;GAGG;AACU,QAAA,qBAAqB,GAAG,IAAI,yBAAW,CAAoB,sBAAsB,CAAC,CAAC","file":"../IContainerBuilder.js","sourcesContent":["import { IContainer } from './IContainer';\r\nimport { Type, Modules, LoadType } from './types';\r\nimport { InjectToken } from './InjectToken';\r\nimport { IModuleLoader, IModuleInjectorChain } from './injectors';\r\n\r\n/**\r\n * ContainerBuilder interface token.\r\n * it is a token id, you can register yourself IContainerBuilder for this.\r\n */\r\nexport const ContainerBuilderToken = new InjectToken<IContainerBuilder>('DI_IContainerBuilder');\r\n\r\n/**\r\n * container builder.\r\n *\r\n * @export\r\n * @interface IContainerBuilder\r\n */\r\nexport interface IContainerBuilder {\r\n\r\n    /**\r\n     * loader\r\n     *\r\n     * @type {IModuleLoader}\r\n     * @memberof IContainerBuilder\r\n     */\r\n    readonly loader: IModuleLoader;\r\n\r\n    /**\r\n     * create a new container.\r\n     *\r\n     * @returns {IContainer}\r\n     * @memberof IContainerBuilder\r\n     */\r\n    create(): IContainer;\r\n\r\n    /**\r\n     * create a new container and load module via options.\r\n     *\r\n     * @param {...LoadType[]} modules\r\n     * @param {string} [basePath]\r\n     * @returns {Promise<IContainer>}\r\n     * @memberof IContainerBuilder\r\n     */\r\n    build(...modules: LoadType[]): Promise<IContainer>;\r\n\r\n    /**\r\n     * build container in sync.\r\n     *\r\n     * @param {LoadOptions} options\r\n     * @returns {IContainer}\r\n     * @memberof IContainerBuilder\r\n     */\r\n    syncBuild(...modules: Modules[]): IContainer;\r\n\r\n    /**\r\n     * load modules for container.\r\n     *\r\n     * @param {IContainer} container\r\n     * @param {...LoadType[]} modules\r\n     * @returns {Promise<Type<any>[]>}\r\n     * @memberof IContainerBuilder\r\n     */\r\n    loadModule(container: IContainer, ...modules: LoadType[]): Promise<Type<any>[]>;\r\n\r\n    /**\r\n     * sync load modules\r\n     *\r\n     * @param {IContainer} container\r\n     * @param {...Modules[]} modules\r\n     * @memberof IContainerBuilder\r\n     */\r\n    syncLoadModule(container: IContainer, ...modules: Modules[]);\r\n\r\n    /**\r\n     * get moduleInjector chain.\r\n     *\r\n     * @param {IContainer} container\r\n     * @returns {IModuleInjectorChain}\r\n     * @memberof IContainerBuilder\r\n     */\r\n    getInjectorChain(container: IContainer): IModuleInjectorChain;\r\n\r\n}\r\n"]}