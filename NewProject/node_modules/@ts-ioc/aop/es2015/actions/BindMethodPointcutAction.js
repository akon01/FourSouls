"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@ts-ioc/core");
const AopActions_1 = require("./AopActions");
const isValideAspectTarget_1 = require("../isValideAspectTarget");
const access_1 = require("../access");
/**
 * bind method pointcut action.
 *
 * @export
 * @class BindMethodPointcutAction
 * @extends {ActionComposite}
 */
class BindMethodPointcutAction extends core_1.ActionComposite {
    constructor() {
        super(AopActions_1.AopActions.bindMethodPointcut);
    }
    working(container, data) {
        // aspect class do nothing.
        if (!data.target || !isValideAspectTarget_1.isValideAspectTarget(data.targetType)) {
            return;
        }
        if (!container.hasRegister(access_1.ProxyMethodToken)) {
            return;
        }
        let proxy = container.get(access_1.ProxyMethodToken);
        let target = data.target;
        let targetType = data.targetType;
        let className = core_1.lang.getClassName(targetType);
        let methods = [];
        let decorators = Object.getOwnPropertyDescriptors(targetType.prototype);
        core_1.lang.forIn(decorators, (item, name) => {
            if (name === 'constructor') {
                return;
            }
            methods.push({
                name: name,
                fullName: `${className}.${name}`,
                descriptor: item
            });
        });
        let allmethods = core_1.getParamerterNames(targetType);
        core_1.lang.forIn(allmethods, (item, name) => {
            if (name === 'constructor') {
                return;
            }
            if (core_1.isUndefined(decorators[name])) {
                methods.push({
                    name: name,
                    fullName: `${className}.${name}`
                });
            }
        });
        methods.forEach(pointcut => {
            proxy.proceed(target, targetType, pointcut, target['_cache_JoinPoint']);
        });
    }
    static getClassAnnations() {
        return { "name": "BindMethodPointcutAction", "params": { "constructor": [], "working": ["container", "data"] } };
    }
}
exports.BindMethodPointcutAction = BindMethodPointcutAction;

//# sourceMappingURL=../sourcemaps/actions/BindMethodPointcutAction.js.map
