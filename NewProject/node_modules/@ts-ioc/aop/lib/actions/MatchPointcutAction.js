"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var core_1 = require("@ts-ioc/core");
var IAdvisor_1 = require("../IAdvisor");
var AopActions_1 = require("./AopActions");
var IAdviceMatcher_1 = require("../IAdviceMatcher");
var isValideAspectTarget_1 = require("../isValideAspectTarget");
/**
 *  match pointcut action.
 *
 * @export
 * @class MatchPointcutAction
 * @extends {ActionComposite}
 */
var MatchPointcutAction = /** @class */ (function (_super) {
    tslib_1.__extends(MatchPointcutAction, _super);
    function MatchPointcutAction() {
        return _super.call(this, AopActions_1.AopActions.matchPointcut) || this;
    }
    MatchPointcutAction.prototype.working = function (container, data) {
        var _this = this;
        // aspect class do nothing.
        if (!isValideAspectTarget_1.isValideAspectTarget(data.targetType)) {
            return;
        }
        var advisor = container.get(IAdvisor_1.AdvisorToken);
        var matcher = container.get(IAdviceMatcher_1.AdviceMatcherToken);
        advisor.aspects.forEach(function (adviceMetas, type) {
            var matchpoints = matcher.match(type, data.targetType, adviceMetas, data.target);
            matchpoints.forEach(function (mpt) {
                var fullName = mpt.fullName;
                var advice = mpt.advice;
                var advices = advisor.getAdvices(fullName);
                if (!advices) {
                    advices = {
                        Before: [],
                        Pointcut: [],
                        After: [],
                        Around: [],
                        AfterThrowing: [],
                        AfterReturning: []
                    };
                    advisor.setAdvices(fullName, advices);
                }
                var advicer = core_1.lang.assign(mpt, {
                    aspectType: type
                });
                if (advice.adviceName === 'Before') {
                    if (!advices.Before.some(function (a) { return _this.isAdviceEquals(a.advice, advice); })) {
                        advices.Before.push(advicer);
                    }
                }
                else if (advice.adviceName === 'Pointcut') {
                    if (!advices.Pointcut.some(function (a) { return _this.isAdviceEquals(a.advice, advice); })) {
                        advices.Pointcut.push(advicer);
                    }
                }
                else if (advice.adviceName === 'Around') {
                    if (!advices.Around.some(function (a) { return _this.isAdviceEquals(a.advice, advice); })) {
                        advices.Around.push(advicer);
                    }
                }
                else if (advice.adviceName === 'After') {
                    if (!advices.After.some(function (a) { return _this.isAdviceEquals(a.advice, advice); })) {
                        advices.After.push(advicer);
                    }
                }
                else if (advice.adviceName === 'AfterThrowing') {
                    if (!advices.AfterThrowing.some(function (a) { return _this.isAdviceEquals(a.advice, advice); })) {
                        advices.AfterThrowing.push(advicer);
                    }
                }
                else if (advice.adviceName === 'AfterReturning') {
                    if (!advices.AfterReturning.some(function (a) { return _this.isAdviceEquals(a.advice, advice); })) {
                        advices.AfterReturning.push(advicer);
                    }
                }
            });
        });
    };
    MatchPointcutAction.prototype.isAdviceEquals = function (advice1, advice2) {
        if (!advice1 || !advice2) {
            return false;
        }
        if (advice1 === advice2) {
            return true;
        }
        return advice1.adviceName === advice2.adviceName
            && advice1.pointcut === advice2.pointcut
            && advice1.propertyKey === advice2.propertyKey;
    };
    MatchPointcutAction.getClassAnnations = function () {
        return { "name": "MatchPointcutAction", "params": { "constructor": [], "working": ["container", "data"], "isAdviceEquals": ["advice1", "advice2"] } };
    };
    return MatchPointcutAction;
}(core_1.ActionComposite));
exports.MatchPointcutAction = MatchPointcutAction;

//# sourceMappingURL=../sourcemaps/actions/MatchPointcutAction.js.map
