{"version":3,"sources":["injectors/DefaultModuleLoader.ts"],"names":[],"mappings":"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","file":"../../injectors/DefaultModuleLoader.js","sourcesContent":["import { Type, Modules, LoadType, PathModules } from '../types';\r\nimport { IModuleLoader } from './IModuleLoader';\r\nimport { isString, isClass, isObject, isArray } from '../utils';\r\n\r\ndeclare let require: any;\r\n\r\n/**\r\n * default module loader.\r\n *\r\n * @export\r\n * @class DefaultModuleLoader\r\n * @implements {IModuleLoader}\r\n */\r\nexport class DefaultModuleLoader implements IModuleLoader {\r\n\r\n    constructor() {\r\n\r\n    }\r\n\r\n    private _loader: (modulepath: string) => Promise<Modules[]>;\r\n    getLoader() {\r\n        if (!this._loader) {\r\n            this._loader = this.createLoader();\r\n        }\r\n        return this._loader;\r\n    }\r\n\r\n    /**\r\n     * load module.\r\n     *\r\n     * @param {...LoadType[]} modules\r\n     * @returns {Promise<Modules[]>}\r\n     * @memberof DefaultModuleLoader\r\n     */\r\n    load(modules: LoadType[]): Promise<Modules[]> {\r\n        if (modules.length) {\r\n            return Promise.all(modules.map(mdty => {\r\n                if (isString(mdty)) {\r\n                    return this.isFile(mdty) ? this.loadFile(mdty) : this.loadModule(mdty);\r\n                } else if (isObject(mdty) && (mdty['modules'] || mdty['files'])) {\r\n                    return this.loadPathModule(mdty as PathModules);\r\n                } else {\r\n                    return mdty ? [mdty] : [];\r\n                }\r\n            }))\r\n                .then(allms => {\r\n                    let rmodules: Modules[] = [];\r\n                    allms.forEach(ms => {\r\n                        rmodules = rmodules.concat(ms);\r\n                    })\r\n                    return rmodules;\r\n                });\r\n        } else {\r\n            return Promise.resolve([]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * load types from module.\r\n     *\r\n     * @param {...LoadType[]} modules\r\n     * @returns {Promise<Type<any>[]>}\r\n     * @memberof IContainerBuilder\r\n     */\r\n    async loadTypes(modules: LoadType[]): Promise<Type<any>[][]> {\r\n        let mdls = await this.load(modules);\r\n        return this.getTypes(mdls);\r\n    }\r\n\r\n    /**\r\n     * get all class type in modules.\r\n     *\r\n     * @param {Modules[]} modules\r\n     * @param {...Express<Type<any>, boolean>[]} filters\r\n     * @returns {Type<any>[]}\r\n     * @memberof DefaultModuleLoader\r\n     */\r\n    getTypes(modules: Modules[]): Type<any>[][] {\r\n        let regModules: Type<any>[][] = [];\r\n\r\n        modules.forEach(m => {\r\n            let types = this.getContentTypes(m);\r\n            regModules.push(types);\r\n        });\r\n\r\n        return regModules;\r\n    }\r\n\r\n    protected loadFile(files: string | string[], basePath?: string): Promise<Modules[]> {\r\n        let loader = this.getLoader();\r\n        let fRes: Promise<Modules[]>;\r\n        if (isArray(files)) {\r\n            fRes = Promise.all(files.map(f => loader(f)))\r\n                .then(allms => {\r\n                    let rms = [];\r\n                    allms.forEach(ms => {\r\n                        rms = rms.concat(ms);\r\n                    });\r\n                    return rms;\r\n                });\r\n        } else {\r\n            fRes = loader(files);\r\n        }\r\n        return fRes.then(ms => ms.filter(it => !!it));\r\n    }\r\n\r\n    protected isFile(str: string) {\r\n        return str && /\\/((\\w|%|\\.))+\\.\\w+$/.test(str.replace(/\\\\\\\\/gi, '/'));\r\n    }\r\n\r\n\r\n    protected loadModule(moduleName: string): Promise<Modules[]> {\r\n        let loader = this.getLoader();\r\n        return loader(moduleName).then(ms => ms.filter(it => !!it));\r\n    }\r\n\r\n    protected async loadPathModule(pmd: PathModules): Promise<Modules[]> {\r\n        let modules: Modules[] = [];\r\n        if (pmd.files) {\r\n            await this.loadFile(pmd.files, pmd.basePath)\r\n                .then(allmoduls => {\r\n                    allmoduls.forEach(ms => {\r\n                        modules = modules.concat(ms);\r\n                    });\r\n                    return modules;\r\n                })\r\n        }\r\n        if (pmd.modules) {\r\n            await Promise.all(pmd.modules.map(nmd => {\r\n                return isString(nmd) ? this.loadModule(nmd) : nmd;\r\n            })).then(ms => {\r\n                modules = modules.concat(ms);\r\n                return modules;\r\n            });\r\n        }\r\n\r\n        return modules;\r\n    }\r\n\r\n    protected createLoader(): (modulepath: string) => Promise<Modules[]> {\r\n        if (typeof require !== 'undefined') {\r\n            return (modulepath: string) => {\r\n                return new Promise<Modules[]>((resolve, reject) => {\r\n                    require(modulepath, (mud) => {\r\n                        resolve(mud);\r\n                    }, err => {\r\n                        reject(err);\r\n                    })\r\n                });\r\n            }\r\n        } else {\r\n            throw new Error('has not module loader');\r\n        }\r\n    }\r\n\r\n    protected getContentTypes(regModule: Modules): Type<any>[] {\r\n        let regModules: Type<any>[] = [];\r\n\r\n        if (isClass(regModule)) {\r\n            regModules.push(regModule);\r\n        } else if (regModule) {\r\n            let rmodules = regModule['exports'] ? regModule['exports'] : regModule;\r\n            for (let p in rmodules) {\r\n                let type = rmodules[p];\r\n                if (isClass(type)) {\r\n                    regModules.push(type);\r\n                }\r\n            }\r\n        }\r\n\r\n        return regModules;\r\n    }\r\n\n                        static getClassAnnations():any  {\n                            return {\"name\":\"DefaultModuleLoader\",\"params\":{\"constructor\":[],\"getLoader\":[],\"load\":[\"modules\"],\"loadTypes\":[\"modules\"],\"getTypes\":[\"modules\"],\"loadFile\":[\"files\",\"basePath\"],\"isFile\":[\"str\"],\"loadModule\":[\"moduleName\"],\"loadPathModule\":[\"pmd\"],\"createLoader\":[],\"getContentTypes\":[\"regModule\"]}};\n                        }\n                   }\r\n"]}