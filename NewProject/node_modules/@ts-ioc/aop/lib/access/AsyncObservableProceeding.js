"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var core_1 = require("@ts-ioc/core");
var IAdvisorProceeding_1 = require("./IAdvisorProceeding");
var ReturningType_1 = require("./ReturningType");
var NonePointcut_1 = require("../decorators/NonePointcut");
var AsyncObservableProceeding = /** @class */ (function () {
    function AsyncObservableProceeding() {
    }
    AsyncObservableProceeding.prototype.proceeding = function (joinPoint) {
        var actions = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            actions[_i - 1] = arguments[_i];
        }
        // if (isObservable(joinPoint.returning)) {
        //     if (isFunction(joinPoint.returning.pipe)) {
        //         const flatMap = require('rxjs/operators').flatMap;
        //         actions.forEach(action => {
        //             joinPoint.returning = joinPoint.returning.pipe(
        //                 flatMap((val) => {
        //                     joinPoint.returningValue = val;
        //                     action(joinPoint);
        //                     if (isObservable(joinPoint.returningValue)) {
        //                         return joinPoint.returningValue;
        //                     } else if (isPromise(joinPoint.returningValue)) {
        //                         return joinPoint.returningValue;
        //                     } else {
        //                         return Promise.resolve(joinPoint.returningValue);
        //                     }
        //                 }));
        //         });
        //     } else
        if (core_1.isObservable(joinPoint.returning) && core_1.isFunction(joinPoint.returning.flatMap)) {
            actions.forEach(function (action) {
                joinPoint.returning = joinPoint.returning.flatMap(function (val) {
                    joinPoint.returningValue = val;
                    action(joinPoint);
                    if (core_1.isObservable(joinPoint.returningValue)) {
                        return joinPoint.returningValue;
                    }
                    else if (core_1.isPromise(joinPoint.returningValue)) {
                        return joinPoint.returningValue;
                    }
                    else {
                        return Promise.resolve(joinPoint.returningValue);
                    }
                });
            });
        }
        else {
            actions.forEach(function (action) {
                action(joinPoint);
            });
        }
    };
    AsyncObservableProceeding.getClassAnnations = function () {
        return { "name": "AsyncObservableProceeding", "params": { "constructor": [], "proceeding": ["joinPoint", "actions"] } };
    };
    AsyncObservableProceeding = tslib_1.__decorate([
        NonePointcut_1.NonePointcut(),
        core_1.Singleton(IAdvisorProceeding_1.AdvisorProceedingToken, ReturningType_1.ReturningType.observable),
        tslib_1.__metadata("design:paramtypes", [])
    ], AsyncObservableProceeding);
    return AsyncObservableProceeding;
}());
exports.AsyncObservableProceeding = AsyncObservableProceeding;

//# sourceMappingURL=../sourcemaps/access/AsyncObservableProceeding.js.map
