"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var ActionComposite_1 = require("./ActionComposite");
var CoreActions_1 = require("./CoreActions");
var factories_1 = require("../factories");
/**
 * bind property type action. to get the property autowride token of Type calss.
 *
 * @export
 * @class SetPropAction
 * @extends {ActionComposite}
 */
var BindPropertyTypeAction = /** @class */ (function (_super) {
    tslib_1.__extends(BindPropertyTypeAction, _super);
    function BindPropertyTypeAction() {
        return _super.call(this, CoreActions_1.CoreActions.bindPropertyType) || this;
    }
    BindPropertyTypeAction.prototype.working = function (container, data) {
        if (data.raiseContainer && data.raiseContainer !== container) {
            return;
        }
        var type = data.targetType;
        var lifeScope = container.getLifeScope();
        var matchs = lifeScope.getPropertyDecorators(type, function (surm) { return surm.actions.includes(CoreActions_1.CoreActions.bindPropertyType); });
        var list = [];
        matchs.forEach(function (surm) {
            var propMetadata = factories_1.getPropertyMetadata(surm.name, type);
            for (var n in propMetadata) {
                list = list.concat(propMetadata[n]);
            }
            list = list.filter(function (n) { return !!n; });
            list.forEach(function (prop) {
                if (lifeScope.isVaildDependence(prop.provider)) {
                    if (!container.has(prop.provider, prop.alias)) {
                        container.register(container.getToken(prop.provider, prop.alias));
                    }
                }
                if (lifeScope.isVaildDependence(prop.type)) {
                    if (!container.has(prop.type)) {
                        container.register(prop.type);
                    }
                }
            });
        });
        data.execResult = list;
    };
    BindPropertyTypeAction.getClassAnnations = function () {
        return { "name": "BindPropertyTypeAction", "params": { "constructor": [], "working": ["container", "data"] } };
    };
    return BindPropertyTypeAction;
}(ActionComposite_1.ActionComposite));
exports.BindPropertyTypeAction = BindPropertyTypeAction;

//# sourceMappingURL=../../sourcemaps/core/actions/BindPropertyTypeAction.js.map
