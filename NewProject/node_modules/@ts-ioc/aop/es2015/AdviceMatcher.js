"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const IAdviceMatcher_1 = require("./IAdviceMatcher");
const core_1 = require("@ts-ioc/core");
const Advice_1 = require("./decorators/Advice");
const Aspect_1 = require("./decorators/Aspect");
const NonePointcut_1 = require("./decorators/NonePointcut");
/**
 * advice matcher, use to match advice when a registered create instance.
 *
 * @export
 * @class AdviceMatcher
 * @implements {IAdviceMatcher}
 */
let AdviceMatcher = class AdviceMatcher {
    constructor(container) {
        this.container = container;
    }
    match(aspectType, targetType, adviceMetas, target) {
        let aspectMeta = core_1.lang.first(core_1.getOwnTypeMetadata(Aspect_1.Aspect, aspectType));
        if (aspectMeta) {
            if (aspectMeta.within) {
                let ins = core_1.isArray(aspectMeta.within) ? aspectMeta.within : [aspectMeta.within];
                if (ins.indexOf(targetType) < 0) {
                    return [];
                }
            }
            if (aspectMeta.annotation) {
                let annotation = core_1.isFunction(aspectMeta.annotation) ? aspectMeta.annotation.toString() : aspectMeta.annotation;
                let anno = (/^\^?@\w+/.test(annotation) ? '' : '@') + annotation;
                if (!core_1.hasOwnClassMetadata(anno, targetType)) {
                    return [];
                }
            }
        }
        let className = core_1.lang.getClassName(targetType);
        adviceMetas = adviceMetas || core_1.getOwnMethodMetadata(Advice_1.Advice, targetType);
        let matched = [];
        if (targetType === aspectType) {
            let adviceNames = core_1.lang.keys(adviceMetas);
            if (adviceNames.length > 1) {
                let advices = [];
                adviceNames.forEach(n => {
                    advices = advices.concat(adviceMetas[n]);
                });
                adviceNames.forEach(n => {
                    advices.forEach(adv => {
                        if (adv.propertyKey !== n) {
                            if (this.matchAspectSelf(n, adv)) {
                                matched.push({
                                    name: n,
                                    fullName: `${className}.${n}`,
                                    advice: adv
                                });
                            }
                        }
                    });
                });
            }
        }
        else {
            let points = [];
            let decorators = Object.getOwnPropertyDescriptors(targetType.prototype);
            // match method.
            for (let name in decorators) {
                points.push({
                    name: name,
                    fullName: `${className}.${name}`
                });
            }
            let allmethods = core_1.getParamerterNames(targetType);
            core_1.lang.forIn(allmethods, (item, name) => {
                if (name === 'constructor') {
                    return;
                }
                if (core_1.isUndefined(decorators[name])) {
                    points.push({
                        name: name,
                        fullName: `${className}.${name}`
                    });
                }
            });
            Object.getOwnPropertyNames(adviceMetas).forEach(name => {
                let advices = adviceMetas[name];
                advices.forEach(metadata => {
                    matched = matched.concat(this.filterPointcut(targetType, points, metadata));
                });
            });
        }
        return matched;
    }
    matchAspectSelf(name, metadata) {
        if (metadata.pointcut) {
            let pointcut = metadata.pointcut;
            if (core_1.isString(pointcut)) {
                if (/^execution\(\S+\)$/.test(pointcut)) {
                    pointcut = pointcut.substring(10, pointcut.length - 1);
                }
                return pointcut.startsWith(name);
            }
            else if (core_1.isRegExp(pointcut)) {
                return pointcut.test(name);
            }
        }
        return false;
    }
    filterPointcut(type, points, metadata, target) {
        if (!metadata.pointcut) {
            return [];
        }
        let matchedPointcut;
        if (metadata.pointcut) {
            let match = this.matchTypeFactory(type, metadata);
            matchedPointcut = points.filter(p => match(p.name, p.fullName, type, target, p));
        }
        matchedPointcut = matchedPointcut || [];
        return matchedPointcut.map(p => {
            return core_1.lang.assign({}, p, { advice: metadata });
        });
    }
    matchTypeFactory(type, metadata) {
        let pointcut = metadata.pointcut;
        let expresses = [];
        if (metadata.within) {
            expresses.push((method, fullName, targetType) => {
                if (core_1.isArray(metadata.within)) {
                    return metadata.within.indexOf(targetType) >= 0;
                }
                else {
                    return metadata.within === targetType;
                }
            });
            expresses.push('&&');
        }
        if (metadata.target) {
            expresses.push((method, fullName, targetType, target) => {
                return metadata.target = target;
            });
            expresses.push('&&');
        }
        if (metadata.annotation) {
            expresses.push((method, fullName, targetType, target) => {
                return core_1.hasOwnMethodMetadata(metadata.annotation, targetType, method);
            });
            expresses.push('&&');
        }
        if (core_1.isString(pointcut)) {
            let pointcuts = (pointcut || '').trim();
            expresses.push(this.tranlateExpress(type, pointcuts));
        }
        else if (core_1.isRegExp(pointcut)) {
            let pointcutReg = pointcut;
            if (/^\^?@\w+/.test(pointcutReg.source)) {
                expresses.push((name, fullName, targetType) => {
                    let decName = Reflect.getMetadataKeys(type, name);
                    return decName.some(n => core_1.isString(n) && pointcutReg.test(n));
                });
            }
            else {
                expresses.push((name, fullName) => pointcutReg.test(fullName));
            }
        }
        return this.mergeExpress(...expresses);
    }
    spiltBrace(strExp) {
        strExp = strExp.trim();
        if (/^\(/.test(strExp) && /\)$/.test(strExp)) {
            strExp = strExp.substring(1, strExp.length - 1).trim();
        }
        if (/^\(/.test(strExp) && /\)$/.test(strExp)) {
            return this.spiltBrace(strExp);
        }
        else {
            return strExp;
        }
    }
    expressToFunc(type, strExp) {
        if (/^@annotation\(.*\)$/.test(strExp)) {
            let exp = strExp.substring(12, strExp.length - 1);
            let annotation = /^@/.test(exp) ? exp : ('@' + exp);
            return (name, fullName) => core_1.hasOwnMethodMetadata(annotation, type, name) && !core_1.hasOwnClassMetadata(Aspect_1.Aspect, type);
        }
        else if (/^execution\(.*\)$/.test(strExp)) {
            let exp = strExp.substring(10, strExp.length - 1);
            if (exp === '*' || exp === '*.*') {
                return (name, fullName) => !!name && !core_1.hasOwnClassMetadata(Aspect_1.Aspect, type);
            }
            else if (/^\w+(\((\s*\w+\s*,)*\s*\w*\))?$/.test(exp)) {
                // if is method name, will match aspect self only.
                return () => false;
            }
            else if (/^([\w\*]+\.)+[\w\*]+(\((\s*\w+\s*,)*\s*\w*\))?$/.test(exp)) {
                exp = exp.replace(/\*\*/gi, '(\\\w+(\\\.|\\\/)){0,}\\\w+')
                    .replace(/\*/gi, '\\\w+')
                    .replace(/\./gi, '\\\.')
                    .replace(/\//gi, '\\\/');
                let matcher = new RegExp(exp + "$");
                return (name, fullName) => matcher.test(fullName);
            }
            else {
                return () => false;
            }
        }
        else if (/^@within\(\s*\w+/.test(strExp)) {
            let classnames = strExp.substring(strExp.indexOf('(') + 1, strExp.length - 1).split(',').map(n => n.trim());
            return (name, fullName, targetType) => classnames.indexOf(core_1.lang.getClassName(targetType)) >= 0;
        }
        else if (/^@target\(\s*\w+/.test(strExp)) {
            let torken = strExp.substring(strExp.indexOf('(') + 1, strExp.length - 1).trim();
            return (name, fullName, targetType) => this.container.getTokenImpl(torken) === targetType;
        }
        else {
            return () => false;
        }
    }
    tranlateExpress(type, strExp) {
        let expresses = [];
        let idxOr = strExp.indexOf('||');
        let idxAd = strExp.indexOf('&&');
        if (idxAd < 0 && idxOr < 0) {
            expresses.push(this.expressToFunc(type, this.spiltBrace(strExp)));
        }
        else {
            if (idxOr > idxAd) {
                let leftExp = this.spiltBrace(strExp.substring(0, idxOr));
                if (leftExp) {
                    expresses.push(this.tranlateExpress(type, leftExp));
                }
                let rightExp = this.spiltBrace(strExp.substring(idxOr + 2));
                if (rightExp) {
                    expresses.push('||');
                    expresses.push(this.tranlateExpress(type, rightExp));
                }
            }
            else if (idxAd > idxOr) {
                let leftExp = this.spiltBrace(strExp.substring(0, idxAd));
                if (leftExp) {
                    expresses.push(this.tranlateExpress(type, leftExp));
                }
                let rightExp = this.spiltBrace(strExp.substring(idxAd + 2));
                if (rightExp) {
                    expresses.push('&&');
                    expresses.push(this.tranlateExpress(type, rightExp));
                }
            }
        }
        return this.mergeExpress(...expresses);
    }
    mergeExpress(...expresses) {
        return (method, fullName, targetType, pointcut) => {
            let flag;
            expresses.forEach((express, idx) => {
                if (!core_1.isUndefined(flag)) {
                    return;
                }
                if (core_1.isFunction(express)) {
                    let rel = express(method, fullName, targetType, pointcut);
                    if (idx < expresses.length - 2) {
                        if (!rel && express[idx + 1] === '&&') {
                            flag = false;
                        }
                        if (rel && express[idx + 1] === '||') {
                            flag = true;
                        }
                    }
                    else {
                        flag = rel;
                    }
                }
            });
            return flag;
        };
    }
    static getClassAnnations() {
        return { "name": "AdviceMatcher", "params": { "constructor": ["container"], "match": ["aspectType", "targetType", "adviceMetas", "target"], "matchAspectSelf": ["name", "metadata"], "filterPointcut": ["type", "points", "metadata", "target"], "matchTypeFactory": ["type", "metadata"], "spiltBrace": ["strExp"], "expressToFunc": ["type", "strExp"], "tranlateExpress": ["type", "strExp"], "mergeExpress": ["expresses"] } };
    }
};
AdviceMatcher = tslib_1.__decorate([
    NonePointcut_1.NonePointcut(),
    core_1.Singleton(IAdviceMatcher_1.AdviceMatcherToken),
    tslib_1.__param(0, core_1.Inject(core_1.ContainerToken)),
    tslib_1.__metadata("design:paramtypes", [Object])
], AdviceMatcher);
exports.AdviceMatcher = AdviceMatcher;

//# sourceMappingURL=sourcemaps/AdviceMatcher.js.map
