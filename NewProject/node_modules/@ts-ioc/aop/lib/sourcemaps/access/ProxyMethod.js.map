{"version":3,"sources":["access/ProxyMethod.ts"],"names":[],"mappings":"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","file":"../../access/ProxyMethod.js","sourcesContent":["import { IContainer, Provider, Singleton, Inject, Type, LifeScope, isFunction, ContainerToken } from '@ts-ioc/core';\r\nimport { Advices } from '../advices';\r\nimport { JoinpointState, IPointcut } from '../joinpoints';\r\nimport { Joinpoint } from '../joinpoints';\r\nimport { IAdvisor, AdvisorToken } from '../IAdvisor';\r\nimport { IProxyMethod, ProxyMethodToken } from './IProxyMethod';\r\nimport { AdvisorChainFactoryToken } from './IAdvisorChainFactory';\r\nimport { NonePointcut } from '../decorators/NonePointcut';\r\n\r\n/**\r\n * Proxy method.\r\n *\r\n * @export\r\n * @class ProxyMethod\r\n * @implements {IProxyMethod}\r\n */\r\n@NonePointcut()\r\n@Singleton(ProxyMethodToken)\r\nexport class ProxyMethod implements IProxyMethod {\r\n\r\n    constructor(@Inject(ContainerToken) private container: IContainer) {\r\n\r\n    }\r\n\r\n    _advisor: IAdvisor;\r\n    get advisor(): IAdvisor {\r\n        if (!this._advisor) {\r\n            this._advisor = this.container.get(AdvisorToken);\r\n        }\r\n        return this._advisor;\r\n    }\r\n\r\n    _liefScope: LifeScope;\r\n    get liefScope(): LifeScope {\r\n        if (!this._liefScope) {\r\n            this._liefScope = this.container.getLifeScope();\r\n        }\r\n        return this._liefScope;\r\n    }\r\n\r\n    /**\r\n     * proceed the proxy method.\r\n     *\r\n     * @param {*} target\r\n     * @param {Type<any>} targetType\r\n     * @param {IPointcut} pointcut\r\n     * @param {Joinpoint} [provJoinpoint]\r\n     * @memberof ProxyMethod\r\n     */\r\n    proceed(target: any, targetType: Type<any>, pointcut: IPointcut, provJoinpoint?: Joinpoint) {\r\n\r\n        let aspectMgr = this.advisor;\r\n        let fullName = pointcut.fullName;\r\n        let methodName = pointcut.name;\r\n\r\n        let advices = aspectMgr.getAdvices(fullName);\r\n        if (advices && pointcut) {\r\n            if (pointcut.descriptor && (pointcut.descriptor.get || pointcut.descriptor.set)) {\r\n                if (pointcut.descriptor.get) {\r\n                    let getMethod = pointcut.descriptor.get.bind(target);\r\n                    pointcut.descriptor.get = this.proxy(getMethod, advices, target, targetType, pointcut, provJoinpoint);\r\n                }\r\n                if (pointcut.descriptor.set) {\r\n                    let setMethod = pointcut.descriptor.set.bind(target);\r\n                    pointcut.descriptor.set = this.proxy(setMethod, advices, target, targetType, pointcut, provJoinpoint);\r\n                }\r\n                Object.defineProperty(target, methodName, pointcut.descriptor);\r\n            } else if (isFunction(target[methodName])) {\r\n                let propertyMethod = target[methodName].bind(target);\r\n                target[methodName] = this.proxy(propertyMethod, advices, target, targetType, pointcut, provJoinpoint);\r\n            }\r\n        }\r\n    }\r\n\r\n    proxy(propertyMethod: Function, advices: Advices, target: any, targetType: Type<any>, pointcut: IPointcut, provJoinpoint?: Joinpoint) {\r\n        let fullName = pointcut.fullName;\r\n        let methodName = pointcut.name;\r\n        let liefScope = this.liefScope;\r\n        let container = this.container;\r\n\r\n        return (...args: any[]) => {\r\n            let joinPoint = this.container.resolve(Joinpoint, Provider.create('options', {\r\n                name: methodName,\r\n                fullName: fullName,\r\n                provJoinpoint: provJoinpoint,\r\n                annotations: provJoinpoint ? null : liefScope.getMethodMetadatas(targetType, methodName),\r\n                params: liefScope.getMethodParameters(targetType, target, methodName),\r\n                args: args,\r\n                target: target,\r\n                targetType: targetType\r\n            }));\r\n\r\n            let adChain = container.resolve(AdvisorChainFactoryToken, { container: container, advisor: this.advisor, advices: advices });\r\n            adChain.invoaction(joinPoint, JoinpointState.Before);\r\n            adChain.invoaction(joinPoint, JoinpointState.Pointcut);\r\n            let val, exeErr;\r\n            try {\r\n                val = propertyMethod(...joinPoint.args);\r\n            } catch (err) {\r\n                exeErr = err;\r\n            }\r\n\r\n            adChain.invoaction(joinPoint, JoinpointState.After, val);\r\n            if (exeErr) {\r\n                adChain.invoaction(joinPoint, JoinpointState.AfterThrowing, exeErr);\r\n            } else {\r\n                adChain.invoaction(joinPoint, JoinpointState.AfterReturning, val);\r\n                return joinPoint.returning;\r\n            }\r\n        }\r\n    }\r\n\n                        static getClassAnnations():any  {\n                            return {\"name\":\"ProxyMethod\",\"params\":{\"constructor\":[\"container\"],\"proceed\":[\"target\",\"targetType\",\"pointcut\",\"provJoinpoint\"],\"proxy\":[\"propertyMethod\",\"advices\",\"target\",\"targetType\",\"pointcut\",\"provJoinpoint\"]}};\n                        }\n                   }\r\n"]}