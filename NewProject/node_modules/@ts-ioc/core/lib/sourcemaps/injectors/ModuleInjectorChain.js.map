{"version":3,"sources":["injectors/ModuleInjectorChain.ts"],"names":[],"mappings":";;;AAEA,mDAAkD;AAGlD,kCAAuC;AAEvC;;;;;;GAMG;AACH;IAOI;QACI,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;IACzB,CAAC;IAND,sBAAI,0CAAS;aAAb;YACI,OAAO,IAAI,CAAC,UAAU,CAAC;QAC3B,CAAC;;;OAAA;IAMD,mCAAK,GAAL,UAAM,QAAyB;QAC3B,IAAI,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE;YAC3B,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;SACrC;QACD,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,kCAAI,GAAJ,UAAK,QAAyB;QAC1B,IAAI,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE;YAC3B,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;SAClC;QACD,OAAO,IAAI,CAAC;IAChB,CAAC;IAES,wCAAU,GAApB,UAAqB,QAAyB;QAC1C,OAAO,QAAQ,YAAY,+BAAc,CAAC;IAC9C,CAAC;IAEK,oCAAM,GAAZ,UAAa,SAAqB,EAAE,OAAoB;;;;;;;wBAChD,KAAK,GAAgB,EAAE,CAAC;wBAC5B,qBAAM,mBAAW,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,UAAA,IAAI;gCAChD,OAAO,UAAO,GAAgB,EAAE,IAA0B;;;;oDAC3C,qBAAM,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,GAAG,CAAC,EAAA;;gDAAxC,IAAI,GAAG,SAAiC;gDAC5C,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE;oDACvC,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;iDACvC;gDACD,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE;oDACnC,sBAAO,IAAI,EAAE,EAAC;iDACjB;;;;qCACJ,CAAA;4BACL,CAAC,CAAC,EAAE,OAAO,CAAC,EAAA;;wBAVZ,SAUY,CAAC;wBACb,sBAAO,KAAK,EAAC;;;;KAChB;IAED,wCAAU,GAAV,UAAW,SAAqB,EAAE,OAAoB;QAClD,IAAI,KAAK,GAAgB,EAAE,CAAC;QAC5B,IAAI,SAAS,GAAG,KAAK,CAAC;QACtB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,UAAA,IAAI;YACpB,IAAI,IAAI,YAAY,+BAAc,EAAE;gBAChC,IAAI,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;gBACjD,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;gBACtC,SAAS,GAAG,CAAC,CAAC,MAAM,CAAC,IAAI,IAAI,MAAM,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;aACxD;YACD,OAAO,SAAS,CAAC;QACrB,CAAC,CAAC,CAAC;QACH,OAAO,KAAK,CAAC;IACjB,CAAC;IAE0B,qCAAiB,GAAxB;QACI,OAAO,EAAC,MAAM,EAAC,qBAAqB,EAAC,QAAQ,EAAC,EAAC,aAAa,EAAC,EAAE,EAAC,OAAO,EAAC,CAAC,UAAU,CAAC,EAAC,MAAM,EAAC,CAAC,UAAU,CAAC,EAAC,YAAY,EAAC,CAAC,UAAU,CAAC,EAAC,QAAQ,EAAC,CAAC,WAAW,EAAC,SAAS,CAAC,EAAC,YAAY,EAAC,CAAC,WAAW,EAAC,SAAS,CAAC,EAAC,EAAC,CAAC;IAC/M,CAAC;IACN,0BAAC;AAAD,CA9DnB,AA8DoB,IAAA;AA9DP,kDAAmB","file":"../../injectors/ModuleInjectorChain.js","sourcesContent":["import { IModuleInjectorChain } from './IModuleInjectorChain';\r\nimport { IModuleInjector } from './IModuleInjector';\r\nimport { ModuleInjector } from './ModuleInjector';\r\nimport { Type } from '../types';\r\nimport { IContainer } from '../IContainer';\r\nimport { PromiseUtil } from '../utils';\r\n\r\n/**\r\n * Module Injector chain, base injector chain.\r\n *\r\n * @export\r\n * @class ModuleInjectorChain\r\n * @implements {IModuleInjectorChain}\r\n */\r\nexport class ModuleInjectorChain implements IModuleInjectorChain {\r\n\r\n    protected _injectors: IModuleInjector[];\r\n    get injectors(): IModuleInjector[] {\r\n        return this._injectors;\r\n    }\r\n\r\n    constructor() {\r\n        this._injectors = [];\r\n    }\r\n\r\n    first(injector: IModuleInjector) {\r\n        if (this.isInjector(injector)) {\r\n            this._injectors.unshift(injector);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    next(injector: IModuleInjector) {\r\n        if (this.isInjector(injector)) {\r\n            this._injectors.push(injector);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    protected isInjector(injector: IModuleInjector) {\r\n        return injector instanceof ModuleInjector;\r\n    }\r\n\r\n    async inject(container: IContainer, modules: Type<any>[]): Promise<Type<any>[]> {\r\n        let types: Type<any>[] = [];\r\n        await PromiseUtil.runInChain(this.injectors.map(jtor => {\r\n            return async (mds: Type<any>[], next?: () => Promise<void>) => {\r\n                let ijRt = await jtor.inject(container, mds);\r\n                if (ijRt.injected && ijRt.injected.length) {\r\n                    types = types.concat(ijRt.injected);\r\n                }\r\n                if (ijRt.next && ijRt.next.length > 0) {\r\n                    return next();\r\n                }\r\n            }\r\n        }), modules);\r\n        return types;\r\n    }\r\n\r\n    syncInject(container: IContainer, modules: Type<any>[]): Type<any>[] {\r\n        let types: Type<any>[] = [];\r\n        let completed = false;\r\n        this.injectors.some(jtor => {\r\n            if (jtor instanceof ModuleInjector) {\r\n                let result = jtor.syncInject(container, modules);\r\n                types = types.concat(result.injected);\r\n                completed = (!result.next || result.next.length < 1);\r\n            }\r\n            return completed;\r\n        });\r\n        return types;\r\n    }\r\n\n                        static getClassAnnations():any  {\n                            return {\"name\":\"ModuleInjectorChain\",\"params\":{\"constructor\":[],\"first\":[\"injector\"],\"next\":[\"injector\"],\"isInjector\":[\"injector\"],\"inject\":[\"container\",\"modules\"],\"syncInject\":[\"container\",\"modules\"]}};\n                        }\n                   }\r\n\r\n"]}