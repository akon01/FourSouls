Start Log 

 Player 1 15:52:24 $MATCH:  

 Player 1 15:52:24 $START_GAME:  

 Player 1 15:52:24 $MOVE_TO_TABLE:  

 Player 2 15:52:24 $MOVE_TO_TABLE:  

 Player 1 15:52:35 $FINISH_LOAD:  
{"id":1,"turnPlayerId":2} 

 Player 2 15:52:37 $FINISH_LOAD:  
{"id":2,"turnPlayerId":2} 

 Player 2 15:52:37 $SET_CHAR:  
{"originPlayerId":2,"playerId":1,"charCardId":323,"itemCardId":324} 

 Player 1 15:52:37 $ASSIGN_CHAR_TO_PLAYER:  
{"playerId":1,"charCardId":323,"itemCardId":324} 

 Player 1 15:52:37 $SET_CHAR_END:  
{"playerId":2} 

 Player 2 15:52:37 $ASSIGN_CHAR_TO_PLAYER:  
{"playerId":2,"charCardId":319,"itemCardId":320} 

 Player 2 15:52:38 $DECK_ARRAGMENT:  
{"deckType":1,"arrangement":[57,4,32,85,62,113,40,51,58,126,137,31,111,15,112,65,98,69,136,135,29,87,5,72,97,70,83,54,9,133,78,76,110,77,134,80,50,102,43,17,125,138,115,42,7,101,93,22,18,23,86,94,100,46,26,91,27,107,117,21,11,6,82,99,34,68,12,89,48,73,116,74,108,38,96,106,28,119,8,127,56,59,10,49,123,114,131,122,88,66,55,95,30,60,67,41,121,45,105,139,53,124,132,130,19,35,90,92,120,25,13,84,37,118,33,71,39,109,129,14,81,44,75,64,63,16,52,103,79,36,104,20,128,47,24,61]} 

 Player 2 15:52:38 $DECK_ARRAGMENT:  
{"deckType":2,"arrangement":[301,287,235,267,288,262,278,241,260,297,222,299,284,292,225,247,256,272,246,249,254,290,281,293,257,295,244,227,286,303,243,237,265,233,259,234,296,276,228,250,289,242,258,285,261,300,263,304,279,302,255,270,308,273,283,239,248,223,266,291,280,268,240,245,224,294,238,229,274,252,307,298,271,226,230,282,277,269,253,231,251,236,275,306,232,305,264]} 

 Player 2 15:52:38 $DECK_ARRAGMENT:  
{"deckType":5,"arrangement":[219,205,161,187,185,217,199,208,184,202,150,193,210,188,183,198,211,149,143,206,158,168,191,194,204,142,209,189,167,186,179,190,159,178,141,152,153,212,176,148,177,174,213,146,162,156,145,214,157,197,172,216,196,180,192,220,201,173,182,195,215,155,164,171,181,160,203,165,151,166,163,147,144,207,169,154,175,170,200,218]} 

 Player 2 15:52:38 $DRAW_CARD:  
{"deckType":5} 

 Player 2 15:52:38 $FLIP_CARD:  
{"cardId":218} 

 Player 2 15:52:38 $ADD_STORE_CARD:  
{"cardId":218} 

 Player 2 15:52:38 $DRAW_CARD:  
{"deckType":5} 

 Player 2 15:52:38 $FLIP_CARD:  
{"cardId":200} 

 Player 2 15:52:38 $ADD_STORE_CARD:  
{"cardId":200} 

 Player 2 15:52:38 $DRAW_CARD:  
{"deckType":2} 

 Player 2 15:52:38 $DECK_ADD_TO_BOTTOM:  
{"deckType":2,"cardId":264} 

 Player 2 15:52:38 $DRAW_CARD:  
{"deckType":2} 

 Player 2 15:52:38 $DECK_ADD_TO_BOTTOM:  
{"deckType":2,"cardId":305} 

 Player 2 15:52:38 $DRAW_CARD:  
{"deckType":2} 

 Player 2 15:52:38 $FLIP_CARD:  
{"cardId":232} 

 Player 2 15:52:38 $ADD_MONSTER:  
{"monsterPlaceId":1,"monsterId":232} 

 Player 2 15:52:38 $NEW_MONSTER_ON_PLACE:  
{"cardId":232,"monsterPlaceId":1} 

 Player 2 15:52:38 $DRAW_CARD:  
{"deckType":2} 

 Player 2 15:52:38 $FLIP_CARD:  
{"cardId":306} 

 Player 2 15:52:38 $REGISTER_PASSIVE_ITEM:  
{"cardId":306} 

 Player 2 15:52:38 $ADD_MONSTER:  
{"monsterPlaceId":2,"monsterId":306} 

 Player 2 15:52:38 $NEW_MONSTER_ON_PLACE:  
{"cardId":306,"monsterPlaceId":2} 

 Player 2 15:52:39 $SET_MONEY:  
{"playerId":1,"numOfCoins":3} 

 Player 2 15:52:39 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"PLAYER_CHANGE_MONEY","args":[{"type":2,"number":3}],"result":null,"preventMethod":false,"methodScopeId":323,"scopeIsPlayer":true,"index":1,"originStackId":-1},"isAfterActivation":true,"index":1} 

 Player 2 15:52:39 $DRAW_CARD:  
{"deckType":1} 

 Player 2 15:52:39 $MOVE_CARD:  
{"moveIndex":1,"cardId":61,"placeID":1,"flipIfFlipped":false,"firstPos":{"x":-7.600000000000023,"y":-0.19999999999998863,"z":0},"playerId":2,"placeType":"Hand"} 

 Player 1 15:52:39 $MOVE_CARD_END:  
{"moveIndex":1,"cardId":61,"flipIfFlipped":false,"playerId":2} 

 Player 2 15:52:39 $CARD_DRAWN:  
{"playerId":1,"deckType":1,"drawnCardId":61} 

 Player 2 15:52:39 $FLIP_CARD:  
{"cardId":61} 

 Player 2 15:52:39 $FLIP_CARD:  
{"cardId":61} 

 Player 2 15:52:39 $PLAYER_GET_LOOT:  
{"playerId":1,"cardId":61} 

 Player 2 15:52:39 $DRAW_CARD:  
{"deckType":1} 

 Player 2 15:52:39 $MOVE_CARD:  
{"moveIndex":2,"cardId":24,"placeID":1,"flipIfFlipped":false,"firstPos":{"x":-7.600000000000023,"y":-0.19999999999998863,"z":0},"playerId":2,"placeType":"Hand"} 

 Player 1 15:52:40 $MOVE_CARD_END:  
{"moveIndex":2,"cardId":24,"flipIfFlipped":false,"playerId":2} 

 Player 2 15:52:40 $CARD_DRAWN:  
{"playerId":1,"deckType":1,"drawnCardId":24} 

 Player 2 15:52:40 $FLIP_CARD:  
{"cardId":24} 

 Player 2 15:52:40 $FLIP_CARD:  
{"cardId":24} 

 Player 2 15:52:40 $PLAYER_GET_LOOT:  
{"playerId":1,"cardId":24} 

 Player 2 15:52:40 $DRAW_CARD:  
{"deckType":1} 

 Player 2 15:52:40 $MOVE_CARD:  
{"moveIndex":3,"cardId":47,"placeID":1,"flipIfFlipped":false,"firstPos":{"x":-7.600000000000023,"y":-0.19999999999998863,"z":0},"playerId":2,"placeType":"Hand"} 

 Player 1 15:52:40 $MOVE_CARD_END:  
{"moveIndex":3,"cardId":47,"flipIfFlipped":false,"playerId":2} 

 Player 2 15:52:40 $CARD_DRAWN:  
{"playerId":1,"deckType":1,"drawnCardId":47} 

 Player 2 15:52:40 $FLIP_CARD:  
{"cardId":47} 

 Player 2 15:52:40 $FLIP_CARD:  
{"cardId":47} 

 Player 2 15:52:40 $PLAYER_GET_LOOT:  
{"playerId":1,"cardId":47} 

 Player 2 15:52:40 $SET_MONEY:  
{"playerId":2,"numOfCoins":3} 

 Player 2 15:52:40 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"PLAYER_CHANGE_MONEY","args":[{"type":2,"number":3}],"result":null,"preventMethod":false,"methodScopeId":319,"scopeIsPlayer":true,"index":2,"originStackId":-1},"isAfterActivation":true,"index":2} 

 Player 2 15:52:40 $DRAW_CARD:  
{"deckType":1} 

 Player 2 15:52:40 $MOVE_CARD:  
{"moveIndex":4,"cardId":128,"placeID":2,"flipIfFlipped":false,"firstPos":{"x":-7.600000000000023,"y":-0.19999999999998863,"z":0},"playerId":2,"placeType":"Hand"} 

 Player 1 15:52:41 $MOVE_CARD_END:  
{"moveIndex":4,"cardId":128,"flipIfFlipped":false,"playerId":2} 

 Player 2 15:52:41 $CARD_DRAWN:  
{"playerId":2,"deckType":1,"drawnCardId":128} 

 Player 2 15:52:41 $FLIP_CARD:  
{"cardId":128} 

 Player 2 15:52:41 $PLAYER_GET_LOOT:  
{"playerId":2,"cardId":128} 

 Player 2 15:52:41 $DRAW_CARD:  
{"deckType":1} 

 Player 2 15:52:41 $MOVE_CARD:  
{"moveIndex":5,"cardId":20,"placeID":2,"flipIfFlipped":false,"firstPos":{"x":-7.600000000000023,"y":-0.19999999999998863,"z":0},"playerId":2,"placeType":"Hand"} 

 Player 1 15:52:41 $MOVE_CARD_END:  
{"moveIndex":5,"cardId":20,"flipIfFlipped":false,"playerId":2} 

 Player 2 15:52:41 $CARD_DRAWN:  
{"playerId":2,"deckType":1,"drawnCardId":20} 

 Player 2 15:52:41 $FLIP_CARD:  
{"cardId":20} 

 Player 2 15:52:41 $PLAYER_GET_LOOT:  
{"playerId":2,"cardId":20} 

 Player 2 15:52:41 $DRAW_CARD:  
{"deckType":1} 

 Player 2 15:52:41 $MOVE_CARD:  
{"moveIndex":6,"cardId":104,"placeID":2,"flipIfFlipped":false,"firstPos":{"x":-7.600000000000023,"y":-0.19999999999998863,"z":0},"playerId":2,"placeType":"Hand"} 

 Player 1 15:52:42 $MOVE_CARD_END:  
{"moveIndex":6,"cardId":104,"flipIfFlipped":false,"playerId":2} 

 Player 2 15:52:42 $CARD_DRAWN:  
{"playerId":2,"deckType":1,"drawnCardId":104} 

 Player 2 15:52:42 $FLIP_CARD:  
{"cardId":104} 

 Player 2 15:52:42 $PLAYER_GET_LOOT:  
{"playerId":2,"cardId":104} 

 Player 2 15:52:42 $GAME_HAS_STARTED:  

 Player 2 15:52:42 $SET_TURN:  
{"playerId":2} 

 Player 2 15:52:42 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 2 15:52:42 $NEXT_STACK_ID:  

 Player 2 15:52:42 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 15:52:42 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 start turn loot"} 

 Player 2 15:52:42 $ADD_TO_STACK:  
{"stackEffect":{"entityId":1,"creatorCardId":319,"turnPlayerCardId":319,"stackEffectType":13}} 

 Player 2 15:52:42 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":1,"creatorCardId":319,"turnPlayerCardId":319,"stackEffectType":13}} 

 Player 2 15:52:42 $SET_STACK_ICON:  
{"iconIndex":0} 

 Player 2 15:52:42 $SHOW_STACK_EFFECT:  
{"effectId":1} 

 Player 1 15:52:42 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 15:52:42 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 start turn loot"} 

 Player 2 15:52:45 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":0,"_text":"Add StartTurnLoot 1 "}} 

 Player 2 15:52:45 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 2 15:52:45 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":1,"creatorCardId":319,"turnPlayerCardId":319,"stackEffectType":13}} 

 Player 2 15:52:45 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":1,"_text":"Response Adding StartTurnLoot 1"},"childOfId":0} 

 Player 2 15:52:45 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":2,"_text":"Wait For Response From Player 2 "},"childOfId":0} 

 Player 2 15:52:45 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 2 15:52:45 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":3,"_text":"Wait For Response From Player 1 "},"childOfId":0} 

 Player 2 15:52:45 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 2 15:52:45 $GET_REACTION:  
{"playerId":1,"activePlayerId":2} 

 Player 1 15:52:45 $HIDE_REACTIONS:  
{"playerId":1,"cardsIds":[323,324]} 

 Player 1 15:52:45 $RESPOND_TO:  
{"playerId":2,"stackEffectResponse":false} 

 Player 2 15:52:45 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":4,"_text":"Resolve StartTurnLoot 1 "}} 

 Player 2 15:52:45 $ADD_RESOLVING_STACK_EFFECT:  
{"stackEffect":{"entityId":1,"creatorCardId":319,"turnPlayerCardId":319,"stackEffectType":13}} 

 Player 2 15:52:45 $DRAW_CARD:  
{"deckType":1} 

 Player 2 15:52:45 $MOVE_CARD:  
{"moveIndex":7,"cardId":36,"placeID":2,"flipIfFlipped":false,"firstPos":{"x":-7.600000000000023,"y":-0.19999999999998863,"z":0},"playerId":2,"placeType":"Hand"} 

 Player 1 15:52:45 $MOVE_CARD_END:  
{"moveIndex":7,"cardId":36,"flipIfFlipped":false,"playerId":2} 

 Player 2 15:52:45 $CARD_DRAWN:  
{"playerId":2,"deckType":1,"drawnCardId":36} 

 Player 2 15:52:46 $FLIP_CARD:  
{"cardId":36} 

 Player 2 15:52:46 $PLAYER_GET_LOOT:  
{"playerId":2,"cardId":36} 

 Player 2 15:52:46 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":1,"creatorCardId":319,"turnPlayerCardId":319,"stackEffectType":13}} 

 Player 2 15:52:46 $REMOVE_RESOLVING_STACK_EFFECT:  
{"stackEffectId":1} 

 Player 2 15:52:46 $SET_STACK_ICON:  
{"iconIndex":1} 

 Player 2 15:52:46 $SHOW_STACK_EFFECT:  
{"effectId":1} 

 Player 2 15:52:48 $REMOVE_SE_VIS_PREV:  
{"stackEffectId":1} 

 Player 2 15:52:49 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":5,"_text":"Remove After Resolve StartTurnLoot 1  "}} 

 Player 2 15:52:49 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 15:52:49 $REMOVE_FROM_STACK:  
{"stackEffect":{"entityId":1,"creatorCardId":319,"turnPlayerCardId":319,"stackEffectType":13}} 

 Player 2 15:52:49 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":6,"_text":"Response Remove After Resolve StartTurnLoot 1"},"childOfId":5} 

 Player 2 15:52:49 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":7,"_text":"Wait For Response From Player 1 "},"childOfId":5} 

 Player 2 15:52:49 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 2 15:52:49 $GET_REACTION:  
{"playerId":1,"activePlayerId":2} 

 Player 1 15:52:49 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 start turn loot"} 

 Player 1 15:52:49 $HIDE_REACTIONS:  
{"playerId":1,"cardsIds":[323,324]} 

 Player 1 15:52:49 $RESPOND_TO:  
{"playerId":2,"stackEffectResponse":false} 

 Player 2 15:52:49 $ACTION_MASSAGE_REMOVE:  
{"id":7} 

 Player 2 15:52:49 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":8,"_text":"Wait For Response From Player 2 "},"childOfId":5} 

 Player 2 15:52:49 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 2 15:52:49 $ACTION_MASSAGE_REMOVE:  
{"id":8} 

 Player 2 15:52:49 $ACTION_MASSAGE_REMOVE:  
{"id":6} 

 Player 2 15:52:49 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":9,"_text":"Stack Was Emptied "}} 

 Player 2 15:52:49 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 15:52:49 $CLEAR_SE_VIS:  

 Player 2 15:52:49 $UPDATE_ACTIONS:  

 Player 2 15:53:09 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 2 15:53:10 $CLEAR_SE_VIS:  

 Player 2 15:53:10 $REPLACE_STACK:  
{"currentStack":[]} 

 Player 2 15:53:10 $CLEAR_SE_VIS:  

 Player 2 15:53:10 $END_TURN:  

 Player 2 15:53:10 $SET_TURN:  
{"playerId":1} 

 Player 2 15:53:10 $START_TURN:  
{"playerId":1} 

 Player 1 15:53:10 $STACK_EMPTIED:  
{"playerId":2} 

 Player 1 15:53:10 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 15:53:10 $NEXT_STACK_ID:  

 Player 1 15:53:10 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 start turn loot"} 

 Player 1 15:53:10 $ADD_TO_STACK:  
{"stackEffect":{"entityId":2,"creatorCardId":323,"turnPlayerCardId":323,"stackEffectType":13}} 

 Player 1 15:53:10 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":2,"creatorCardId":323,"turnPlayerCardId":323,"stackEffectType":13}} 

 Player 1 15:53:10 $SET_STACK_ICON:  
{"iconIndex":0} 

 Player 1 15:53:10 $SHOW_STACK_EFFECT:  
{"effectId":2} 

 Player 2 15:53:10 $STACK_EMPTIED:  
{"playerId":1} 

 Player 2 15:53:10 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 15:53:10 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 start turn loot"} 

 Player 1 15:53:10 $CLEAR_SE_VIS:  

 Player 1 15:53:13 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":10,"_text":"Add StartTurnLoot 2 "}} 

 Player 1 15:53:13 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 15:53:13 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":2,"creatorCardId":323,"turnPlayerCardId":323,"stackEffectType":13}} 

 Player 1 15:53:13 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":11,"_text":"Response Adding StartTurnLoot 2"},"childOfId":10} 

 Player 1 15:53:13 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":12,"_text":"Wait For Response From Player 1 "},"childOfId":10} 

 Player 1 15:53:13 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 15:53:13 $ACTION_MASSAGE_REMOVE:  
{"id":12} 

 Player 1 15:53:13 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":13,"_text":"Wait For Response From Player 2 "},"childOfId":10} 

 Player 1 15:53:13 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 15:53:13 $GET_REACTION:  
{"playerId":2,"activePlayerId":1} 

 Player 2 15:53:13 $HIDE_REACTIONS:  
{"playerId":2,"cardsIds":[319,320]} 

 Player 2 15:53:13 $RESPOND_TO:  
{"playerId":1,"stackEffectResponse":false} 

 Player 1 15:53:13 $ACTION_MASSAGE_REMOVE:  
{"id":13} 

 Player 1 15:53:13 $ACTION_MASSAGE_REMOVE:  
{"id":11} 

 Player 1 15:53:13 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":14,"_text":"Resolve StartTurnLoot 2 "}} 

 Player 1 15:53:13 $ADD_RESOLVING_STACK_EFFECT:  
{"stackEffect":{"entityId":2,"creatorCardId":323,"turnPlayerCardId":323,"stackEffectType":13}} 

 Player 1 15:53:13 $DRAW_CARD:  
{"deckType":1} 

 Player 1 15:53:13 $MOVE_CARD:  
{"moveIndex":8,"cardId":79,"placeID":1,"flipIfFlipped":false,"firstPos":{"x":-7.600000000000023,"y":-0.19999999999998863,"z":0},"playerId":1,"placeType":"Hand"} 

 Player 2 15:53:13 $MOVE_CARD_END:  
{"moveIndex":8,"cardId":79,"flipIfFlipped":false,"playerId":1} 

 Player 1 15:53:14 $CARD_DRAWN:  
{"playerId":1,"deckType":1,"drawnCardId":79} 

 Player 1 15:53:14 $FLIP_CARD:  
{"cardId":79} 

 Player 1 15:53:14 $PLAYER_GET_LOOT:  
{"playerId":1,"cardId":79} 

 Player 1 15:53:14 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":2,"creatorCardId":323,"turnPlayerCardId":323,"stackEffectType":13}} 

 Player 1 15:53:14 $REMOVE_RESOLVING_STACK_EFFECT:  
{"stackEffectId":2} 

 Player 1 15:53:14 $SET_STACK_ICON:  
{"iconIndex":1} 

 Player 1 15:53:14 $SHOW_STACK_EFFECT:  
{"effectId":2} 

 Player 1 15:53:17 $REMOVE_SE_VIS_PREV:  
{"stackEffectId":2} 

 Player 1 15:53:17 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":15,"_text":"Remove After Resolve StartTurnLoot 2  "}} 

 Player 1 15:53:17 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 15:53:17 $REMOVE_FROM_STACK:  
{"stackEffect":{"entityId":2,"creatorCardId":323,"turnPlayerCardId":323,"stackEffectType":13}} 

 Player 1 15:53:17 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":16,"_text":"Response Remove After Resolve StartTurnLoot 2"},"childOfId":15} 

 Player 1 15:53:17 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":17,"_text":"Wait For Response From Player 2 "},"childOfId":15} 

 Player 1 15:53:17 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 15:53:17 $GET_REACTION:  
{"playerId":2,"activePlayerId":1} 

 Player 2 15:53:17 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 start turn loot"} 

 Player 2 15:53:17 $HIDE_REACTIONS:  
{"playerId":2,"cardsIds":[319,320]} 

 Player 2 15:53:17 $RESPOND_TO:  
{"playerId":1,"stackEffectResponse":false} 

 Player 1 15:53:17 $ACTION_MASSAGE_REMOVE:  
{"id":17} 

 Player 1 15:53:17 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":18,"_text":"Wait For Response From Player 1 "},"childOfId":15} 

 Player 1 15:53:17 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 15:53:17 $ACTION_MASSAGE_REMOVE:  
{"id":18} 

 Player 1 15:53:17 $ACTION_MASSAGE_REMOVE:  
{"id":16} 

 Player 1 15:53:17 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":19,"_text":"Stack Was Emptied "}} 

 Player 1 15:53:17 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 15:53:17 $CLEAR_SE_VIS:  

 Player 1 15:53:19 $NEXT_STACK_ID:  

 Player 1 15:53:19 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1  declared attack on War"} 

 Player 1 15:53:19 $ADD_TO_STACK:  
{"stackEffect":{"entityId":3,"creatorCardId":323,"attackingPlayerCardId":323,"idOfCardBeingAttacked":306,"stackEffectType":4}} 

 Player 1 15:53:19 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":3,"creatorCardId":323,"attackingPlayerCardId":323,"idOfCardBeingAttacked":306,"stackEffectType":4}} 

 Player 1 15:53:19 $SET_STACK_ICON:  
{"iconIndex":0} 

 Player 1 15:53:19 $SHOW_STACK_EFFECT:  
{"effectId":3} 

 Player 2 15:53:19 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 15:53:19 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1  declared attack on War"} 

 Player 1 15:53:22 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":20,"_text":"Add DeclareAttack 3 "}} 

 Player 1 15:53:22 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 15:53:22 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":3,"creatorCardId":323,"attackingPlayerCardId":323,"idOfCardBeingAttacked":306,"stackEffectType":4}} 

 Player 1 15:53:22 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":21,"_text":"Response Adding DeclareAttack 3"},"childOfId":20} 

 Player 1 15:53:22 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":22,"_text":"Wait For Response From Player 1 "},"childOfId":20} 

 Player 1 15:53:22 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 15:53:22 $ACTION_MASSAGE_REMOVE:  
{"id":22} 

 Player 1 15:53:22 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":23,"_text":"Wait For Response From Player 2 "},"childOfId":20} 

 Player 1 15:53:22 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 15:53:22 $GET_REACTION:  
{"playerId":2,"activePlayerId":1} 

 Player 2 15:53:22 $HIDE_REACTIONS:  
{"playerId":2,"cardsIds":[319,320]} 

 Player 2 15:53:22 $RESPOND_TO:  
{"playerId":1,"stackEffectResponse":false} 

 Player 1 15:53:22 $ACTION_MASSAGE_REMOVE:  
{"id":23} 

 Player 1 15:53:23 $ACTION_MASSAGE_REMOVE:  
{"id":21} 

 Player 1 15:53:23 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":24,"_text":"Resolve DeclareAttack 3 "}} 

 Player 1 15:53:23 $ADD_RESOLVING_STACK_EFFECT:  
{"stackEffect":{"entityId":3,"creatorCardId":323,"attackingPlayerCardId":323,"idOfCardBeingAttacked":306,"stackEffectType":4}} 

 Player 1 15:53:23 $ACTIVATE_PARTICLE_EFFECT:  
{"cardId":306,"particleType":5} 

 Player 1 15:53:23 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"PLAYER_DECLARE_ATTACK","args":[],"result":null,"preventMethod":false,"methodScopeId":323,"scopeIsPlayer":true,"index":1,"originStackId":3},"isAfterActivation":true,"index":1} 

 Player 1 15:53:23 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":3,"creatorCardId":323,"attackingPlayerCardId":323,"idOfCardBeingAttacked":306,"stackEffectType":4}} 

 Player 1 15:53:23 $REMOVE_RESOLVING_STACK_EFFECT:  
{"stackEffectId":3} 

 Player 1 15:53:23 $SET_STACK_ICON:  
{"iconIndex":1} 

 Player 1 15:53:23 $SHOW_STACK_EFFECT:  
{"effectId":3} 

 Player 1 15:53:26 $REMOVE_SE_VIS_PREV:  
{"stackEffectId":3} 

 Player 1 15:53:26 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":25,"_text":"Remove After Resolve DeclareAttack 3  "}} 

 Player 1 15:53:26 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 15:53:26 $REMOVE_FROM_STACK:  
{"stackEffect":{"entityId":3,"creatorCardId":323,"attackingPlayerCardId":323,"idOfCardBeingAttacked":306,"stackEffectType":4}} 

 Player 1 15:53:26 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":26,"_text":"Response Remove After Resolve DeclareAttack 3"},"childOfId":25} 

 Player 1 15:53:26 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":27,"_text":"Wait For Response From Player 2 "},"childOfId":25} 

 Player 1 15:53:26 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 15:53:26 $GET_REACTION:  
{"playerId":2,"activePlayerId":1} 

 Player 2 15:53:26 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1  declared attack on War"} 

 Player 2 15:53:26 $HIDE_REACTIONS:  
{"playerId":2,"cardsIds":[319,320]} 

 Player 2 15:53:26 $RESPOND_TO:  
{"playerId":1,"stackEffectResponse":false} 

 Player 1 15:53:26 $ACTION_MASSAGE_REMOVE:  
{"id":27} 

 Player 1 15:53:26 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":28,"_text":"Wait For Response From Player 1 "},"childOfId":25} 

 Player 1 15:53:26 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 15:53:26 $ACTION_MASSAGE_REMOVE:  
{"id":28} 

 Player 1 15:53:26 $ACTION_MASSAGE_REMOVE:  
{"id":26} 

 Player 1 15:53:26 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":29,"_text":"Stack Was Emptied "}} 

 Player 1 15:53:26 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 15:53:26 $CLEAR_SE_VIS:  

 Player 1 15:53:28 $NEXT_STACK_ID:  

 Player 1 15:53:28 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against War<Monster>"} 

 Player 1 15:53:28 $ADD_TO_STACK:  
{"stackEffect":{"entityId":4,"creatorCardId":323,"rollingPlayerCardId":323,"stackEffectType":2,"attackedMonsterCardId":306}} 

 Player 1 15:53:28 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":4,"creatorCardId":323,"rollingPlayerCardId":323,"stackEffectType":2,"attackedMonsterCardId":306}} 

 Player 1 15:53:28 $SET_STACK_ICON:  
{"iconIndex":0} 

 Player 1 15:53:28 $SHOW_STACK_EFFECT:  
{"effectId":4} 

 Player 2 15:53:28 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 15:53:28 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against War<Monster>"} 

 Player 1 15:53:31 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":30,"_text":"Add AttackRoll 4 "}} 

 Player 1 15:53:31 $ROLL_DICE:  
{"playerId":1} 

 Player 1 15:53:33 $ROLL_DICE_ENDED:  
{"playerId":1,"numberRolled":4} 

 Player 1 15:53:33 $UPDATE_STACK_VIS:  
{"stackId":4,"text":"player rolled 4 vs War<Monster>"} 

 Player 1 15:53:33 $SHOW_DICE_ROLL:  
{"stackId":4} 

 Player 1 15:53:36 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 rolled 4 vs War<Monster>"} 

 Player 1 15:53:36 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 15:53:36 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":4,"creatorCardId":323,"numberRolled":4,"rollingPlayerCardId":323,"stackEffectType":2,"attackedMonsterCardId":306}} 

 Player 1 15:53:36 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":31,"_text":"Response Adding AttackRoll 4"},"childOfId":30} 

 Player 1 15:53:36 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":32,"_text":"Wait For Response From Player 1 "},"childOfId":30} 

 Player 1 15:53:36 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 15:53:36 $ACTION_MASSAGE_REMOVE:  
{"id":32} 

 Player 1 15:53:36 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":33,"_text":"Wait For Response From Player 2 "},"childOfId":30} 

 Player 1 15:53:36 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 15:53:36 $GET_REACTION:  
{"playerId":2,"activePlayerId":1} 

 Player 2 15:53:36 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against War<Monster>"} 

 Player 2 15:53:36 $HIDE_REACTIONS:  
{"playerId":2,"cardsIds":[319,320]} 

 Player 2 15:53:36 $RESPOND_TO:  
{"playerId":1,"stackEffectResponse":false} 

 Player 1 15:53:36 $ACTION_MASSAGE_REMOVE:  
{"id":33} 

 Player 1 15:53:36 $ACTION_MASSAGE_REMOVE:  
{"id":31} 

 Player 1 15:53:36 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":34,"_text":"Resolve AttackRoll 4 "}} 

 Player 1 15:53:36 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 rolled 4 vs War<Monster>"} 

 Player 1 15:53:36 $ADD_RESOLVING_STACK_EFFECT:  
{"stackEffect":{"entityId":4,"creatorCardId":323,"numberRolled":4,"rollingPlayerCardId":323,"stackEffectType":2,"attackedMonsterCardId":306}} 

 Player 1 15:53:36 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":35,"_text":"Added 0 to original roll"}} 

 Player 1 15:53:37 $NEXT_STACK_ID:  

 Player 2 15:53:37 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against War<Monster>"} 

 Player 1 15:53:44 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 15:53:46 $SET_STACK_ICON:  
{"iconIndex":0} 

 Player 1 15:54:55 $SHOW_STACK_EFFECT:  
{"effectId":5} 

 Player 2 15:54:55 $LOG_ERROR:  
"no stack effect to show" 
//////Error From Player 2////
  

 Player 2 15:54:55 $LOG_ERROR:  
//////Error From Player 2////
 [object Object]
////// 

 Player 2 15:54:55 $SHOW_ANNOUNCEMENT:  
{"text":"no stack effect to show"} 

 Player 1 15:54:58 $CLEAR_SE_VIS:  

 Player 1 15:54:58 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Samson combat damage to War \n2:Player 1 rolled 4 vs War<Monster>"} 

 Player 1 15:54:58 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":5,"creatorCardId":323,"entityToDoDamageCardId":323,"entityToTakeDamageCardId":306,"isMonsterDoDamage":false,"isMonsterTakeDamage":true,"isPlayerDoDamage":false,"stackEffectType":3,"numberRolled":4}} 

 Player 1 15:54:58 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":4,"creatorCardId":323,"numberRolled":4,"rollingPlayerCardId":323,"stackEffectType":2,"attackedMonsterCardId":306}} 

 Player 1 15:54:58 $REPLACE_STACK:  
{"currentStack":[{"entityId":5,"creatorCardId":323,"entityToDoDamageCardId":323,"entityToTakeDamageCardId":306,"isMonsterDoDamage":false,"isMonsterTakeDamage":true,"isPlayerDoDamage":false,"stackEffectType":3,"numberRolled":4},{"entityId":4,"creatorCardId":323,"numberRolled":4,"rollingPlayerCardId":323,"stackEffectType":2,"attackedMonsterCardId":306}]} 

 Player 1 15:54:58 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"PLAYER_ROLL_DICE","args":[{"type":2,"number":4},{"type":2,"number":2},{"type":2,"number":3}],"result":null,"preventMethod":false,"methodScopeId":323,"scopeIsPlayer":true,"index":2,"originStackId":4},"isAfterActivation":true,"index":2} 

 Player 1 15:54:58 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":4,"creatorCardId":323,"numberRolled":4,"rollingPlayerCardId":323,"stackEffectType":2,"attackedMonsterCardId":306}} 

 Player 1 15:54:58 $REMOVE_RESOLVING_STACK_EFFECT:  
{"stackEffectId":4} 

 Player 1 15:54:58 $SET_STACK_ICON:  
{"iconIndex":1} 

 Player 2 15:54:58 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against War<Monster>"} 

 Player 2 15:54:58 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Samson combat damage to War \n2:Player 1 is rolling against War<Monster>"} 

 Player 1 15:55:37 $SHOW_STACK_EFFECT:  
{"effectId":4} 

 Player 1 15:55:40 $REMOVE_SE_VIS_PREV:  
{"stackEffectId":4} 

 Player 1 15:55:40 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":36,"_text":"Remove After Resolve AttackRoll 4  "}} 

 Player 1 15:55:41 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Samson combat damage to War"} 

 Player 1 15:55:41 $REMOVE_FROM_STACK:  
{"stackEffect":{"entityId":4,"creatorCardId":323,"numberRolled":4,"rollingPlayerCardId":323,"stackEffectType":2,"attackedMonsterCardId":306}} 

 Player 1 15:55:41 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":37,"_text":"Response Remove After Resolve AttackRoll 4"},"childOfId":36} 

 Player 1 15:55:41 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":38,"_text":"Wait For Response From Player 1 "},"childOfId":36} 

 Player 1 15:55:41 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 15:55:41 $ACTION_MASSAGE_REMOVE:  
{"id":38} 

 Player 1 15:55:41 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":39,"_text":"Wait For Response From Player 2 "},"childOfId":36} 

 Player 1 15:55:41 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 15:55:41 $GET_REACTION:  
{"playerId":2,"activePlayerId":1} 

 Player 2 15:55:41 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Samson combat damage to War \n2:Player 1 is rolling against War<Monster>"} 

 Player 2 15:55:41 $HIDE_REACTIONS:  
{"playerId":2,"cardsIds":[319,320]} 

 Player 2 15:55:41 $RESPOND_TO:  
{"playerId":1,"stackEffectResponse":false} 

 Player 1 15:55:41 $ACTION_MASSAGE_REMOVE:  
{"id":39} 

 Player 1 15:55:41 $ACTION_MASSAGE_REMOVE:  
{"id":37} 

 Player 1 15:55:41 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":40,"_text":"Resolve CombatDamage 5 "}} 

 Player 1 15:55:41 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Samson combat damage to War"} 

 Player 1 15:55:41 $ADD_RESOLVING_STACK_EFFECT:  
{"stackEffect":{"entityId":5,"creatorCardId":323,"entityToDoDamageCardId":323,"entityToTakeDamageCardId":306,"isMonsterDoDamage":false,"isMonsterTakeDamage":true,"isPlayerDoDamage":false,"stackEffectType":3,"numberRolled":4}} 

 Player 1 15:55:41 $UPDATE_STACK_VIS:  
{"stackId":5,"text":"Samson will deal 1 combat damage to War"} 

 Player 1 15:55:41 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"MONSTER_GET_HIT","args":[{"type":2,"number":1},{"type":0,"number":323},{"type":2}],"result":null,"preventMethod":false,"methodScopeId":306,"scopeIsPlayer":false,"index":1,"originStackId":-1},"isAfterActivation":false,"index":1} 

 Player 1 15:55:41 $NEXT_STACK_ID:  

 Player 1 15:55:41 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Samson combat damage to War \n2:Activate War effect GainStats<GainStats>"} 

 Player 1 15:55:41 $ADD_TO_STACK:  
{"stackEffect":{"effectCollectedData":null,"entityId":6,"creatorCardId":323,"hasLockingStackEffect":false,"cardActivatorId":1,"cardWithEffectId":306,"effectToDo":{"effectName":"GainStats","cardEffectNum":0,"cardPlayerId":1,"cardId":306,"effctType":0},"isAfterActivation":false,"index":1,"hasDataBeenCollectedYet":false,"stackEffectType":14}} 

 Player 1 15:55:41 $ADD_SE_VIS_PREV:  
{"stackEffect":{"effectCollectedData":null,"entityId":6,"creatorCardId":323,"hasLockingStackEffect":false,"cardActivatorId":1,"cardWithEffectId":306,"effectToDo":{"effectName":"GainStats","cardEffectNum":0,"cardPlayerId":1,"cardId":306,"effctType":0},"isAfterActivation":false,"index":1,"hasDataBeenCollectedYet":false,"stackEffectType":14}} 

 Player 1 15:55:41 $SET_STACK_ICON:  
{"iconIndex":0} 

 Player 2 15:55:41 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Samson combat damage to War"} 

 Player 2 15:55:41 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Samson combat damage to War \n2:Activate War "} 

 Player 1 15:55:47 $SHOW_STACK_EFFECT:  
{"effectId":6} 

 Player 1 15:55:50 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":41,"_text":"Add ActivatePassiveEffect 6 "}} 

 Player 1 15:55:50 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Samson combat damage to War \n2:Activate War effect GainStats<GainStats>"} 

 Player 1 15:55:50 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"effectCollectedData":{"effectTargets":[306],"chainEffectsData":[],"methodArgs":[],"isPassive":true,"terminateOriginal":false,"effectCardOwner":306,"effectCardPlayer":306},"entityId":6,"creatorCardId":323,"hasLockingStackEffect":false,"cardActivatorId":1,"cardWithEffectId":306,"effectToDo":{"effectName":"GainStats","cardEffectNum":0,"cardPlayerId":1,"cardId":306,"effctType":0},"isAfterActivation":false,"index":1,"hasDataBeenCollectedYet":true,"stackEffectType":14}} 

 Player 1 15:55:50 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":42,"_text":"Response Adding ActivatePassiveEffect 6"},"childOfId":41} 

 Player 1 15:55:50 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":43,"_text":"Wait For Response From Player 2 "},"childOfId":41} 

 Player 1 15:55:50 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 15:55:50 $GET_REACTION:  
{"playerId":2,"activePlayerId":1} 

 Player 2 15:55:50 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Samson combat damage to War \n2:Activate War "} 

 Player 2 15:55:50 $HIDE_REACTIONS:  
{"playerId":2,"cardsIds":[319,320]} 

 Player 2 15:55:50 $RESPOND_TO:  
{"playerId":1,"stackEffectResponse":false} 

 Player 1 15:55:50 $ACTION_MASSAGE_REMOVE:  
{"id":43} 

 Player 1 15:55:50 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":44,"_text":"Wait For Response From Player 1 "},"childOfId":41} 

 Player 1 15:55:50 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 15:55:50 $ACTION_MASSAGE_REMOVE:  
{"id":44} 

 Player 1 15:55:50 $ACTION_MASSAGE_REMOVE:  
{"id":42} 

 Player 1 15:55:50 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":45,"_text":"Resolve ActivatePassiveEffect 6 "}} 

 Player 1 15:55:50 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Samson combat damage to War \n2:Activate War effect GainStats<GainStats>"} 

 Player 1 15:55:50 $ADD_RESOLVING_STACK_EFFECT:  
{"stackEffect":{"effectCollectedData":{"effectTargets":[306],"chainEffectsData":[],"methodArgs":[],"isPassive":true,"terminateOriginal":false,"effectCardOwner":306,"effectCardPlayer":306},"entityId":6,"creatorCardId":323,"hasLockingStackEffect":false,"cardActivatorId":1,"cardWithEffectId":306,"effectToDo":{"effectName":"GainStats","cardEffectNum":0,"cardPlayerId":1,"cardId":306,"effctType":0},"isAfterActivation":false,"index":1,"hasDataBeenCollectedYet":true,"stackEffectType":14}} 

 Player 1 15:55:50 $ACTIVATE_PARTICLE_EFFECT:  
{"cardId":306,"particleType":6} 

 Player 2 15:55:50 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Samson combat damage to War \n2:Activate War "} 

 Player 1 15:55:52 $DISABLE_PARTICLE_EFFECT:  
{"cardId":306,"particleType":6} 

 Player 1 15:55:52 $MONSTER_GAIN_DMG:  
{"cardId":306,"DMGToGain":1} 

 Player 1 15:55:52 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"MONSTER_GET_HIT","args":[{"type":2,"number":1},{"type":0,"number":323},{"type":2}],"result":null,"preventMethod":false,"methodScopeId":306,"scopeIsPlayer":false,"index":1,"originStackId":-1},"isAfterActivation":false,"index":1} 

 Player 1 15:55:52 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Samson combat damage to War \n2:Activate War effect GainStats<GainStats>"} 

 Player 1 15:55:52 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"effectCollectedData":{"effectTargets":[306],"chainEffectsData":[],"methodArgs":[],"isPassive":true,"terminateOriginal":false,"effectCardOwner":306,"effectCardPlayer":306},"entityId":6,"creatorCardId":323,"hasLockingStackEffect":false,"cardActivatorId":1,"cardWithEffectId":306,"isAfterActivation":false,"index":1,"hasDataBeenCollectedYet":true,"stackEffectType":14}} 

 Player 1 15:55:52 $REMOVE_RESOLVING_STACK_EFFECT:  
{"stackEffectId":6} 

 Player 1 15:55:52 $SET_STACK_ICON:  
{"iconIndex":1} 

 Player 2 15:55:52 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Samson combat damage to War \n2:Activate War "} 

 Player 1 15:55:54 $SHOW_STACK_EFFECT:  
{"effectId":6} 

 Player 1 15:55:57 $REMOVE_SE_VIS_PREV:  
{"stackEffectId":6} 

 Player 1 15:55:57 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":46,"_text":"Remove After Resolve ActivatePassiveEffect 6  "}} 

 Player 1 15:55:57 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Samson combat damage to War"} 

 Player 1 15:55:57 $REMOVE_FROM_STACK:  
{"stackEffect":{"effectCollectedData":{"effectTargets":[306],"chainEffectsData":[],"methodArgs":[],"isPassive":true,"terminateOriginal":false,"effectCardOwner":306,"effectCardPlayer":306},"entityId":6,"creatorCardId":323,"hasLockingStackEffect":false,"cardActivatorId":1,"cardWithEffectId":306,"isAfterActivation":false,"index":1,"hasDataBeenCollectedYet":true,"stackEffectType":14}} 

 Player 1 15:55:57 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":47,"_text":"Response Remove After Resolve ActivatePassiveEffect 6"},"childOfId":46} 

 Player 1 15:55:57 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":48,"_text":"Wait For Response From Player 1 "},"childOfId":46} 

 Player 1 15:55:57 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 15:55:57 $ACTION_MASSAGE_REMOVE:  
{"id":48} 

 Player 1 15:55:57 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":49,"_text":"Wait For Response From Player 2 "},"childOfId":46} 

 Player 1 15:55:57 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 15:55:57 $GET_REACTION:  
{"playerId":2,"activePlayerId":1} 

 Player 2 15:55:57 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Samson combat damage to War \n2:Activate War "} 

 Player 2 15:55:57 $HIDE_REACTIONS:  
{"playerId":2,"cardsIds":[319,320]} 

 Player 2 15:55:57 $RESPOND_TO:  
{"playerId":1,"stackEffectResponse":false} 

 Player 1 15:55:57 $ACTION_MASSAGE_REMOVE:  
{"id":49} 

 Player 1 15:55:57 $ACTION_MASSAGE_REMOVE:  
{"id":47} 

 Player 1 15:55:57 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":50,"_text":"Resolve CombatDamage 5 "}} 

 Player 1 15:55:57 $MONSTER_GET_DAMAGED:  
{"cardId":306,"hpLeft":2,"damageDealerId":323} 

 Player 1 15:55:57 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"MONSTER_GET_HIT","args":[{"type":2,"number":1},{"type":0,"number":323},{"type":2}],"result":null,"preventMethod":false,"methodScopeId":306,"scopeIsPlayer":false,"index":1,"originStackId":-1},"isAfterActivation":true,"index":1} 

 Player 1 15:55:57 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"PLAYER_COMBAT_DAMAGE_GIVEN","args":[{"type":2,"number":1},{"type":2,"number":4},{"type":0,"number":323},{"type":0,"number":306}],"result":null,"preventMethod":false,"methodScopeId":323,"scopeIsPlayer":true,"index":3,"originStackId":5},"isAfterActivation":true,"index":3} 

 Player 1 15:55:57 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Samson combat damage to War"} 

 Player 1 15:55:57 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":5,"creatorCardId":323,"entityToDoDamageCardId":323,"entityToTakeDamageCardId":306,"isMonsterDoDamage":false,"isMonsterTakeDamage":true,"isPlayerDoDamage":false,"stackEffectType":3,"numberRolled":4}} 

 Player 1 15:55:57 $REMOVE_RESOLVING_STACK_EFFECT:  
{"stackEffectId":5} 

 Player 1 15:55:57 $SET_STACK_ICON:  
{"iconIndex":1} 

 Player 1 15:56:02 $SHOW_STACK_EFFECT:  
{"effectId":5} 

 Player 1 15:56:05 $REMOVE_SE_VIS_PREV:  
{"stackEffectId":5} 

 Player 1 15:56:05 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":51,"_text":"Remove After Resolve CombatDamage 5  "}} 

 Player 1 15:56:05 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 15:56:05 $REMOVE_FROM_STACK:  
{"stackEffect":{"entityId":5,"creatorCardId":323,"entityToDoDamageCardId":323,"entityToTakeDamageCardId":306,"isMonsterDoDamage":false,"isMonsterTakeDamage":true,"isPlayerDoDamage":false,"stackEffectType":3,"numberRolled":4}} 

 Player 1 15:56:05 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":52,"_text":"Response Remove After Resolve CombatDamage 5"},"childOfId":51} 

 Player 1 15:56:05 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":53,"_text":"Wait For Response From Player 2 "},"childOfId":51} 

 Player 1 15:56:05 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 15:56:05 $GET_REACTION:  
{"playerId":2,"activePlayerId":1} 

 Player 2 15:56:05 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Samson combat damage to War"} 

 Player 2 15:56:05 $HIDE_REACTIONS:  
{"playerId":2,"cardsIds":[319,320]} 

 Player 2 15:56:05 $RESPOND_TO:  
{"playerId":1,"stackEffectResponse":false} 

 Player 1 15:56:05 $ACTION_MASSAGE_REMOVE:  
{"id":53} 

 Player 1 15:56:05 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":54,"_text":"Wait For Response From Player 1 "},"childOfId":51} 

 Player 1 15:56:05 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 15:56:05 $ACTION_MASSAGE_REMOVE:  
{"id":54} 

 Player 1 15:56:05 $ACTION_MASSAGE_REMOVE:  
{"id":52} 

 Player 1 15:56:05 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":55,"_text":"Stack Was Emptied "}} 

 Player 1 15:56:05 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 15:56:05 $CLEAR_SE_VIS:  

 Player 1 15:56:10 $NEXT_STACK_ID:  

 Player 1 15:56:10 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against War<Monster>"} 

 Player 1 15:56:10 $ADD_TO_STACK:  
{"stackEffect":{"entityId":7,"creatorCardId":323,"rollingPlayerCardId":323,"stackEffectType":2,"attackedMonsterCardId":306}} 

 Player 1 15:56:10 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":7,"creatorCardId":323,"rollingPlayerCardId":323,"stackEffectType":2,"attackedMonsterCardId":306}} 

 Player 1 15:56:10 $SET_STACK_ICON:  
{"iconIndex":0} 

 Player 2 15:56:10 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 15:56:10 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against War<Monster>"} 

 Player 1 15:56:12 $SHOW_STACK_EFFECT:  
{"effectId":7} 

 Player 1 15:56:15 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":56,"_text":"Add AttackRoll 7 "}} 

 Player 1 15:56:15 $ROLL_DICE:  
{"playerId":1} 

 Player 1 15:56:16 $ROLL_DICE_ENDED:  
{"playerId":1,"numberRolled":5} 

 Player 1 15:56:16 $UPDATE_STACK_VIS:  
{"stackId":7,"text":"player rolled 5 vs War<Monster>"} 

 Player 1 15:56:16 $SHOW_DICE_ROLL:  
{"stackId":7} 

 Player 1 15:56:19 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 rolled 5 vs War<Monster>"} 

 Player 1 15:56:19 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 15:56:19 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":7,"creatorCardId":323,"numberRolled":5,"rollingPlayerCardId":323,"stackEffectType":2,"attackedMonsterCardId":306}} 

 Player 1 15:56:19 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":57,"_text":"Response Adding AttackRoll 7"},"childOfId":56} 

 Player 1 15:56:19 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":58,"_text":"Wait For Response From Player 1 "},"childOfId":56} 

 Player 1 15:56:19 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 15:56:19 $ACTION_MASSAGE_REMOVE:  
{"id":58} 

 Player 1 15:56:19 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":59,"_text":"Wait For Response From Player 2 "},"childOfId":56} 

 Player 1 15:56:19 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 15:56:19 $GET_REACTION:  
{"playerId":2,"activePlayerId":1} 

 Player 2 15:56:19 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against War<Monster>"} 

 Player 2 15:56:19 $HIDE_REACTIONS:  
{"playerId":2,"cardsIds":[319,320]} 

 Player 2 15:56:19 $RESPOND_TO:  
{"playerId":1,"stackEffectResponse":false} 

 Player 1 15:56:19 $ACTION_MASSAGE_REMOVE:  
{"id":59} 

 Player 1 15:56:19 $ACTION_MASSAGE_REMOVE:  
{"id":57} 

 Player 1 15:56:19 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":60,"_text":"Resolve AttackRoll 7 "}} 

 Player 1 15:56:19 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 rolled 5 vs War<Monster>"} 

 Player 1 15:56:19 $ADD_RESOLVING_STACK_EFFECT:  
{"stackEffect":{"entityId":7,"creatorCardId":323,"numberRolled":5,"rollingPlayerCardId":323,"stackEffectType":2,"attackedMonsterCardId":306}} 

 Player 1 15:56:19 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":61,"_text":"Added 0 to original roll"}} 

 Player 1 15:56:19 $NEXT_STACK_ID:  

 Player 2 15:56:19 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against War<Monster>"} 

 Player 1 15:56:30 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 15:56:31 $SET_STACK_ICON:  
{"iconIndex":0} 

 Player 1 15:57:36 $SHOW_STACK_EFFECT:  
{"effectId":8} 

 Player 2 15:57:36 $LOG_ERROR:  
"no stack effect to show" 
//////Error From Player 2////
  

 Player 2 15:57:36 $LOG_ERROR:  
//////Error From Player 2////
 [object Object]
////// 

 Player 2 15:57:36 $SHOW_ANNOUNCEMENT:  
{"text":"no stack effect to show"} 

 Player 1 15:57:54 $CLEAR_SE_VIS:  

 Player 1 15:57:54 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Samson combat damage to War \n2:Player 1 rolled 5 vs War<Monster>"} 

 Player 1 15:57:54 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":8,"creatorCardId":323,"entityToDoDamageCardId":323,"entityToTakeDamageCardId":306,"isMonsterDoDamage":false,"isMonsterTakeDamage":true,"isPlayerDoDamage":false,"stackEffectType":3,"numberRolled":5}} 

 Player 1 15:57:54 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":7,"creatorCardId":323,"numberRolled":5,"rollingPlayerCardId":323,"stackEffectType":2,"attackedMonsterCardId":306}} 

 Player 1 15:57:54 $REPLACE_STACK:  
{"currentStack":[{"entityId":8,"creatorCardId":323,"entityToDoDamageCardId":323,"entityToTakeDamageCardId":306,"isMonsterDoDamage":false,"isMonsterTakeDamage":true,"isPlayerDoDamage":false,"stackEffectType":3,"numberRolled":5},{"entityId":7,"creatorCardId":323,"numberRolled":5,"rollingPlayerCardId":323,"stackEffectType":2,"attackedMonsterCardId":306}]} 

 Player 1 15:57:55 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"PLAYER_ROLL_DICE","args":[{"type":2,"number":5},{"type":2,"number":1},{"type":2,"number":3}],"result":null,"preventMethod":false,"methodScopeId":323,"scopeIsPlayer":true,"index":4,"originStackId":7},"isAfterActivation":true,"index":4} 

 Player 1 15:57:55 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":7,"creatorCardId":323,"numberRolled":5,"rollingPlayerCardId":323,"stackEffectType":2,"attackedMonsterCardId":306}} 

 Player 1 15:57:55 $REMOVE_RESOLVING_STACK_EFFECT:  
{"stackEffectId":7} 

 Player 1 15:57:55 $SET_STACK_ICON:  
{"iconIndex":1} 

 Player 2 15:57:55 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against War<Monster>"} 

 Player 2 15:57:55 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Samson combat damage to War \n2:Player 1 is rolling against War<Monster>"} 

 Player 1 15:57:55 $SHOW_STACK_EFFECT:  
{"effectId":7} 

 Player 1 15:57:58 $REMOVE_SE_VIS_PREV:  
{"stackEffectId":7} 

 Player 1 15:57:58 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":62,"_text":"Remove After Resolve AttackRoll 7  "}} 

 Player 1 15:57:58 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Samson combat damage to War"} 

 Player 1 15:57:58 $REMOVE_FROM_STACK:  
{"stackEffect":{"entityId":7,"creatorCardId":323,"numberRolled":5,"rollingPlayerCardId":323,"stackEffectType":2,"attackedMonsterCardId":306}} 

 Player 1 15:57:58 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":63,"_text":"Response Remove After Resolve AttackRoll 7"},"childOfId":62} 

 Player 1 15:57:58 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":64,"_text":"Wait For Response From Player 1 "},"childOfId":62} 

 Player 1 15:57:58 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 15:57:58 $ACTION_MASSAGE_REMOVE:  
{"id":64} 

 Player 1 15:57:59 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":65,"_text":"Wait For Response From Player 2 "},"childOfId":62} 

 Player 1 15:57:59 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 15:57:59 $GET_REACTION:  
{"playerId":2,"activePlayerId":1} 

 Player 2 15:57:59 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Samson combat damage to War \n2:Player 1 is rolling against War<Monster>"} 

 Player 2 15:57:59 $HIDE_REACTIONS:  
{"playerId":2,"cardsIds":[319,320]} 

 Player 2 15:57:59 $RESPOND_TO:  
{"playerId":1,"stackEffectResponse":false} 

 Player 1 15:57:59 $ACTION_MASSAGE_REMOVE:  
{"id":65} 

 Player 1 15:57:59 $ACTION_MASSAGE_REMOVE:  
{"id":63} 

 Player 1 15:57:59 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":66,"_text":"Resolve CombatDamage 8 "}} 

 Player 1 15:57:59 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Samson combat damage to War"} 

 Player 1 15:57:59 $ADD_RESOLVING_STACK_EFFECT:  
{"stackEffect":{"entityId":8,"creatorCardId":323,"entityToDoDamageCardId":323,"entityToTakeDamageCardId":306,"isMonsterDoDamage":false,"isMonsterTakeDamage":true,"isPlayerDoDamage":false,"stackEffectType":3,"numberRolled":5}} 

 Player 1 15:57:59 $UPDATE_STACK_VIS:  
{"stackId":8,"text":"Samson will deal 1 combat damage to War"} 

 Player 1 15:57:59 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"MONSTER_GET_HIT","args":[{"type":2,"number":1},{"type":0,"number":323},{"type":2}],"result":null,"preventMethod":false,"methodScopeId":306,"scopeIsPlayer":false,"index":2,"originStackId":-1},"isAfterActivation":false,"index":2} 

 Player 1 15:57:59 $NEXT_STACK_ID:  

 Player 1 15:57:59 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Samson combat damage to War \n2:Activate War effect GainStats<GainStats>"} 

 Player 1 15:57:59 $ADD_TO_STACK:  
{"stackEffect":{"effectCollectedData":null,"entityId":9,"creatorCardId":323,"hasLockingStackEffect":false,"cardActivatorId":1,"cardWithEffectId":306,"effectToDo":{"effectName":"GainStats","cardEffectNum":0,"cardPlayerId":1,"cardId":306,"effctType":0},"isAfterActivation":false,"index":2,"hasDataBeenCollectedYet":false,"stackEffectType":14}} 

 Player 1 15:57:59 $ADD_SE_VIS_PREV:  
{"stackEffect":{"effectCollectedData":null,"entityId":9,"creatorCardId":323,"hasLockingStackEffect":false,"cardActivatorId":1,"cardWithEffectId":306,"effectToDo":{"effectName":"GainStats","cardEffectNum":0,"cardPlayerId":1,"cardId":306,"effctType":0},"isAfterActivation":false,"index":2,"hasDataBeenCollectedYet":false,"stackEffectType":14}} 

 Player 1 15:57:59 $SET_STACK_ICON:  
{"iconIndex":0} 

 Player 2 15:57:59 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Samson combat damage to War"} 

 Player 2 15:57:59 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Samson combat damage to War \n2:Activate War "} 

 Player 1 15:58:04 $SHOW_STACK_EFFECT:  
{"effectId":9} 

 Player 1 15:58:07 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":67,"_text":"Add ActivatePassiveEffect 9 "}} 

 Player 1 15:58:07 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Samson combat damage to War \n2:Activate War effect GainStats<GainStats>"} 

 Player 1 15:58:07 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"effectCollectedData":{"effectTargets":[306],"chainEffectsData":[],"methodArgs":[],"isPassive":true,"terminateOriginal":false,"effectCardOwner":306,"effectCardPlayer":306},"entityId":9,"creatorCardId":323,"hasLockingStackEffect":false,"cardActivatorId":1,"cardWithEffectId":306,"effectToDo":{"effectName":"GainStats","cardEffectNum":0,"cardPlayerId":1,"cardId":306,"effctType":0},"isAfterActivation":false,"index":2,"hasDataBeenCollectedYet":true,"stackEffectType":14}} 

 Player 1 15:58:07 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":68,"_text":"Response Adding ActivatePassiveEffect 9"},"childOfId":67} 

 Player 1 15:58:07 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":69,"_text":"Wait For Response From Player 2 "},"childOfId":67} 

 Player 1 15:58:07 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 15:58:07 $GET_REACTION:  
{"playerId":2,"activePlayerId":1} 

 Player 2 15:58:07 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Samson combat damage to War \n2:Activate War "} 

 Player 2 15:58:07 $HIDE_REACTIONS:  
{"playerId":2,"cardsIds":[319,320]} 

 Player 2 15:58:07 $RESPOND_TO:  
{"playerId":1,"stackEffectResponse":false} 

 Player 1 15:58:07 $ACTION_MASSAGE_REMOVE:  
{"id":69} 

 Player 1 15:58:07 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":70,"_text":"Wait For Response From Player 1 "},"childOfId":67} 

 Player 1 15:58:07 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 15:58:07 $ACTION_MASSAGE_REMOVE:  
{"id":70} 

 Player 1 15:58:08 $ACTION_MASSAGE_REMOVE:  
{"id":68} 

 Player 1 15:58:08 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":71,"_text":"Resolve ActivatePassiveEffect 9 "}} 

 Player 1 15:58:08 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Samson combat damage to War \n2:Activate War effect GainStats<GainStats>"} 

 Player 1 15:58:08 $ADD_RESOLVING_STACK_EFFECT:  
{"stackEffect":{"effectCollectedData":{"effectTargets":[306],"chainEffectsData":[],"methodArgs":[],"isPassive":true,"terminateOriginal":false,"effectCardOwner":306,"effectCardPlayer":306},"entityId":9,"creatorCardId":323,"hasLockingStackEffect":false,"cardActivatorId":1,"cardWithEffectId":306,"effectToDo":{"effectName":"GainStats","cardEffectNum":0,"cardPlayerId":1,"cardId":306,"effctType":0},"isAfterActivation":false,"index":2,"hasDataBeenCollectedYet":true,"stackEffectType":14}} 

 Player 1 15:58:08 $ACTIVATE_PARTICLE_EFFECT:  
{"cardId":306,"particleType":6} 

 Player 2 15:58:08 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Samson combat damage to War \n2:Activate War "} 

 Player 1 15:58:09 $DISABLE_PARTICLE_EFFECT:  
{"cardId":306,"particleType":6} 

 Player 1 15:58:09 $MONSTER_GAIN_DMG:  
{"cardId":306,"DMGToGain":1} 

 Player 1 15:58:09 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"MONSTER_GET_HIT","args":[{"type":2,"number":1},{"type":0,"number":323},{"type":2}],"result":null,"preventMethod":false,"methodScopeId":306,"scopeIsPlayer":false,"index":2,"originStackId":-1},"isAfterActivation":false,"index":2} 

 Player 1 15:58:10 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Samson combat damage to War \n2:Activate War effect GainStats<GainStats>"} 

 Player 1 15:58:10 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"effectCollectedData":{"effectTargets":[306],"chainEffectsData":[],"methodArgs":[],"isPassive":true,"terminateOriginal":false,"effectCardOwner":306,"effectCardPlayer":306},"entityId":9,"creatorCardId":323,"hasLockingStackEffect":false,"cardActivatorId":1,"cardWithEffectId":306,"isAfterActivation":false,"index":2,"hasDataBeenCollectedYet":true,"stackEffectType":14}} 

 Player 1 15:58:10 $REMOVE_RESOLVING_STACK_EFFECT:  
{"stackEffectId":9} 

 Player 1 15:58:10 $SET_STACK_ICON:  
{"iconIndex":1} 

 Player 1 15:58:10 $SHOW_STACK_EFFECT:  
{"effectId":9} 

 Player 2 15:58:10 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Samson combat damage to War \n2:Activate War "} 

 Player 1 15:58:12 $REMOVE_SE_VIS_PREV:  
{"stackEffectId":9} 

 Player 1 15:58:12 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":72,"_text":"Remove After Resolve ActivatePassiveEffect 9  "}} 

 Player 1 15:58:12 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Samson combat damage to War"} 

 Player 1 15:58:12 $REMOVE_FROM_STACK:  
{"stackEffect":{"effectCollectedData":{"effectTargets":[306],"chainEffectsData":[],"methodArgs":[],"isPassive":true,"terminateOriginal":false,"effectCardOwner":306,"effectCardPlayer":306},"entityId":9,"creatorCardId":323,"hasLockingStackEffect":false,"cardActivatorId":1,"cardWithEffectId":306,"isAfterActivation":false,"index":2,"hasDataBeenCollectedYet":true,"stackEffectType":14}} 

 Player 1 15:58:13 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":73,"_text":"Response Remove After Resolve ActivatePassiveEffect 9"},"childOfId":72} 

 Player 1 15:58:13 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":74,"_text":"Wait For Response From Player 1 "},"childOfId":72} 

 Player 1 15:58:13 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 15:58:13 $ACTION_MASSAGE_REMOVE:  
{"id":74} 

 Player 1 15:58:13 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":75,"_text":"Wait For Response From Player 2 "},"childOfId":72} 

 Player 1 15:58:13 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 15:58:13 $GET_REACTION:  
{"playerId":2,"activePlayerId":1} 

 Player 2 15:58:13 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Samson combat damage to War \n2:Activate War "} 

 Player 2 15:58:13 $HIDE_REACTIONS:  
{"playerId":2,"cardsIds":[319,320]} 

 Player 2 15:58:13 $RESPOND_TO:  
{"playerId":1,"stackEffectResponse":false} 

 Player 1 15:58:13 $ACTION_MASSAGE_REMOVE:  
{"id":75} 

 Player 1 15:58:13 $ACTION_MASSAGE_REMOVE:  
{"id":73} 

 Player 1 15:58:13 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":76,"_text":"Resolve CombatDamage 8 "}} 

 Player 1 15:58:13 $MONSTER_GET_DAMAGED:  
{"cardId":306,"hpLeft":1,"damageDealerId":323} 

 Player 1 15:58:13 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"MONSTER_GET_HIT","args":[{"type":2,"number":1},{"type":0,"number":323},{"type":2}],"result":null,"preventMethod":false,"methodScopeId":306,"scopeIsPlayer":false,"index":2,"originStackId":-1},"isAfterActivation":true,"index":2} 

 Player 1 15:58:13 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"PLAYER_COMBAT_DAMAGE_GIVEN","args":[{"type":2,"number":1},{"type":2,"number":5},{"type":0,"number":323},{"type":0,"number":306}],"result":null,"preventMethod":false,"methodScopeId":323,"scopeIsPlayer":true,"index":5,"originStackId":8},"isAfterActivation":true,"index":5} 

 Player 1 15:58:13 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Samson combat damage to War"} 

 Player 1 15:58:13 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":8,"creatorCardId":323,"entityToDoDamageCardId":323,"entityToTakeDamageCardId":306,"isMonsterDoDamage":false,"isMonsterTakeDamage":true,"isPlayerDoDamage":false,"stackEffectType":3,"numberRolled":5}} 

 Player 1 15:58:13 $REMOVE_RESOLVING_STACK_EFFECT:  
{"stackEffectId":8} 

 Player 1 15:58:13 $SET_STACK_ICON:  
{"iconIndex":1} 

 Player 1 15:58:13 $SHOW_STACK_EFFECT:  
{"effectId":8} 

 Player 1 15:58:16 $REMOVE_SE_VIS_PREV:  
{"stackEffectId":8} 

 Player 1 15:58:16 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":77,"_text":"Remove After Resolve CombatDamage 8  "}} 

 Player 1 15:58:16 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 15:58:16 $REMOVE_FROM_STACK:  
{"stackEffect":{"entityId":8,"creatorCardId":323,"entityToDoDamageCardId":323,"entityToTakeDamageCardId":306,"isMonsterDoDamage":false,"isMonsterTakeDamage":true,"isPlayerDoDamage":false,"stackEffectType":3,"numberRolled":5}} 

 Player 1 15:58:16 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":78,"_text":"Response Remove After Resolve CombatDamage 8"},"childOfId":77} 

 Player 1 15:58:16 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":79,"_text":"Wait For Response From Player 2 "},"childOfId":77} 

 Player 1 15:58:16 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 15:58:16 $GET_REACTION:  
{"playerId":2,"activePlayerId":1} 

 Player 2 15:58:16 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Samson combat damage to War"} 

 Player 2 15:58:16 $HIDE_REACTIONS:  
{"playerId":2,"cardsIds":[319,320]} 

 Player 2 15:58:16 $RESPOND_TO:  
{"playerId":1,"stackEffectResponse":false} 

 Player 1 15:58:16 $ACTION_MASSAGE_REMOVE:  
{"id":79} 

 Player 1 15:58:16 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":80,"_text":"Wait For Response From Player 1 "},"childOfId":77} 

 Player 1 15:58:16 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 15:58:16 $ACTION_MASSAGE_REMOVE:  
{"id":80} 

 Player 1 15:58:16 $ACTION_MASSAGE_REMOVE:  
{"id":78} 

 Player 1 15:58:16 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":81,"_text":"Stack Was Emptied "}} 

 Player 1 15:58:16 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 15:58:16 $CLEAR_SE_VIS:  

 Player 1 15:58:16 $NEXT_STACK_ID:  

 Player 1 15:58:16 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against War<Monster>"} 

 Player 1 15:58:16 $ADD_TO_STACK:  
{"stackEffect":{"entityId":10,"creatorCardId":323,"rollingPlayerCardId":323,"stackEffectType":2,"attackedMonsterCardId":306}} 

 Player 1 15:58:16 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":10,"creatorCardId":323,"rollingPlayerCardId":323,"stackEffectType":2,"attackedMonsterCardId":306}} 

 Player 1 15:58:17 $SET_STACK_ICON:  
{"iconIndex":0} 

 Player 1 15:58:17 $SHOW_STACK_EFFECT:  
{"effectId":10} 

 Player 2 15:58:17 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 15:58:17 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against War<Monster>"} 

 Player 1 15:58:19 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":82,"_text":"Add AttackRoll 10 "}} 

 Player 1 15:58:19 $ROLL_DICE:  
{"playerId":1} 

 Player 1 15:58:21 $ROLL_DICE_ENDED:  
{"playerId":1,"numberRolled":3} 

 Player 1 15:58:21 $UPDATE_STACK_VIS:  
{"stackId":10,"text":"player rolled 3 vs War<Monster>"} 

 Player 1 15:58:21 $SHOW_DICE_ROLL:  
{"stackId":10} 

 Player 1 15:58:24 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 rolled 3 vs War<Monster>"} 

 Player 1 15:58:24 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 15:58:24 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":10,"creatorCardId":323,"numberRolled":3,"rollingPlayerCardId":323,"stackEffectType":2,"attackedMonsterCardId":306}} 

 Player 1 15:58:24 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":83,"_text":"Response Adding AttackRoll 10"},"childOfId":82} 

 Player 1 15:58:24 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":84,"_text":"Wait For Response From Player 1 "},"childOfId":82} 

 Player 1 15:58:24 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 15:58:24 $ACTION_MASSAGE_REMOVE:  
{"id":84} 

 Player 1 15:58:24 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":85,"_text":"Wait For Response From Player 2 "},"childOfId":82} 

 Player 1 15:58:24 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 15:58:24 $GET_REACTION:  
{"playerId":2,"activePlayerId":1} 

 Player 2 15:58:24 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against War<Monster>"} 

 Player 2 15:58:24 $HIDE_REACTIONS:  
{"playerId":2,"cardsIds":[319,320]} 

 Player 2 15:58:24 $RESPOND_TO:  
{"playerId":1,"stackEffectResponse":false} 

 Player 1 15:58:24 $ACTION_MASSAGE_REMOVE:  
{"id":85} 

 Player 1 15:58:24 $ACTION_MASSAGE_REMOVE:  
{"id":83} 

 Player 1 15:58:25 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":86,"_text":"Resolve AttackRoll 10 "}} 

 Player 1 15:58:25 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 rolled 3 vs War<Monster>"} 

 Player 1 15:58:25 $ADD_RESOLVING_STACK_EFFECT:  
{"stackEffect":{"entityId":10,"creatorCardId":323,"numberRolled":3,"rollingPlayerCardId":323,"stackEffectType":2,"attackedMonsterCardId":306}} 

 Player 1 15:58:25 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":87,"_text":"Added 0 to original roll"}} 

 Player 1 15:58:25 $NEXT_STACK_ID:  

 Player 1 15:58:25 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 15:58:25 $SET_STACK_ICON:  
{"iconIndex":0} 

 Player 1 15:58:25 $SHOW_STACK_EFFECT:  
{"effectId":11} 

 Player 2 15:58:25 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against War<Monster>"} 

 Player 2 15:58:25 $LOG_ERROR:  
"no stack effect to show" 
//////Error From Player 2////
  

 Player 2 15:58:25 $LOG_ERROR:  
//////Error From Player 2////
 [object Object]
////// 

 Player 2 15:58:25 $SHOW_ANNOUNCEMENT:  
{"text":"no stack effect to show"} 

 Player 1 15:58:27 $CLEAR_SE_VIS:  

 Player 1 15:58:27 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Samson combat damage to War \n2:Player 1 rolled 3 vs War<Monster>"} 

 Player 1 15:58:28 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":11,"creatorCardId":323,"entityToDoDamageCardId":323,"entityToTakeDamageCardId":306,"isMonsterDoDamage":false,"isMonsterTakeDamage":true,"isPlayerDoDamage":false,"stackEffectType":3,"numberRolled":3}} 

 Player 1 15:58:28 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":10,"creatorCardId":323,"numberRolled":3,"rollingPlayerCardId":323,"stackEffectType":2,"attackedMonsterCardId":306}} 

 Player 1 15:58:28 $REPLACE_STACK:  
{"currentStack":[{"entityId":11,"creatorCardId":323,"entityToDoDamageCardId":323,"entityToTakeDamageCardId":306,"isMonsterDoDamage":false,"isMonsterTakeDamage":true,"isPlayerDoDamage":false,"stackEffectType":3,"numberRolled":3},{"entityId":10,"creatorCardId":323,"numberRolled":3,"rollingPlayerCardId":323,"stackEffectType":2,"attackedMonsterCardId":306}]} 

 Player 1 15:58:28 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"PLAYER_ROLL_DICE","args":[{"type":2,"number":3},{"type":2,"number":1},{"type":2,"number":3}],"result":null,"preventMethod":false,"methodScopeId":323,"scopeIsPlayer":true,"index":6,"originStackId":10},"isAfterActivation":true,"index":6} 

 Player 1 15:58:28 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":10,"creatorCardId":323,"numberRolled":3,"rollingPlayerCardId":323,"stackEffectType":2,"attackedMonsterCardId":306}} 

 Player 1 15:58:28 $REMOVE_RESOLVING_STACK_EFFECT:  
{"stackEffectId":10} 

 Player 1 15:58:28 $SET_STACK_ICON:  
{"iconIndex":1} 

 Player 1 15:58:28 $SHOW_STACK_EFFECT:  
{"effectId":10} 

 Player 2 15:58:28 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 is rolling against War<Monster>"} 

 Player 2 15:58:28 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Samson combat damage to War \n2:Player 1 is rolling against War<Monster>"} 

 Player 1 15:58:30 $REMOVE_SE_VIS_PREV:  
{"stackEffectId":10} 

 Player 1 15:58:31 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":88,"_text":"Remove After Resolve AttackRoll 10  "}} 

 Player 1 15:58:31 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Samson combat damage to War"} 

 Player 1 15:58:31 $REMOVE_FROM_STACK:  
{"stackEffect":{"entityId":10,"creatorCardId":323,"numberRolled":3,"rollingPlayerCardId":323,"stackEffectType":2,"attackedMonsterCardId":306}} 

 Player 1 15:58:31 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":89,"_text":"Response Remove After Resolve AttackRoll 10"},"childOfId":88} 

 Player 1 15:58:31 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":90,"_text":"Wait For Response From Player 1 "},"childOfId":88} 

 Player 1 15:58:31 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 15:58:31 $ACTION_MASSAGE_REMOVE:  
{"id":90} 

 Player 1 15:58:31 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":91,"_text":"Wait For Response From Player 2 "},"childOfId":88} 

 Player 1 15:58:31 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 15:58:31 $GET_REACTION:  
{"playerId":2,"activePlayerId":1} 

 Player 2 15:58:31 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Samson combat damage to War \n2:Player 1 is rolling against War<Monster>"} 

 Player 2 15:58:31 $HIDE_REACTIONS:  
{"playerId":2,"cardsIds":[319,320]} 

 Player 2 15:58:31 $RESPOND_TO:  
{"playerId":1,"stackEffectResponse":false} 

 Player 1 15:58:31 $ACTION_MASSAGE_REMOVE:  
{"id":91} 

 Player 1 15:58:31 $ACTION_MASSAGE_REMOVE:  
{"id":89} 

 Player 1 15:58:31 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":92,"_text":"Resolve CombatDamage 11 "}} 

 Player 1 15:58:31 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Samson combat damage to War"} 

 Player 1 15:58:31 $ADD_RESOLVING_STACK_EFFECT:  
{"stackEffect":{"entityId":11,"creatorCardId":323,"entityToDoDamageCardId":323,"entityToTakeDamageCardId":306,"isMonsterDoDamage":false,"isMonsterTakeDamage":true,"isPlayerDoDamage":false,"stackEffectType":3,"numberRolled":3}} 

 Player 1 15:58:31 $UPDATE_STACK_VIS:  
{"stackId":11,"text":"Samson will deal 1 combat damage to War"} 

 Player 1 15:58:31 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"MONSTER_GET_HIT","args":[{"type":2,"number":1},{"type":0,"number":323},{"type":2}],"result":null,"preventMethod":false,"methodScopeId":306,"scopeIsPlayer":false,"index":3,"originStackId":-1},"isAfterActivation":false,"index":3} 

 Player 1 15:58:31 $NEXT_STACK_ID:  

 Player 1 15:58:31 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Samson combat damage to War \n2:Activate War effect GainStats<GainStats>"} 

 Player 1 15:58:31 $ADD_TO_STACK:  
{"stackEffect":{"effectCollectedData":null,"entityId":12,"creatorCardId":323,"hasLockingStackEffect":false,"cardActivatorId":1,"cardWithEffectId":306,"effectToDo":{"effectName":"GainStats","cardEffectNum":0,"cardPlayerId":1,"cardId":306,"effctType":0},"isAfterActivation":false,"index":3,"hasDataBeenCollectedYet":false,"stackEffectType":14}} 

 Player 1 15:58:31 $ADD_SE_VIS_PREV:  
{"stackEffect":{"effectCollectedData":null,"entityId":12,"creatorCardId":323,"hasLockingStackEffect":false,"cardActivatorId":1,"cardWithEffectId":306,"effectToDo":{"effectName":"GainStats","cardEffectNum":0,"cardPlayerId":1,"cardId":306,"effctType":0},"isAfterActivation":false,"index":3,"hasDataBeenCollectedYet":false,"stackEffectType":14}} 

 Player 1 15:58:31 $SET_STACK_ICON:  
{"iconIndex":0} 

 Player 1 15:58:32 $SHOW_STACK_EFFECT:  
{"effectId":12} 

 Player 2 15:58:32 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Samson combat damage to War"} 

 Player 2 15:58:32 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Samson combat damage to War \n2:Activate War "} 

 Player 1 15:58:34 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":93,"_text":"Add ActivatePassiveEffect 12 "}} 

 Player 1 15:58:34 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Samson combat damage to War \n2:Activate War effect GainStats<GainStats>"} 

 Player 1 15:58:34 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"effectCollectedData":{"effectTargets":[306],"chainEffectsData":[],"methodArgs":[],"isPassive":true,"terminateOriginal":false,"effectCardOwner":306,"effectCardPlayer":306},"entityId":12,"creatorCardId":323,"hasLockingStackEffect":false,"cardActivatorId":1,"cardWithEffectId":306,"effectToDo":{"effectName":"GainStats","cardEffectNum":0,"cardPlayerId":1,"cardId":306,"effctType":0},"isAfterActivation":false,"index":3,"hasDataBeenCollectedYet":true,"stackEffectType":14}} 

 Player 1 15:58:34 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":94,"_text":"Response Adding ActivatePassiveEffect 12"},"childOfId":93} 

 Player 1 15:58:34 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":95,"_text":"Wait For Response From Player 2 "},"childOfId":93} 

 Player 1 15:58:34 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 15:58:34 $GET_REACTION:  
{"playerId":2,"activePlayerId":1} 

 Player 2 15:58:34 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Samson combat damage to War \n2:Activate War "} 

 Player 2 15:58:34 $HIDE_REACTIONS:  
{"playerId":2,"cardsIds":[319,320]} 

 Player 2 15:58:34 $RESPOND_TO:  
{"playerId":1,"stackEffectResponse":false} 

 Player 1 15:58:34 $ACTION_MASSAGE_REMOVE:  
{"id":95} 

 Player 1 15:58:34 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":96,"_text":"Wait For Response From Player 1 "},"childOfId":93} 

 Player 1 15:58:35 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 15:58:35 $ACTION_MASSAGE_REMOVE:  
{"id":96} 

 Player 1 15:58:35 $ACTION_MASSAGE_REMOVE:  
{"id":94} 

 Player 1 15:58:35 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":97,"_text":"Resolve ActivatePassiveEffect 12 "}} 

 Player 1 15:58:35 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Samson combat damage to War \n2:Activate War effect GainStats<GainStats>"} 

 Player 1 15:58:35 $ADD_RESOLVING_STACK_EFFECT:  
{"stackEffect":{"effectCollectedData":{"effectTargets":[306],"chainEffectsData":[],"methodArgs":[],"isPassive":true,"terminateOriginal":false,"effectCardOwner":306,"effectCardPlayer":306},"entityId":12,"creatorCardId":323,"hasLockingStackEffect":false,"cardActivatorId":1,"cardWithEffectId":306,"effectToDo":{"effectName":"GainStats","cardEffectNum":0,"cardPlayerId":1,"cardId":306,"effctType":0},"isAfterActivation":false,"index":3,"hasDataBeenCollectedYet":true,"stackEffectType":14}} 

 Player 1 15:58:35 $ACTIVATE_PARTICLE_EFFECT:  
{"cardId":306,"particleType":6} 

 Player 2 15:58:35 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Samson combat damage to War \n2:Activate War "} 

 Player 1 15:58:36 $DISABLE_PARTICLE_EFFECT:  
{"cardId":306,"particleType":6} 

 Player 1 15:58:37 $MONSTER_GAIN_DMG:  
{"cardId":306,"DMGToGain":1} 

 Player 1 15:58:37 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"MONSTER_GET_HIT","args":[{"type":2,"number":1},{"type":0,"number":323},{"type":2}],"result":null,"preventMethod":false,"methodScopeId":306,"scopeIsPlayer":false,"index":3,"originStackId":-1},"isAfterActivation":false,"index":3} 

 Player 1 15:58:37 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Samson combat damage to War \n2:Activate War effect GainStats<GainStats>"} 

 Player 1 15:58:37 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"effectCollectedData":{"effectTargets":[306],"chainEffectsData":[],"methodArgs":[],"isPassive":true,"terminateOriginal":false,"effectCardOwner":306,"effectCardPlayer":306},"entityId":12,"creatorCardId":323,"hasLockingStackEffect":false,"cardActivatorId":1,"cardWithEffectId":306,"isAfterActivation":false,"index":3,"hasDataBeenCollectedYet":true,"stackEffectType":14}} 

 Player 1 15:58:37 $REMOVE_RESOLVING_STACK_EFFECT:  
{"stackEffectId":12} 

 Player 1 15:58:37 $SET_STACK_ICON:  
{"iconIndex":1} 

 Player 1 15:58:37 $SHOW_STACK_EFFECT:  
{"effectId":12} 

 Player 2 15:58:37 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Samson combat damage to War \n2:Activate War "} 

 Player 1 15:58:39 $REMOVE_SE_VIS_PREV:  
{"stackEffectId":12} 

 Player 1 15:58:40 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":98,"_text":"Remove After Resolve ActivatePassiveEffect 12  "}} 

 Player 1 15:58:40 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Samson combat damage to War"} 

 Player 1 15:58:40 $REMOVE_FROM_STACK:  
{"stackEffect":{"effectCollectedData":{"effectTargets":[306],"chainEffectsData":[],"methodArgs":[],"isPassive":true,"terminateOriginal":false,"effectCardOwner":306,"effectCardPlayer":306},"entityId":12,"creatorCardId":323,"hasLockingStackEffect":false,"cardActivatorId":1,"cardWithEffectId":306,"isAfterActivation":false,"index":3,"hasDataBeenCollectedYet":true,"stackEffectType":14}} 

 Player 1 15:58:40 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":99,"_text":"Response Remove After Resolve ActivatePassiveEffect 12"},"childOfId":98} 

 Player 1 15:58:40 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":100,"_text":"Wait For Response From Player 1 "},"childOfId":98} 

 Player 1 15:58:40 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 15:58:40 $ACTION_MASSAGE_REMOVE:  
{"id":100} 

 Player 1 15:58:40 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":101,"_text":"Wait For Response From Player 2 "},"childOfId":98} 

 Player 1 15:58:40 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 15:58:40 $GET_REACTION:  
{"playerId":2,"activePlayerId":1} 

 Player 2 15:58:40 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Samson combat damage to War \n2:Activate War "} 

 Player 2 15:58:40 $HIDE_REACTIONS:  
{"playerId":2,"cardsIds":[319,320]} 

 Player 2 15:58:40 $RESPOND_TO:  
{"playerId":1,"stackEffectResponse":false} 

 Player 1 15:58:40 $ACTION_MASSAGE_REMOVE:  
{"id":101} 

 Player 1 15:58:40 $ACTION_MASSAGE_REMOVE:  
{"id":99} 

 Player 1 15:58:40 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":102,"_text":"Resolve CombatDamage 11 "}} 

 Player 1 15:58:40 $MONSTER_GET_DAMAGED:  
{"cardId":306,"hpLeft":0,"damageDealerId":323} 

 Player 1 15:58:40 $NEXT_STACK_ID:  

 Player 1 15:58:40 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Samson combat damage to War"} 

 Player 1 15:58:40 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Samson combat damage to War \n2:[object Object] killed by Samson"} 

 Player 1 15:58:40 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":13,"creatorCardId":323,"monsterToDieCardId":306,"stackEffectType":5,"killerId":323}} 

 Player 1 15:58:40 $SET_STACK_ICON:  
{"iconIndex":0} 

 Player 1 15:58:40 $SHOW_STACK_EFFECT:  
{"effectId":13} 

 Player 2 15:58:40 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Samson combat damage to War"} 

 Player 2 15:58:40 $LOG_ERROR:  
"no stack effect to show" 
//////Error From Player 2////
  

 Player 2 15:58:40 $LOG_ERROR:  
//////Error From Player 2////
 [object Object]
////// 

 Player 2 15:58:40 $SHOW_ANNOUNCEMENT:  
{"text":"no stack effect to show"} 

 Player 1 15:58:43 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 15:58:43 $CLEAR_SE_VIS:  

 Player 1 15:58:43 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Samson combat damage to War \n2:[object Object] killed by Samson"} 

 Player 1 15:58:43 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":11,"creatorCardId":323,"entityToDoDamageCardId":323,"entityToTakeDamageCardId":306,"isMonsterDoDamage":false,"isMonsterTakeDamage":true,"isPlayerDoDamage":false,"stackEffectType":3,"numberRolled":3}} 

 Player 1 15:58:43 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":13,"creatorCardId":323,"monsterToDieCardId":306,"stackEffectType":5,"killerId":323}} 

 Player 1 15:58:43 $REPLACE_STACK:  
{"currentStack":[{"entityId":11,"creatorCardId":323,"entityToDoDamageCardId":323,"entityToTakeDamageCardId":306,"isMonsterDoDamage":false,"isMonsterTakeDamage":true,"isPlayerDoDamage":false,"stackEffectType":3,"numberRolled":3},{"entityId":13,"creatorCardId":323,"monsterToDieCardId":306,"stackEffectType":5,"killerId":323}]} 

 Player 1 15:58:43 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"MONSTER_GET_HIT","args":[{"type":2,"number":1},{"type":0,"number":323},{"type":2}],"result":null,"preventMethod":false,"methodScopeId":306,"scopeIsPlayer":false,"index":3,"originStackId":-1},"isAfterActivation":true,"index":3} 

 Player 1 15:58:43 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"PLAYER_COMBAT_DAMAGE_GIVEN","args":[{"type":2,"number":1},{"type":2,"number":3},{"type":0,"number":323},{"type":0,"number":306}],"result":null,"preventMethod":false,"methodScopeId":323,"scopeIsPlayer":true,"index":7,"originStackId":11},"isAfterActivation":true,"index":7} 

 Player 1 15:58:43 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":11,"creatorCardId":323,"entityToDoDamageCardId":323,"entityToTakeDamageCardId":306,"isMonsterDoDamage":false,"isMonsterTakeDamage":true,"isPlayerDoDamage":false,"stackEffectType":3,"numberRolled":3}} 

 Player 1 15:58:43 $REMOVE_RESOLVING_STACK_EFFECT:  
{"stackEffectId":11} 

 Player 1 15:58:43 $SET_STACK_ICON:  
{"iconIndex":1} 

 Player 1 15:58:43 $SHOW_STACK_EFFECT:  
{"effectId":11} 

 Player 2 15:58:44 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Samson combat damage to War"} 

 Player 2 15:58:44 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Samson combat damage to War \n2:[object Object] killed by Samson"} 

 Player 1 15:58:46 $REMOVE_SE_VIS_PREV:  
{"stackEffectId":11} 

 Player 1 15:58:46 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":103,"_text":"Remove After Resolve CombatDamage 11  "}} 

 Player 1 15:58:46 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:[object Object] killed by Samson"} 

 Player 1 15:58:46 $REMOVE_FROM_STACK:  
{"stackEffect":{"entityId":11,"creatorCardId":323,"entityToDoDamageCardId":323,"entityToTakeDamageCardId":306,"isMonsterDoDamage":false,"isMonsterTakeDamage":true,"isPlayerDoDamage":false,"stackEffectType":3,"numberRolled":3}} 

 Player 1 15:58:46 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":104,"_text":"Response Remove After Resolve CombatDamage 11"},"childOfId":103} 

 Player 1 15:58:46 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":105,"_text":"Wait For Response From Player 1 "},"childOfId":103} 

 Player 1 15:58:46 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 15:58:46 $ACTION_MASSAGE_REMOVE:  
{"id":105} 

 Player 1 15:58:46 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":106,"_text":"Wait For Response From Player 2 "},"childOfId":103} 

 Player 1 15:58:46 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 15:58:46 $GET_REACTION:  
{"playerId":2,"activePlayerId":1} 

 Player 2 15:58:47 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Samson combat damage to War \n2:[object Object] killed by Samson"} 

 Player 2 15:58:47 $HIDE_REACTIONS:  
{"playerId":2,"cardsIds":[319,320]} 

 Player 2 15:58:47 $RESPOND_TO:  
{"playerId":1,"stackEffectResponse":false} 

 Player 1 15:58:47 $ACTION_MASSAGE_REMOVE:  
{"id":106} 

 Player 1 15:58:47 $ACTION_MASSAGE_REMOVE:  
{"id":104} 

 Player 1 15:58:47 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":107,"_text":"Resolve MonsterDeath 13 "}} 

 Player 1 15:58:47 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:[object Object] killed by Samson"} 

 Player 1 15:58:47 $ADD_RESOLVING_STACK_EFFECT:  
{"stackEffect":{"entityId":13,"creatorCardId":323,"monsterToDieCardId":306,"stackEffectType":5,"killerId":323}} 

 Player 1 15:58:47 $DISABLE_PARTICLE_EFFECT:  
{"cardId":306,"particleType":5} 

 Player 1 15:58:47 $CANCEL_ATTACK:  

 Player 1 15:58:47 $NEXT_STACK_ID:  

 Player 1 15:58:47 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 15:58:47 $SET_STACK_ICON:  
{"iconIndex":0} 

 Player 1 15:58:47 $SHOW_STACK_EFFECT:  
{"effectId":14} 

 Player 2 15:58:47 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Samson combat damage to War"} 

 Player 2 15:58:47 $LOG_ERROR:  
"no stack effect to show" 
//////Error From Player 2////
  

 Player 2 15:58:47 $LOG_ERROR:  
//////Error From Player 2////
 [object Object]
////// 

 Player 2 15:58:47 $SHOW_ANNOUNCEMENT:  
{"text":"no stack effect to show"} 

 Player 1 15:58:50 $CLEAR_SE_VIS:  

 Player 1 15:58:50 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 get War<Monster> reward \n2:[object Object] killed by Samson"} 

 Player 1 15:58:50 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":14,"creatorCardId":323,"monsterCardWithRewardId":306,"playerCardIdToReward":323,"stackEffectType":7}} 

 Player 1 15:58:50 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":13,"creatorCardId":323,"monsterToDieCardId":306,"stackEffectType":5,"killerId":323}} 

 Player 1 15:58:50 $REPLACE_STACK:  
{"currentStack":[{"entityId":14,"creatorCardId":323,"monsterCardWithRewardId":306,"playerCardIdToReward":323,"stackEffectType":7},{"entityId":13,"creatorCardId":323,"monsterToDieCardId":306,"stackEffectType":5,"killerId":323}]} 

 Player 1 15:58:50 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":13,"creatorCardId":323,"monsterToDieCardId":306,"stackEffectType":5,"killerId":323}} 

 Player 1 15:58:50 $REMOVE_RESOLVING_STACK_EFFECT:  
{"stackEffectId":13} 

 Player 1 15:58:50 $SET_STACK_ICON:  
{"iconIndex":1} 

 Player 1 15:58:50 $SHOW_STACK_EFFECT:  
{"effectId":13} 

 Player 2 15:58:50 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Samson combat damage to War"} 

 Player 2 15:58:50 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 get War<Monster> reward \n2:[object Object] killed by Samson"} 

 Player 1 15:58:53 $REMOVE_SE_VIS_PREV:  
{"stackEffectId":13} 

 Player 1 15:58:53 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":108,"_text":"Remove After Resolve MonsterDeath 13  "}} 

 Player 1 15:58:53 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 get War<Monster> reward"} 

 Player 1 15:58:53 $REMOVE_FROM_STACK:  
{"stackEffect":{"entityId":13,"creatorCardId":323,"monsterToDieCardId":306,"stackEffectType":5,"killerId":323}} 

 Player 1 15:58:53 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":109,"_text":"Response Remove After Resolve MonsterDeath 13"},"childOfId":108} 

 Player 1 15:58:53 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":110,"_text":"Wait For Response From Player 1 "},"childOfId":108} 

 Player 1 15:58:53 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 15:58:53 $ACTION_MASSAGE_REMOVE:  
{"id":110} 

 Player 1 15:58:53 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":111,"_text":"Wait For Response From Player 2 "},"childOfId":108} 

 Player 1 15:58:53 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 1 15:58:53 $GET_REACTION:  
{"playerId":2,"activePlayerId":1} 

 Player 2 15:58:53 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 get War<Monster> reward \n2:[object Object] killed by Samson"} 

 Player 2 15:58:53 $HIDE_REACTIONS:  
{"playerId":2,"cardsIds":[319,320]} 

 Player 2 15:58:53 $RESPOND_TO:  
{"playerId":1,"stackEffectResponse":false} 

 Player 1 15:58:53 $ACTION_MASSAGE_REMOVE:  
{"id":111} 

 Player 1 15:58:53 $ACTION_MASSAGE_REMOVE:  
{"id":109} 

 Player 1 15:58:53 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":112,"_text":"Resolve MonsterRewardStackEffect 14 "}} 

 Player 1 15:58:54 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 1 get War<Monster> reward"} 

 Player 1 15:58:54 $ADD_RESOLVING_STACK_EFFECT:  
{"stackEffect":{"entityId":14,"creatorCardId":323,"monsterCardWithRewardId":306,"playerCardIdToReward":323,"stackEffectType":7}} 

 Player 1 15:58:54 $SET_MONEY:  
{"playerId":1,"numOfCoins":11} 

 Player 1 15:58:54 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"PLAYER_CHANGE_MONEY","args":[{"type":2,"number":8}],"result":null,"preventMethod":false,"methodScopeId":323,"scopeIsPlayer":true,"index":8,"originStackId":-1},"isAfterActivation":true,"index":8} 

 Player 1 15:58:54 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"MONSTER_IS_KILLED","args":[],"result":null,"preventMethod":false,"methodScopeId":306,"scopeIsPlayer":false,"index":9,"originStackId":14},"isAfterActivation":true,"index":9} 

 Player 1 15:58:54 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 15:58:54 $REMOVE_RESOLVING_STACK_EFFECT:  
{"stackEffectId":14} 

 Player 1 15:58:54 $REMOVE_SE_VIS_PREV:  
{"stackEffectId":14} 

 Player 1 15:58:54 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":113,"_text":"Fizzle MonsterRewardStackEffect 14"}} 

 Player 1 15:58:54 $FIZZLE_STACK_EFFECT:  
{"entityId":14} 

 Player 2 15:58:54 $STACK_EMPTIED:  
{"playerId":1} 

 Player 1 15:58:57 $CLEAR_SE_VIS:  

 Player 1 15:58:57 $LOG_ERROR:  
"error while resolving stack effect 14" 
//////Error From Player 1////
  

 Player 1 15:58:57 $LOG_ERROR:  
//////Error From Player 1////
 [object Object]
////// 

 Player 1 15:58:57 $SHOW_ANNOUNCEMENT:  
{"text":"error while resolving stack effect 14"} 

 Player 1 15:58:57 $LOG_ERROR:  
{"message":"\"Cannot read property '_playerId' of null\"","stack":"\"TypeError: Cannot read property '_playerId' of null\\n    at Function.eval (eval at <anonymous> (http://localhost:7456/preview-scripts/__quick_compile__.js:230:32), <anonymous>:731:92)\\n    at step (http://localhost:7456/app/engine/bin/cocos2d-js-for-preview.js:113362:21)\\n    at Object.next (http://localhost:7456/app/engine/bin/cocos2d-js-for-preview.js:113306:18)\\n    at http://localhost:7456/app/engine/bin/cocos2d-js-for-preview.js:113284:71\\n    at new Promise (<anonymous>)\\n    at 486.window.__awaiter (http://localhost:7456/app/engine/bin/cocos2d-js-for-preview.js:113264:14)\\n    at Function.CardManager.moveCardTo (eval at <anonymous> (http://localhost:7456/preview-scripts/__quick_compile__.js:230:32), <anonymous>:693:16)\\n    at Player.eval (eval at <anonymous> (http://localhost:7456/preview-scripts/__quick_compile__.js:230:32), <anonymous>:1299:68)\\n    at step (http://localhost:7456/app/engine/bin/cocos2d-js-for-preview.js:113362:21)\\n    at Object.next (http://localhost:7456/app/engine/bin/cocos2d-js-for-preview.js:113306:18)\""} 
//////Error From Player 1////
  

 Player 1 15:58:57 $LOG_ERROR:  
//////Error From Player 1////

 "\"Cannot read property '_playerId' of null\""

 + "\"TypeError: Cannot read property '_playerId' of null\
    at Function.eval (eval at <anonymous> (http://localhost:7456/preview-scripts/__quick_compile__.js:230:32), <anonymous>:731:92)\
    at step (http://localhost:7456/app/engine/bin/cocos2d-js-for-preview.js:113362:21)\
    at Object.next (http://localhost:7456/app/engine/bin/cocos2d-js-for-preview.js:113306:18)\
    at http://localhost:7456/app/engine/bin/cocos2d-js-for-preview.js:113284:71\
    at new Promise (<anonymous>)\
    at 486.window.__awaiter (http://localhost:7456/app/engine/bin/cocos2d-js-for-preview.js:113264:14)\
    at Function.CardManager.moveCardTo (eval at <anonymous> (http://localhost:7456/preview-scripts/__quick_compile__.js:230:32), <anonymous>:693:16)\
    at Player.eval (eval at <anonymous> (http://localhost:7456/preview-scripts/__quick_compile__.js:230:32), <anonymous>:1299:68)\
    at step (http://localhost:7456/app/engine/bin/cocos2d-js-for-preview.js:113362:21)\
    at Object.next (http://localhost:7456/app/engine/bin/cocos2d-js-for-preview.js:113306:18)\""

////// 
//////Error From Player 1////

 "\"Cannot read property '_playerId' of null\""

 + "\"TypeError: Cannot read property '_playerId' of null\
    at Function.eval (eval at <anonymous> (http://localhost:7456/preview-scripts/__quick_compile__.js:230:32), <anonymous>:731:92)\
    at step (http://localhost:7456/app/engine/bin/cocos2d-js-for-preview.js:113362:21)\
    at Object.next (http://localhost:7456/app/engine/bin/cocos2d-js-for-preview.js:113306:18)\
    at http://localhost:7456/app/engine/bin/cocos2d-js-for-preview.js:113284:71\
    at new Promise (<anonymous>)\
    at 486.window.__awaiter (http://localhost:7456/app/engine/bin/cocos2d-js-for-preview.js:113264:14)\
    at Function.CardManager.moveCardTo (eval at <anonymous> (http://localhost:7456/preview-scripts/__quick_compile__.js:230:32), <anonymous>:693:16)\
    at Player.eval (eval at <anonymous> (http://localhost:7456/preview-scripts/__quick_compile__.js:230:32), <anonymous>:1299:68)\
    at step (http://localhost:7456/app/engine/bin/cocos2d-js-for-preview.js:113362:21)\
    at Object.next (http://localhost:7456/app/engine/bin/cocos2d-js-for-preview.js:113306:18)\""

////// 

 Player 1 15:58:57 $REMOVE_RESOLVING_STACK_EFFECT:  
{"stackEffectId":14} 

 Player 1 15:58:57 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":114,"_text":"Stack Was Emptied "}} 

 Player 1 15:58:57 $CLEAR_SE_VIS:  

 Player 1 15:58:57 $CLEAR_SE_VIS:  

 Player 1 15:59:03 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 1 15:59:03 $CLEAR_SE_VIS:  

 Player 1 15:59:03 $REPLACE_STACK:  
{"currentStack":[]} 

 Player 1 15:59:03 $CLEAR_SE_VIS:  

 Player 1 15:59:03 $END_TURN:  

 Player 1 15:59:03 $SET_TURN:  
{"playerId":2} 

 Player 1 15:59:03 $START_TURN:  
{"playerId":2} 

 Player 2 15:59:03 $STACK_EMPTIED:  
{"playerId":1} 

 Player 2 15:59:03 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 2 15:59:03 $NEXT_STACK_ID:  

 Player 2 15:59:03 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 start turn loot"} 

 Player 2 15:59:03 $ADD_TO_STACK:  
{"stackEffect":{"entityId":15,"creatorCardId":319,"turnPlayerCardId":319,"stackEffectType":13}} 

 Player 2 15:59:03 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":15,"creatorCardId":319,"turnPlayerCardId":319,"stackEffectType":13}} 

 Player 2 15:59:03 $SET_STACK_ICON:  
{"iconIndex":0} 

 Player 2 15:59:03 $SHOW_STACK_EFFECT:  
{"effectId":15} 

 Player 1 15:59:04 $STACK_EMPTIED:  
{"playerId":2} 

 Player 1 15:59:04 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 15:59:04 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 start turn loot"} 

 Player 2 15:59:04 $CLEAR_SE_VIS:  

 Player 2 15:59:06 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":115,"_text":"Add StartTurnLoot 15 "}} 

 Player 2 15:59:06 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 2 15:59:06 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":15,"creatorCardId":319,"turnPlayerCardId":319,"stackEffectType":13}} 

 Player 2 15:59:06 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":116,"_text":"Response Adding StartTurnLoot 15"},"childOfId":115} 

 Player 2 15:59:06 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":117,"_text":"Wait For Response From Player 2 "},"childOfId":115} 

 Player 2 15:59:06 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 2 15:59:06 $ACTION_MASSAGE_REMOVE:  
{"id":117} 

 Player 2 15:59:07 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":118,"_text":"Wait For Response From Player 1 "},"childOfId":115} 

 Player 2 15:59:07 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 2 15:59:07 $GET_REACTION:  
{"playerId":1,"activePlayerId":2} 

 Player 1 15:59:07 $HIDE_REACTIONS:  
{"playerId":1,"cardsIds":[323,324]} 

 Player 1 15:59:07 $RESPOND_TO:  
{"playerId":2,"stackEffectResponse":false} 

 Player 2 15:59:07 $ACTION_MASSAGE_REMOVE:  
{"id":118} 

 Player 2 15:59:07 $ACTION_MASSAGE_REMOVE:  
{"id":116} 

 Player 2 15:59:07 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":119,"_text":"Resolve StartTurnLoot 15 "}} 

 Player 2 15:59:07 $ADD_RESOLVING_STACK_EFFECT:  
{"stackEffect":{"entityId":15,"creatorCardId":319,"turnPlayerCardId":319,"stackEffectType":13}} 

 Player 2 15:59:07 $DRAW_CARD:  
{"deckType":1} 

 Player 2 15:59:07 $MOVE_CARD:  
{"moveIndex":9,"cardId":103,"placeID":2,"flipIfFlipped":false,"firstPos":{"x":-7.600000000000023,"y":-0.19999999999998863,"z":0},"playerId":2,"placeType":"Hand"} 

 Player 1 15:59:08 $MOVE_CARD_END:  
{"moveIndex":9,"cardId":103,"flipIfFlipped":false,"playerId":2} 

 Player 2 15:59:08 $CARD_DRAWN:  
{"playerId":2,"deckType":1,"drawnCardId":103} 

 Player 2 15:59:08 $FLIP_CARD:  
{"cardId":103} 

 Player 2 15:59:08 $PLAYER_GET_LOOT:  
{"playerId":2,"cardId":103} 

 Player 2 15:59:08 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":15,"creatorCardId":319,"turnPlayerCardId":319,"stackEffectType":13}} 

 Player 2 15:59:08 $REMOVE_RESOLVING_STACK_EFFECT:  
{"stackEffectId":15} 

 Player 2 15:59:08 $SET_STACK_ICON:  
{"iconIndex":1} 

 Player 2 15:59:08 $SHOW_STACK_EFFECT:  
{"effectId":15} 

 Player 2 15:59:11 $REMOVE_SE_VIS_PREV:  
{"stackEffectId":15} 

 Player 2 15:59:11 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":120,"_text":"Remove After Resolve StartTurnLoot 15  "}} 

 Player 2 15:59:11 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 15:59:11 $REMOVE_FROM_STACK:  
{"stackEffect":{"entityId":15,"creatorCardId":319,"turnPlayerCardId":319,"stackEffectType":13}} 

 Player 2 15:59:11 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":121,"_text":"Response Remove After Resolve StartTurnLoot 15"},"childOfId":120} 

 Player 2 15:59:11 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":122,"_text":"Wait For Response From Player 1 "},"childOfId":120} 

 Player 2 15:59:11 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 2 15:59:11 $GET_REACTION:  
{"playerId":1,"activePlayerId":2} 

 Player 1 15:59:11 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 start turn loot"} 

 Player 1 15:59:11 $HIDE_REACTIONS:  
{"playerId":1,"cardsIds":[323,324]} 

 Player 1 15:59:11 $RESPOND_TO:  
{"playerId":2,"stackEffectResponse":false} 

 Player 2 15:59:11 $ACTION_MASSAGE_REMOVE:  
{"id":122} 

 Player 2 15:59:11 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":123,"_text":"Wait For Response From Player 2 "},"childOfId":120} 

 Player 2 15:59:11 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 2 15:59:11 $ACTION_MASSAGE_REMOVE:  
{"id":123} 

 Player 2 15:59:11 $ACTION_MASSAGE_REMOVE:  
{"id":121} 

 Player 2 15:59:11 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":124,"_text":"Stack Was Emptied "}} 

 Player 2 15:59:12 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 15:59:12 $CLEAR_SE_VIS:  

 Player 2 15:59:17 $NEXT_STACK_ID:  

 Player 2 15:59:17 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2  declared attack on War"} 

 Player 2 15:59:17 $ADD_TO_STACK:  
{"stackEffect":{"entityId":16,"creatorCardId":319,"attackingPlayerCardId":319,"idOfCardBeingAttacked":306,"stackEffectType":4}} 

 Player 2 15:59:17 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":16,"creatorCardId":319,"attackingPlayerCardId":319,"idOfCardBeingAttacked":306,"stackEffectType":4}} 

 Player 2 15:59:17 $SET_STACK_ICON:  
{"iconIndex":0} 

 Player 2 15:59:17 $SHOW_STACK_EFFECT:  
{"effectId":16} 

 Player 1 15:59:17 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 15:59:17 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2  declared attack on War"} 

 Player 2 15:59:20 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":125,"_text":"Add DeclareAttack 16 "}} 

 Player 2 15:59:20 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 2 15:59:20 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":16,"creatorCardId":319,"attackingPlayerCardId":319,"idOfCardBeingAttacked":306,"stackEffectType":4}} 

 Player 2 15:59:20 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":126,"_text":"Response Adding DeclareAttack 16"},"childOfId":125} 

 Player 2 15:59:20 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":127,"_text":"Wait For Response From Player 2 "},"childOfId":125} 

 Player 2 15:59:20 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 2 15:59:20 $ACTION_MASSAGE_REMOVE:  
{"id":127} 

 Player 2 15:59:20 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":128,"_text":"Wait For Response From Player 1 "},"childOfId":125} 

 Player 2 15:59:20 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 2 15:59:21 $GET_REACTION:  
{"playerId":1,"activePlayerId":2} 

 Player 1 15:59:21 $HIDE_REACTIONS:  
{"playerId":1,"cardsIds":[323,324]} 

 Player 1 15:59:21 $RESPOND_TO:  
{"playerId":2,"stackEffectResponse":false} 

 Player 2 15:59:21 $ACTION_MASSAGE_REMOVE:  
{"id":128} 

 Player 2 15:59:21 $ACTION_MASSAGE_REMOVE:  
{"id":126} 

 Player 2 15:59:21 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":129,"_text":"Resolve DeclareAttack 16 "}} 

 Player 2 15:59:21 $ADD_RESOLVING_STACK_EFFECT:  
{"stackEffect":{"entityId":16,"creatorCardId":319,"attackingPlayerCardId":319,"idOfCardBeingAttacked":306,"stackEffectType":4}} 

 Player 2 15:59:21 $ACTIVATE_PARTICLE_EFFECT:  
{"cardId":306,"particleType":5} 

 Player 2 15:59:21 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"PLAYER_DECLARE_ATTACK","args":[],"result":null,"preventMethod":false,"methodScopeId":319,"scopeIsPlayer":true,"index":3,"originStackId":16},"isAfterActivation":true,"index":3} 

 Player 2 15:59:21 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":16,"creatorCardId":319,"attackingPlayerCardId":319,"idOfCardBeingAttacked":306,"stackEffectType":4}} 

 Player 2 15:59:21 $REMOVE_RESOLVING_STACK_EFFECT:  
{"stackEffectId":16} 

 Player 2 15:59:21 $SET_STACK_ICON:  
{"iconIndex":1} 

 Player 2 15:59:21 $SHOW_STACK_EFFECT:  
{"effectId":16} 

 Player 2 15:59:24 $REMOVE_SE_VIS_PREV:  
{"stackEffectId":16} 

 Player 2 15:59:24 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":130,"_text":"Remove After Resolve DeclareAttack 16  "}} 

 Player 2 15:59:24 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 15:59:24 $REMOVE_FROM_STACK:  
{"stackEffect":{"entityId":16,"creatorCardId":319,"attackingPlayerCardId":319,"idOfCardBeingAttacked":306,"stackEffectType":4}} 

 Player 2 15:59:24 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":131,"_text":"Response Remove After Resolve DeclareAttack 16"},"childOfId":130} 

 Player 2 15:59:24 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":132,"_text":"Wait For Response From Player 1 "},"childOfId":130} 

 Player 2 15:59:24 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 2 15:59:24 $GET_REACTION:  
{"playerId":1,"activePlayerId":2} 

 Player 1 15:59:24 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2  declared attack on War"} 

 Player 1 15:59:24 $HIDE_REACTIONS:  
{"playerId":1,"cardsIds":[323,324]} 

 Player 1 15:59:24 $RESPOND_TO:  
{"playerId":2,"stackEffectResponse":false} 

 Player 2 15:59:24 $ACTION_MASSAGE_REMOVE:  
{"id":132} 

 Player 2 15:59:24 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":133,"_text":"Wait For Response From Player 2 "},"childOfId":130} 

 Player 2 15:59:24 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 2 15:59:24 $ACTION_MASSAGE_REMOVE:  
{"id":133} 

 Player 2 15:59:24 $ACTION_MASSAGE_REMOVE:  
{"id":131} 

 Player 2 15:59:24 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":134,"_text":"Stack Was Emptied "}} 

 Player 2 15:59:24 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 15:59:24 $CLEAR_SE_VIS:  

 Player 2 15:59:26 $NEXT_STACK_ID:  

 Player 2 15:59:26 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is rolling against War<Monster>"} 

 Player 2 15:59:26 $ADD_TO_STACK:  
{"stackEffect":{"entityId":17,"creatorCardId":319,"rollingPlayerCardId":319,"stackEffectType":2,"attackedMonsterCardId":306}} 

 Player 2 15:59:26 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":17,"creatorCardId":319,"rollingPlayerCardId":319,"stackEffectType":2,"attackedMonsterCardId":306}} 

 Player 2 15:59:26 $SET_STACK_ICON:  
{"iconIndex":0} 

 Player 2 15:59:26 $SHOW_STACK_EFFECT:  
{"effectId":17} 

 Player 1 15:59:26 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 15:59:26 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is rolling against War<Monster>"} 

 Player 2 15:59:29 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":135,"_text":"Add AttackRoll 17 "}} 

 Player 2 15:59:29 $ROLL_DICE:  
{"playerId":2} 

 Player 2 15:59:31 $ROLL_DICE_ENDED:  
{"playerId":2,"numberRolled":3} 

 Player 2 15:59:31 $UPDATE_STACK_VIS:  
{"stackId":17,"text":"player rolled 3 vs War<Monster>"} 

 Player 2 15:59:31 $SHOW_DICE_ROLL:  
{"stackId":17} 

 Player 2 15:59:34 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 rolled 3 vs War<Monster>"} 

 Player 2 15:59:34 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 2 15:59:34 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":17,"creatorCardId":319,"numberRolled":3,"rollingPlayerCardId":319,"stackEffectType":2,"attackedMonsterCardId":306}} 

 Player 2 15:59:34 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":136,"_text":"Response Adding AttackRoll 17"},"childOfId":135} 

 Player 2 15:59:34 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":137,"_text":"Wait For Response From Player 2 "},"childOfId":135} 

 Player 2 15:59:35 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 2 15:59:35 $ACTION_MASSAGE_REMOVE:  
{"id":137} 

 Player 2 15:59:35 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":138,"_text":"Wait For Response From Player 1 "},"childOfId":135} 

 Player 2 15:59:35 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 2 15:59:35 $GET_REACTION:  
{"playerId":1,"activePlayerId":2} 

 Player 1 15:59:35 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is rolling against War<Monster>"} 

 Player 1 15:59:35 $HIDE_REACTIONS:  
{"playerId":1,"cardsIds":[323,324]} 

 Player 1 15:59:35 $RESPOND_TO:  
{"playerId":2,"stackEffectResponse":false} 

 Player 2 15:59:35 $ACTION_MASSAGE_REMOVE:  
{"id":138} 

 Player 2 15:59:35 $ACTION_MASSAGE_REMOVE:  
{"id":136} 

 Player 2 15:59:35 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":139,"_text":"Resolve AttackRoll 17 "}} 

 Player 2 15:59:35 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 rolled 3 vs War<Monster>"} 

 Player 2 15:59:35 $ADD_RESOLVING_STACK_EFFECT:  
{"stackEffect":{"entityId":17,"creatorCardId":319,"numberRolled":3,"rollingPlayerCardId":319,"stackEffectType":2,"attackedMonsterCardId":306}} 

 Player 2 15:59:35 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":140,"_text":"Added 0 to original roll"}} 

 Player 2 15:59:35 $NEXT_STACK_ID:  

 Player 2 15:59:35 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 2 15:59:35 $SET_STACK_ICON:  
{"iconIndex":0} 

 Player 2 15:59:35 $SHOW_STACK_EFFECT:  
{"effectId":18} 

 Player 1 15:59:35 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is rolling against War<Monster>"} 

 Player 1 15:59:35 $LOG_ERROR:  
"no stack effect to show" 
//////Error From Player 1////
  

 Player 1 15:59:35 $LOG_ERROR:  
//////Error From Player 1////
 [object Object]
////// 

 Player 1 15:59:35 $SHOW_ANNOUNCEMENT:  
{"text":"no stack effect to show"} 

 Player 2 15:59:38 $CLEAR_SE_VIS:  

 Player 2 15:59:38 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Lilith combat damage to War \n2:Player 2 rolled 3 vs War<Monster>"} 

 Player 2 15:59:38 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":18,"creatorCardId":319,"entityToDoDamageCardId":319,"entityToTakeDamageCardId":306,"isMonsterDoDamage":false,"isMonsterTakeDamage":true,"isPlayerDoDamage":false,"stackEffectType":3,"numberRolled":3}} 

 Player 2 15:59:38 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":17,"creatorCardId":319,"numberRolled":3,"rollingPlayerCardId":319,"stackEffectType":2,"attackedMonsterCardId":306}} 

 Player 2 15:59:38 $REPLACE_STACK:  
{"currentStack":[{"entityId":18,"creatorCardId":319,"entityToDoDamageCardId":319,"entityToTakeDamageCardId":306,"isMonsterDoDamage":false,"isMonsterTakeDamage":true,"isPlayerDoDamage":false,"stackEffectType":3,"numberRolled":3},{"entityId":17,"creatorCardId":319,"numberRolled":3,"rollingPlayerCardId":319,"stackEffectType":2,"attackedMonsterCardId":306}]} 

 Player 2 15:59:38 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"PLAYER_ROLL_DICE","args":[{"type":2,"number":3},{"type":2,"number":2},{"type":2,"number":3}],"result":null,"preventMethod":false,"methodScopeId":319,"scopeIsPlayer":true,"index":4,"originStackId":17},"isAfterActivation":true,"index":4} 

 Player 2 15:59:38 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":17,"creatorCardId":319,"numberRolled":3,"rollingPlayerCardId":319,"stackEffectType":2,"attackedMonsterCardId":306}} 

 Player 2 15:59:38 $REMOVE_RESOLVING_STACK_EFFECT:  
{"stackEffectId":17} 

 Player 2 15:59:38 $SET_STACK_ICON:  
{"iconIndex":1} 

 Player 2 15:59:38 $SHOW_STACK_EFFECT:  
{"effectId":17} 

 Player 1 15:59:38 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is rolling against War<Monster>"} 

 Player 1 15:59:39 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Lilith combat damage to War \n2:Player 2 is rolling against War<Monster>"} 

 Player 2 15:59:41 $REMOVE_SE_VIS_PREV:  
{"stackEffectId":17} 

 Player 2 15:59:41 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":141,"_text":"Remove After Resolve AttackRoll 17  "}} 

 Player 2 15:59:41 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Lilith combat damage to War"} 

 Player 2 15:59:41 $REMOVE_FROM_STACK:  
{"stackEffect":{"entityId":17,"creatorCardId":319,"numberRolled":3,"rollingPlayerCardId":319,"stackEffectType":2,"attackedMonsterCardId":306}} 

 Player 2 15:59:41 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":142,"_text":"Response Remove After Resolve AttackRoll 17"},"childOfId":141} 

 Player 2 15:59:41 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":143,"_text":"Wait For Response From Player 2 "},"childOfId":141} 

 Player 2 15:59:41 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 2 15:59:41 $ACTION_MASSAGE_REMOVE:  
{"id":143} 

 Player 2 15:59:41 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":144,"_text":"Wait For Response From Player 1 "},"childOfId":141} 

 Player 2 15:59:41 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 2 15:59:41 $GET_REACTION:  
{"playerId":1,"activePlayerId":2} 

 Player 1 15:59:41 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Lilith combat damage to War \n2:Player 2 is rolling against War<Monster>"} 

 Player 1 15:59:42 $HIDE_REACTIONS:  
{"playerId":1,"cardsIds":[323,324]} 

 Player 1 15:59:42 $RESPOND_TO:  
{"playerId":2,"stackEffectResponse":false} 

 Player 2 15:59:42 $ACTION_MASSAGE_REMOVE:  
{"id":144} 

 Player 2 15:59:42 $ACTION_MASSAGE_REMOVE:  
{"id":142} 

 Player 2 15:59:42 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":145,"_text":"Resolve CombatDamage 18 "}} 

 Player 2 15:59:42 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Lilith combat damage to War"} 

 Player 2 15:59:42 $ADD_RESOLVING_STACK_EFFECT:  
{"stackEffect":{"entityId":18,"creatorCardId":319,"entityToDoDamageCardId":319,"entityToTakeDamageCardId":306,"isMonsterDoDamage":false,"isMonsterTakeDamage":true,"isPlayerDoDamage":false,"stackEffectType":3,"numberRolled":3}} 

 Player 2 15:59:42 $UPDATE_STACK_VIS:  
{"stackId":18,"text":"Lilith will deal 1 combat damage to War"} 

 Player 2 15:59:42 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"MONSTER_GET_HIT","args":[{"type":2,"number":1},{"type":0,"number":319},{"type":2}],"result":null,"preventMethod":false,"methodScopeId":306,"scopeIsPlayer":false,"index":1,"originStackId":-1},"isAfterActivation":false,"index":1} 

 Player 2 15:59:42 $NEXT_STACK_ID:  

 Player 2 15:59:42 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Lilith combat damage to War \n2:Activate War effect GainStats<GainStats>"} 

 Player 2 15:59:42 $ADD_TO_STACK:  
{"stackEffect":{"effectCollectedData":null,"entityId":19,"creatorCardId":319,"hasLockingStackEffect":false,"cardActivatorId":2,"cardWithEffectId":306,"effectToDo":{"effectName":"GainStats","cardEffectNum":0,"cardPlayerId":2,"cardId":306,"effctType":0},"isAfterActivation":false,"index":1,"hasDataBeenCollectedYet":false,"stackEffectType":14}} 

 Player 2 15:59:42 $ADD_SE_VIS_PREV:  
{"stackEffect":{"effectCollectedData":null,"entityId":19,"creatorCardId":319,"hasLockingStackEffect":false,"cardActivatorId":2,"cardWithEffectId":306,"effectToDo":{"effectName":"GainStats","cardEffectNum":0,"cardPlayerId":2,"cardId":306,"effctType":0},"isAfterActivation":false,"index":1,"hasDataBeenCollectedYet":false,"stackEffectType":14}} 

 Player 2 15:59:42 $SET_STACK_ICON:  
{"iconIndex":0} 

 Player 2 15:59:42 $SHOW_STACK_EFFECT:  
{"effectId":19} 

 Player 1 15:59:42 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Lilith combat damage to War"} 

 Player 1 15:59:42 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Lilith combat damage to War \n2:Activate War "} 

 Player 2 15:59:45 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":146,"_text":"Add ActivatePassiveEffect 19 "}} 

 Player 2 15:59:45 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Lilith combat damage to War \n2:Activate War effect GainStats<GainStats>"} 

 Player 2 15:59:45 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"effectCollectedData":{"effectTargets":[306],"chainEffectsData":[],"methodArgs":[],"isPassive":true,"terminateOriginal":false,"effectCardOwner":306,"effectCardPlayer":306},"entityId":19,"creatorCardId":319,"hasLockingStackEffect":false,"cardActivatorId":2,"cardWithEffectId":306,"effectToDo":{"effectName":"GainStats","cardEffectNum":0,"cardPlayerId":2,"cardId":306,"effctType":0},"isAfterActivation":false,"index":1,"hasDataBeenCollectedYet":true,"stackEffectType":14}} 

 Player 2 15:59:45 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":147,"_text":"Response Adding ActivatePassiveEffect 19"},"childOfId":146} 

 Player 2 15:59:45 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":148,"_text":"Wait For Response From Player 1 "},"childOfId":146} 

 Player 2 15:59:45 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 2 15:59:45 $GET_REACTION:  
{"playerId":1,"activePlayerId":2} 

 Player 1 15:59:45 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Lilith combat damage to War \n2:Activate War "} 

 Player 1 15:59:45 $HIDE_REACTIONS:  
{"playerId":1,"cardsIds":[323,324]} 

 Player 1 15:59:45 $RESPOND_TO:  
{"playerId":2,"stackEffectResponse":false} 

 Player 2 15:59:45 $ACTION_MASSAGE_REMOVE:  
{"id":148} 

 Player 2 15:59:45 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":149,"_text":"Wait For Response From Player 2 "},"childOfId":146} 

 Player 2 15:59:45 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 2 15:59:45 $ACTION_MASSAGE_REMOVE:  
{"id":149} 

 Player 2 15:59:45 $ACTION_MASSAGE_REMOVE:  
{"id":147} 

 Player 2 15:59:45 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":150,"_text":"Resolve ActivatePassiveEffect 19 "}} 

 Player 2 15:59:45 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Lilith combat damage to War \n2:Activate War effect GainStats<GainStats>"} 

 Player 2 15:59:45 $ADD_RESOLVING_STACK_EFFECT:  
{"stackEffect":{"effectCollectedData":{"effectTargets":[306],"chainEffectsData":[],"methodArgs":[],"isPassive":true,"terminateOriginal":false,"effectCardOwner":306,"effectCardPlayer":306},"entityId":19,"creatorCardId":319,"hasLockingStackEffect":false,"cardActivatorId":2,"cardWithEffectId":306,"effectToDo":{"effectName":"GainStats","cardEffectNum":0,"cardPlayerId":2,"cardId":306,"effctType":0},"isAfterActivation":false,"index":1,"hasDataBeenCollectedYet":true,"stackEffectType":14}} 

 Player 2 15:59:45 $ACTIVATE_PARTICLE_EFFECT:  
{"cardId":306,"particleType":6} 

 Player 1 15:59:45 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Lilith combat damage to War \n2:Activate War "} 

 Player 2 15:59:47 $DISABLE_PARTICLE_EFFECT:  
{"cardId":306,"particleType":6} 

 Player 2 15:59:47 $MONSTER_GAIN_DMG:  
{"cardId":306,"DMGToGain":1} 

 Player 2 15:59:47 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"MONSTER_GET_HIT","args":[{"type":2,"number":1},{"type":0,"number":319},{"type":2}],"result":null,"preventMethod":false,"methodScopeId":306,"scopeIsPlayer":false,"index":1,"originStackId":-1},"isAfterActivation":false,"index":1} 

 Player 2 15:59:47 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Lilith combat damage to War \n2:Activate War effect GainStats<GainStats>"} 

 Player 2 15:59:47 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"effectCollectedData":{"effectTargets":[306],"chainEffectsData":[],"methodArgs":[],"isPassive":true,"terminateOriginal":false,"effectCardOwner":306,"effectCardPlayer":306},"entityId":19,"creatorCardId":319,"hasLockingStackEffect":false,"cardActivatorId":2,"cardWithEffectId":306,"isAfterActivation":false,"index":1,"hasDataBeenCollectedYet":true,"stackEffectType":14}} 

 Player 2 15:59:47 $REMOVE_RESOLVING_STACK_EFFECT:  
{"stackEffectId":19} 

 Player 2 15:59:47 $SET_STACK_ICON:  
{"iconIndex":1} 

 Player 2 15:59:47 $SHOW_STACK_EFFECT:  
{"effectId":19} 

 Player 1 15:59:47 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Lilith combat damage to War \n2:Activate War "} 

 Player 2 15:59:50 $REMOVE_SE_VIS_PREV:  
{"stackEffectId":19} 

 Player 2 15:59:50 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":151,"_text":"Remove After Resolve ActivatePassiveEffect 19  "}} 

 Player 2 15:59:50 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Lilith combat damage to War"} 

 Player 2 15:59:50 $REMOVE_FROM_STACK:  
{"stackEffect":{"effectCollectedData":{"effectTargets":[306],"chainEffectsData":[],"methodArgs":[],"isPassive":true,"terminateOriginal":false,"effectCardOwner":306,"effectCardPlayer":306},"entityId":19,"creatorCardId":319,"hasLockingStackEffect":false,"cardActivatorId":2,"cardWithEffectId":306,"isAfterActivation":false,"index":1,"hasDataBeenCollectedYet":true,"stackEffectType":14}} 

 Player 2 15:59:50 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":152,"_text":"Response Remove After Resolve ActivatePassiveEffect 19"},"childOfId":151} 

 Player 2 15:59:50 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":153,"_text":"Wait For Response From Player 2 "},"childOfId":151} 

 Player 2 15:59:50 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 2 15:59:50 $ACTION_MASSAGE_REMOVE:  
{"id":153} 

 Player 2 15:59:50 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":154,"_text":"Wait For Response From Player 1 "},"childOfId":151} 

 Player 2 15:59:50 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 2 15:59:50 $GET_REACTION:  
{"playerId":1,"activePlayerId":2} 

 Player 1 15:59:52 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Lilith combat damage to War \n2:Activate War "} 

 Player 1 15:59:52 $HIDE_REACTIONS:  
{"playerId":1,"cardsIds":[323,324]} 

 Player 1 15:59:52 $RESPOND_TO:  
{"playerId":2,"stackEffectResponse":false} 

 Player 2 15:59:52 $ACTION_MASSAGE_REMOVE:  
{"id":154} 

 Player 2 15:59:52 $ACTION_MASSAGE_REMOVE:  
{"id":152} 

 Player 2 15:59:52 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":155,"_text":"Resolve CombatDamage 18 "}} 

 Player 2 15:59:52 $MONSTER_GET_DAMAGED:  
{"cardId":306,"hpLeft":2,"damageDealerId":319} 

 Player 2 15:59:52 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"MONSTER_GET_HIT","args":[{"type":2,"number":1},{"type":0,"number":319},{"type":2}],"result":null,"preventMethod":false,"methodScopeId":306,"scopeIsPlayer":false,"index":1,"originStackId":-1},"isAfterActivation":true,"index":1} 

 Player 2 15:59:52 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"PLAYER_COMBAT_DAMAGE_GIVEN","args":[{"type":2,"number":1},{"type":2,"number":3},{"type":0,"number":319},{"type":0,"number":306}],"result":null,"preventMethod":false,"methodScopeId":319,"scopeIsPlayer":true,"index":5,"originStackId":18},"isAfterActivation":true,"index":5} 

 Player 2 15:59:52 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Lilith combat damage to War"} 

 Player 2 15:59:52 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":18,"creatorCardId":319,"entityToDoDamageCardId":319,"entityToTakeDamageCardId":306,"isMonsterDoDamage":false,"isMonsterTakeDamage":true,"isPlayerDoDamage":false,"stackEffectType":3,"numberRolled":3}} 

 Player 2 15:59:52 $REMOVE_RESOLVING_STACK_EFFECT:  
{"stackEffectId":18} 

 Player 2 15:59:52 $SET_STACK_ICON:  
{"iconIndex":1} 

 Player 2 15:59:52 $SHOW_STACK_EFFECT:  
{"effectId":18} 

 Player 2 15:59:55 $REMOVE_SE_VIS_PREV:  
{"stackEffectId":18} 

 Player 2 15:59:55 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":156,"_text":"Remove After Resolve CombatDamage 18  "}} 

 Player 2 15:59:55 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 15:59:55 $REMOVE_FROM_STACK:  
{"stackEffect":{"entityId":18,"creatorCardId":319,"entityToDoDamageCardId":319,"entityToTakeDamageCardId":306,"isMonsterDoDamage":false,"isMonsterTakeDamage":true,"isPlayerDoDamage":false,"stackEffectType":3,"numberRolled":3}} 

 Player 2 15:59:55 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":157,"_text":"Response Remove After Resolve CombatDamage 18"},"childOfId":156} 

 Player 2 15:59:55 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":158,"_text":"Wait For Response From Player 1 "},"childOfId":156} 

 Player 2 15:59:55 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 2 15:59:55 $GET_REACTION:  
{"playerId":1,"activePlayerId":2} 

 Player 1 15:59:55 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Lilith combat damage to War"} 

 Player 1 15:59:55 $HIDE_REACTIONS:  
{"playerId":1,"cardsIds":[323,324]} 

 Player 1 15:59:55 $RESPOND_TO:  
{"playerId":2,"stackEffectResponse":false} 

 Player 2 15:59:55 $ACTION_MASSAGE_REMOVE:  
{"id":158} 

 Player 2 15:59:55 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":159,"_text":"Wait For Response From Player 2 "},"childOfId":156} 

 Player 2 15:59:55 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 2 15:59:55 $ACTION_MASSAGE_REMOVE:  
{"id":159} 

 Player 2 15:59:55 $ACTION_MASSAGE_REMOVE:  
{"id":157} 

 Player 2 15:59:55 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":160,"_text":"Stack Was Emptied "}} 

 Player 2 15:59:55 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 2 15:59:55 $CLEAR_SE_VIS:  

 Player 2 16:00:00 $NEXT_STACK_ID:  

 Player 2 16:00:00 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is rolling against War<Monster>"} 

 Player 2 16:00:00 $ADD_TO_STACK:  
{"stackEffect":{"entityId":20,"creatorCardId":319,"rollingPlayerCardId":319,"stackEffectType":2,"attackedMonsterCardId":306}} 

 Player 2 16:00:00 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":20,"creatorCardId":319,"rollingPlayerCardId":319,"stackEffectType":2,"attackedMonsterCardId":306}} 

 Player 2 16:00:00 $SET_STACK_ICON:  
{"iconIndex":0} 

 Player 2 16:00:00 $SHOW_STACK_EFFECT:  
{"effectId":20} 

 Player 1 16:00:00 $UPDATE_STACK_LABLE:  
{"stackText":"Empty Stack"} 

 Player 1 16:00:00 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is rolling against War<Monster>"} 

 Player 2 16:00:03 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":161,"_text":"Add AttackRoll 20 "}} 

 Player 2 16:00:03 $ROLL_DICE:  
{"playerId":2} 

 Player 2 16:00:04 $ROLL_DICE_ENDED:  
{"playerId":2,"numberRolled":2} 

 Player 2 16:00:04 $UPDATE_STACK_VIS:  
{"stackId":20,"text":"player rolled 2 vs War<Monster>"} 

 Player 2 16:00:04 $SHOW_DICE_ROLL:  
{"stackId":20} 

 Player 2 16:00:07 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 rolled 2 vs War<Monster>"} 

 Player 2 16:00:07 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 2 16:00:08 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":20,"creatorCardId":319,"numberRolled":2,"rollingPlayerCardId":319,"stackEffectType":2,"attackedMonsterCardId":306}} 

 Player 2 16:00:08 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":162,"_text":"Response Adding AttackRoll 20"},"childOfId":161} 

 Player 2 16:00:08 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":163,"_text":"Wait For Response From Player 2 "},"childOfId":161} 

 Player 2 16:00:08 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 2 16:00:08 $ACTION_MASSAGE_REMOVE:  
{"id":163} 

 Player 2 16:00:08 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":164,"_text":"Wait For Response From Player 1 "},"childOfId":161} 

 Player 2 16:00:08 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 2 16:00:08 $GET_REACTION:  
{"playerId":1,"activePlayerId":2} 

 Player 1 16:00:08 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is rolling against War<Monster>"} 

 Player 1 16:00:08 $HIDE_REACTIONS:  
{"playerId":1,"cardsIds":[323,324]} 

 Player 1 16:00:08 $RESPOND_TO:  
{"playerId":2,"stackEffectResponse":false} 

 Player 2 16:00:08 $ACTION_MASSAGE_REMOVE:  
{"id":164} 

 Player 2 16:00:08 $ACTION_MASSAGE_REMOVE:  
{"id":162} 

 Player 2 16:00:08 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":165,"_text":"Resolve AttackRoll 20 "}} 

 Player 2 16:00:08 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 rolled 2 vs War<Monster>"} 

 Player 2 16:00:08 $ADD_RESOLVING_STACK_EFFECT:  
{"stackEffect":{"entityId":20,"creatorCardId":319,"numberRolled":2,"rollingPlayerCardId":319,"stackEffectType":2,"attackedMonsterCardId":306}} 

 Player 2 16:00:08 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":166,"_text":"Added 0 to original roll"}} 

 Player 2 16:00:08 $NEXT_STACK_ID:  

 Player 2 16:00:08 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 2 16:00:08 $SET_STACK_ICON:  
{"iconIndex":0} 

 Player 2 16:00:08 $SHOW_STACK_EFFECT:  
{"effectId":21} 

 Player 1 16:00:08 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:Player 2 is rolling against War<Monster>"} 

 Player 2 16:00:11 $CLEAR_SE_VIS:  

 Player 2 16:00:11 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:War combat damage to Lilith \n2:Player 2 rolled 2 vs War<Monster>"} 

 Player 2 16:00:11 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":21,"creatorCardId":319,"entityToDoDamageCardId":306,"entityToTakeDamageCardId":319,"isMonsterDoDamage":true,"isPlayerTakeDamage":true,"isMonsterTakeDamage":false,"isPlayerDoDamage":false,"stackEffectType":3,"numberRolled":2}} 

 Player 2 16:00:11 $ADD_SE_VIS_PREV:  
{"stackEffect":{"entityId":20,"creatorCardId":319,"numberRolled":2,"rollingPlayerCardId":319,"stackEffectType":2,"attackedMonsterCardId":306}} 

 Player 2 16:00:11 $REPLACE_STACK:  
{"currentStack":[{"entityId":21,"creatorCardId":319,"entityToDoDamageCardId":306,"entityToTakeDamageCardId":319,"isMonsterDoDamage":true,"isPlayerTakeDamage":true,"isMonsterTakeDamage":false,"isPlayerDoDamage":false,"stackEffectType":3,"numberRolled":2},{"entityId":20,"creatorCardId":319,"numberRolled":2,"rollingPlayerCardId":319,"stackEffectType":2,"attackedMonsterCardId":306}]} 

 Player 2 16:00:11 $UPDATE_PASSIVE_DATA:  
{"passiveData":{"passiveEvent":"PLAYER_ROLL_DICE","args":[{"type":2,"number":2},{"type":2,"number":1},{"type":2,"number":3}],"result":null,"preventMethod":false,"methodScopeId":319,"scopeIsPlayer":true,"index":6,"originStackId":20},"isAfterActivation":true,"index":6} 

 Player 2 16:00:11 $UPDATE_STACK_EFFECT:  
{"stackEffect":{"entityId":20,"creatorCardId":319,"numberRolled":2,"rollingPlayerCardId":319,"stackEffectType":2,"attackedMonsterCardId":306}} 

 Player 2 16:00:11 $REMOVE_RESOLVING_STACK_EFFECT:  
{"stackEffectId":20} 

 Player 2 16:00:11 $SET_STACK_ICON:  
{"iconIndex":1} 

 Player 2 16:00:11 $SHOW_STACK_EFFECT:  
{"effectId":20} 

 Player 2 16:00:14 $REMOVE_SE_VIS_PREV:  
{"stackEffectId":20} 

 Player 2 16:00:14 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":167,"_text":"Remove After Resolve AttackRoll 20  "}} 

 Player 2 16:00:14 $UPDATE_STACK_LABLE:  
{"stackText":" \n1:War combat damage to Lilith"} 

 Player 2 16:00:14 $REMOVE_FROM_STACK:  
{"stackEffect":{"entityId":20,"creatorCardId":319,"numberRolled":2,"rollingPlayerCardId":319,"stackEffectType":2,"attackedMonsterCardId":306}} 

 Player 2 16:00:14 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":168,"_text":"Response Remove After Resolve AttackRoll 20"},"childOfId":167} 

 Player 2 16:00:14 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":169,"_text":"Wait For Response From Player 2 "},"childOfId":167} 

 Player 2 16:00:14 $GIVE_PLAYER_PRIORITY:  
{"playerId":2} 

 Player 2 16:00:14 $ACTION_MASSAGE_REMOVE:  
{"id":169} 

 Player 2 16:00:14 $ACTION_MASSAGE_ADD:  
{"massage":{"_id":170,"_text":"Wait For Response From Player 1 "},"childOfId":167} 

 Player 2 16:00:14 $GIVE_PLAYER_PRIORITY:  
{"playerId":1} 

 Player 2 16:00:14 $GET_REACTION:  
{"playerId":1,"activePlayerId":2} 

 Player 2 16:01:20 $MATCH: 