Start Log 
 Player 2 19:39:16 $MOVE_TO_TABLE:  
 Player 2 19:39:36 $FINISH_LOAD:  

 {"id":2,"turnPlayerId":2} 
 Player 2 19:39:36 $SET_CHAR:  

 {"originPlayerId":2,"playerId":1,"charCardId":320,"itemCardId":321} 
 Player 2 19:39:36 $ASSIGN_CHAR_TO_PLAYER:  

 {"playerId":2,"charCardId":310,"itemCardId":311} 
 Player 2 19:39:36 $DECK_ARRAGMENT:  

 {"deckType":1,"arrangement":[39,50,41,84,89,67,44,93,70,14,77,9,53,85,134,78,136,90,34,131,31,123,16,97,15,69,56,17,105,40,37,99,80,42,113,117,55,8,10,120,135,92,20,27,114,141,139,94,57,86,118,45,21,95,128,62,61,6,18,7,60,109,111,59,133,132,76,82,106,108,129,28,126,68,52,74,72,32,36,96,38,30,48,115,101,51,25,125,63,130,83,107,91,100,35,103,137,127,24,54,29,43,79,124,49,122,47,12,11,116,64,19,33,112,13,46,121,23,104,22,138,98,88,58,66,71,65,75,26,102,140,119,81,110,73,87]} 
 Player 2 19:39:36 $DECK_ARRAGMENT:  

 {"deckType":2,"arrangement":[287,261,230,265,271,293,245,299,255,243,253,292,290,231,273,252,295,232,267,225,308,237,254,268,296,286,259,303,236,282,246,250,298,251,228,278,306,226,305,309,283,224,307,269,288,242,241,256,302,234,240,264,244,233,291,280,263,227,274,258,257,294,235,238,266,281,285,284,248,247,249,270,260,279,275,276,262,289,304,297,229,272,300,239,301,277]} 
 Player 2 19:39:37 $DECK_ARRAGMENT:  

 {"deckType":5,"arrangement":[215,212,210,177,146,204,205,148,157,166,209,198,185,176,171,155,216,168,152,191,178,192,203,180,190,182,172,145,213,195,189,164,221,147,222,163,144,218,200,174,156,165,170,154,188,208,150,220,206,183,162,167,194,158,160,175,207,161,217,159,169,202,143,187,201,186,153,197,219,149,214,211,193,179,181,196,151,173,199,184]} 
 Player 2 19:39:37 $DRAW_CARD:  

 {"deckType":5} 
 Player 2 19:39:37 $FLIP_CARD:  

 {"cardId":184} 
 Player 2 19:39:37 $ADD_STORE_CARD:  

 {"cardId":184} 
 Player 2 19:39:38 $DRAW_CARD:  

 {"deckType":5} 
 Player 2 19:39:38 $FLIP_CARD:  

 {"cardId":199} 
 Player 2 19:39:38 $ADD_STORE_CARD:  

 {"cardId":199} 
 Player 2 19:39:38 $DRAW_CARD:  

 {"deckType":2} 
 Player 2 19:39:38 $FLIP_CARD:  

 {"cardId":277} 
 Player 2 19:39:38 $REGISTER_PASSIVE_ITEM:  

 {"cardId":277} 
 Player 2 19:39:38 $ADD_MONSTER:  

 {"monsterPlaceId":1,"monsterId":277} 
 Player 2 19:39:38 $NEW_MONSTER_ON_PLACE:  

 {"cardId":277,"monsterPlaceId":1} 
 Player 2 19:39:38 $DRAW_CARD:  

 {"deckType":2} 
 Player 2 19:39:38 $FLIP_CARD:  

 {"cardId":301} 
 Player 2 19:39:38 $REGISTER_PASSIVE_ITEM:  

 {"cardId":301} 
 Player 2 19:39:38 $ADD_MONSTER:  

 {"monsterPlaceId":2,"monsterId":301} 
 Player 2 19:39:38 $NEW_MONSTER_ON_PLACE:  

 {"cardId":301,"monsterPlaceId":2} 
 Player 2 19:39:38 $SET_MONEY:  

 {"playerId":1,"numOfCoins":3} 
 Player 2 19:39:38 $UPDATE_PASSIVE_DATA:  

 {"passiveData":{"passiveEvent":"PLAYER_CHANGE_MONEY","args":[{"type":2,"number":3}],"result":null,"preventMethod":false,"methodScopeId":320,"scopeIsPlayer":true,"index":1,"originStackId":-1},"isAfterActivation":true,"index":1} 
 Player 2 19:39:38 $DRAW_CARD:  

 {"deckType":1} 
 Player 2 19:39:38 $MOVE_CARD:  

 {"moveIndex":1,"cardId":87,"placeID":1,"flipIfFlipped":false,"firstPos":{"x":1,"y":-5,"z":0},"playerId":2,"placeType":"Hand"} 
 Player 2 19:39:39 $CARD_DRAWN:  

 {"playerId":1,"deckType":1,"drawnCardId":87} 
 Player 2 19:39:39 $FLIP_CARD:  

 {"cardId":87} 
 Player 2 19:39:39 $FLIP_CARD:  

 {"cardId":87} 
 Player 2 19:39:39 $PLAYER_GET_LOOT:  

 {"playerId":1,"cardId":87} 
 Player 2 19:39:39 $DRAW_CARD:  

 {"deckType":1} 
 Player 2 19:39:39 $MOVE_CARD:  

 {"moveIndex":2,"cardId":73,"placeID":1,"flipIfFlipped":false,"firstPos":{"x":1,"y":-5,"z":0},"playerId":2,"placeType":"Hand"} 
 Player 2 19:39:39 $CARD_DRAWN:  

 {"playerId":1,"deckType":1,"drawnCardId":73} 
 Player 2 19:39:39 $FLIP_CARD:  

 {"cardId":73} 
 Player 2 19:39:39 $FLIP_CARD:  

 {"cardId":73} 
 Player 2 19:39:39 $PLAYER_GET_LOOT:  

 {"playerId":1,"cardId":73} 
 Player 2 19:39:39 $DRAW_CARD:  

 {"deckType":1} 
 Player 2 19:39:39 $MOVE_CARD:  

 {"moveIndex":3,"cardId":110,"placeID":1,"flipIfFlipped":false,"firstPos":{"x":1,"y":-5,"z":0},"playerId":2,"placeType":"Hand"} 
 Player 2 19:39:40 $CARD_DRAWN:  

 {"playerId":1,"deckType":1,"drawnCardId":110} 
 Player 2 19:39:40 $FLIP_CARD:  

 {"cardId":110} 
 Player 2 19:39:40 $FLIP_CARD:  

 {"cardId":110} 
 Player 2 19:39:40 $PLAYER_GET_LOOT:  

 {"playerId":1,"cardId":110} 
 Player 2 19:39:40 $SET_MONEY:  

 {"playerId":2,"numOfCoins":3} 
 Player 2 19:39:40 $UPDATE_PASSIVE_DATA:  

 {"passiveData":{"passiveEvent":"PLAYER_CHANGE_MONEY","args":[{"type":2,"number":3}],"result":null,"preventMethod":false,"methodScopeId":310,"scopeIsPlayer":true,"index":2,"originStackId":-1},"isAfterActivation":true,"index":2} 
 Player 2 19:39:40 $DRAW_CARD:  

 {"deckType":1} 
 Player 2 19:39:40 $MOVE_CARD:  

 {"moveIndex":4,"cardId":81,"placeID":2,"flipIfFlipped":false,"firstPos":{"x":1,"y":-5,"z":0},"playerId":2,"placeType":"Hand"} 
 Player 2 19:39:40 $CARD_DRAWN:  

 {"playerId":2,"deckType":1,"drawnCardId":81} 
 Player 2 19:39:40 $FLIP_CARD:  

 {"cardId":81} 
 Player 2 19:39:40 $PLAYER_GET_LOOT:  

 {"playerId":2,"cardId":81} 
 Player 2 19:39:41 $DRAW_CARD:  

 {"deckType":1} 
 Player 2 19:39:41 $MOVE_CARD:  

 {"moveIndex":5,"cardId":119,"placeID":2,"flipIfFlipped":false,"firstPos":{"x":1,"y":-5,"z":0},"playerId":2,"placeType":"Hand"} 
 Player 2 19:39:41 $CARD_DRAWN:  

 {"playerId":2,"deckType":1,"drawnCardId":119} 
 Player 2 19:39:41 $FLIP_CARD:  

 {"cardId":119} 
 Player 2 19:39:41 $PLAYER_GET_LOOT:  

 {"playerId":2,"cardId":119} 
 Player 2 19:39:41 $DRAW_CARD:  

 {"deckType":1} 
 Player 2 19:39:41 $MOVE_CARD:  

 {"moveIndex":6,"cardId":140,"placeID":2,"flipIfFlipped":false,"firstPos":{"x":1,"y":-5,"z":0},"playerId":2,"placeType":"Hand"} 
 Player 2 19:39:41 $CARD_DRAWN:  

 {"playerId":2,"deckType":1,"drawnCardId":140} 
 Player 2 19:39:41 $FLIP_CARD:  

 {"cardId":140} 
 Player 2 19:39:42 $PLAYER_GET_LOOT:  

 {"playerId":2,"cardId":140} 
 Player 2 19:39:42 $GAME_HAS_STARTED:  
 Player 2 19:39:42 $SET_TURN:  

 {"playerId":2} 
 Player 2 19:39:42 $GIVE_PLAYER_PRIORITY:  

 {"playerId":2} 
 Player 2 19:39:42 $NEXT_STACK_ID:  
 Player 2 19:39:42 $UPDATE_STACK_LABLE:  

 {"stackText":"Empty Stack"} 
 Player 2 19:39:42 $UPDATE_STACK_LABLE:  

 {"stackText":" \n1:Player 2 start turn loot"} 
 Player 2 19:39:42 $ADD_TO_STACK:  

 {"stackEffect":{"entityId":1,"creatorCardId":310,"turnPlayerCardId":310,"stackEffectType":13}} 
 Player 2 19:39:42 $ADD_SE_VIS_PREV:  

 {"stackEffect":{"entityId":1,"creatorCardId":310,"turnPlayerCardId":310,"stackEffectType":13}} 
 Player 2 19:39:42 $SET_STACK_ICON:  

 {"iconIndex":0} 
 Player 2 19:39:42 $SHOW_STACK_EFFECT:  

 {"effectId":1} 
 Player 2 19:39:45 $ACTION_MASSAGE_ADD:  

 {"massage":{"_id":0,"_text":"Add StartTurnLoot 1 "}} 
 Player 2 19:39:45 $GIVE_PLAYER_PRIORITY:  

 {"playerId":2} 
 Player 2 19:39:45 $UPDATE_STACK_EFFECT:  

 {"stackEffect":{"entityId":1,"creatorCardId":310,"turnPlayerCardId":310,"stackEffectType":13}} 
 Player 2 19:39:45 $ACTION_MASSAGE_ADD:  

 {"massage":{"_id":1,"_text":"Response Adding StartTurnLoot 1"},"childOfId":0} 
 Player 2 19:39:45 $ACTION_MASSAGE_ADD:  

 {"massage":{"_id":2,"_text":"Wait For Response From Player 2 "},"childOfId":0} 
 Player 2 19:39:45 $GIVE_PLAYER_PRIORITY:  

 {"playerId":2} 
 Player 2 19:39:45 $ACTION_MASSAGE_ADD:  

 {"massage":{"_id":3,"_text":"Wait For Response From Player 1 "},"childOfId":0} 
 Player 2 19:39:45 $GIVE_PLAYER_PRIORITY:  

 {"playerId":1} 
 Player 2 19:39:45 $GET_REACTION:  

 {"playerId":1,"activePlayerId":2} 
 Player 2 19:39:45 $ACTION_MASSAGE_ADD:  

 {"massage":{"_id":4,"_text":"Resolve StartTurnLoot 1 "}} 
 Player 2 19:39:45 $ADD_RESOLVING_STACK_EFFECT:  

 {"stackEffect":{"entityId":1,"creatorCardId":310,"turnPlayerCardId":310,"stackEffectType":13}} 
 Player 2 19:39:45 $DRAW_CARD:  

 {"deckType":1} 
 Player 2 19:39:45 $MOVE_CARD:  

 {"moveIndex":7,"cardId":102,"placeID":2,"flipIfFlipped":false,"firstPos":{"x":1,"y":-5,"z":0},"playerId":2,"placeType":"Hand"} 
 Player 2 19:39:46 $CARD_DRAWN:  

 {"playerId":2,"deckType":1,"drawnCardId":102} 
 Player 2 19:39:46 $FLIP_CARD:  

 {"cardId":102} 
 Player 2 19:39:46 $PLAYER_GET_LOOT:  

 {"playerId":2,"cardId":102} 
 Player 2 19:39:46 $UPDATE_STACK_EFFECT:  

 {"stackEffect":{"entityId":1,"creatorCardId":310,"turnPlayerCardId":310,"stackEffectType":13}} 
 Player 2 19:39:46 $REMOVE_RESOLVING_STACK_EFFECT:  

 {"stackEffectId":1} 
 Player 2 19:39:46 $SET_STACK_ICON:  

 {"iconIndex":1} 
 Player 2 19:39:46 $SHOW_STACK_EFFECT:  

 {"effectId":1} 
 Player 2 19:39:49 $REMOVE_SE_VIS_PREV:  

 {"stackEffectId":1} 
 Player 2 19:39:49 $ACTION_MASSAGE_ADD:  

 {"massage":{"_id":5,"_text":"Remove After Resolve StartTurnLoot 1  "}} 
 Player 2 19:39:49 $UPDATE_STACK_LABLE:  

 {"stackText":"Empty Stack"} 
 Player 2 19:39:49 $REMOVE_FROM_STACK:  

 {"stackEffect":{"entityId":1,"creatorCardId":310,"turnPlayerCardId":310,"stackEffectType":13}} 
 Player 2 19:39:49 $ACTION_MASSAGE_ADD:  

 {"massage":{"_id":6,"_text":"Response Remove After Resolve StartTurnLoot 1"},"childOfId":5} 
 Player 2 19:39:49 $ACTION_MASSAGE_ADD:  

 {"massage":{"_id":7,"_text":"Wait For Response From Player 1 "},"childOfId":5} 
 Player 2 19:39:49 $GIVE_PLAYER_PRIORITY:  

 {"playerId":1} 
 Player 2 19:39:49 $GET_REACTION:  

 {"playerId":1,"activePlayerId":2} 
 Player 2 19:39:49 $ACTION_MASSAGE_REMOVE:  

 {"id":7} 
 Player 2 19:39:49 $ACTION_MASSAGE_ADD:  

 {"massage":{"_id":8,"_text":"Wait For Response From Player 2 "},"childOfId":5} 
 Player 2 19:39:49 $GIVE_PLAYER_PRIORITY:  

 {"playerId":2} 
 Player 2 19:39:49 $ACTION_MASSAGE_REMOVE:  

 {"id":8} 
 Player 2 19:39:49 $ACTION_MASSAGE_REMOVE:  

 {"id":6} 
 Player 2 19:39:49 $ACTION_MASSAGE_ADD:  

 {"massage":{"_id":9,"_text":"Stack Was Emptied "}} 
 Player 2 19:39:49 $UPDATE_STACK_LABLE:  

 {"stackText":"Empty Stack"} 
 Player 2 19:39:49 $CLEAR_SE_VIS:  
 Player 2 19:39:49 $UPDATE_ACTIONS:  
 Player 2 19:40:08 $NEXT_STACK_ID:  
 Player 2 19:40:08 $UPDATE_STACK_LABLE:  

 {"stackText":" \n1:Player 2  declared attack on Holy Mulligan"} 
 Player 2 19:40:08 $ADD_TO_STACK:  

 {"stackEffect":{"entityId":2,"creatorCardId":310,"attackingPlayerCardId":310,"idOfCardBeingAttacked":277,"stackEffectType":4}} 
 Player 2 19:40:08 $ADD_SE_VIS_PREV:  

 {"stackEffect":{"entityId":2,"creatorCardId":310,"attackingPlayerCardId":310,"idOfCardBeingAttacked":277,"stackEffectType":4}} 
 Player 2 19:40:08 $SET_STACK_ICON:  

 {"iconIndex":0} 
 Player 2 19:40:08 $SHOW_STACK_EFFECT:  

 {"effectId":2} 
 Player 2 19:40:11 $ACTION_MASSAGE_ADD:  

 {"massage":{"_id":10,"_text":"Add DeclareAttack 2 "}} 
 Player 2 19:40:11 $GIVE_PLAYER_PRIORITY:  

 {"playerId":2} 
 Player 2 19:40:11 $UPDATE_STACK_EFFECT:  

 {"stackEffect":{"entityId":2,"creatorCardId":310,"attackingPlayerCardId":310,"idOfCardBeingAttacked":277,"stackEffectType":4}} 
 Player 2 19:40:11 $ACTION_MASSAGE_ADD:  

 {"massage":{"_id":11,"_text":"Response Adding DeclareAttack 2"},"childOfId":10} 
 Player 2 19:40:11 $ACTION_MASSAGE_ADD:  

 {"massage":{"_id":12,"_text":"Wait For Response From Player 2 "},"childOfId":10} 
 Player 2 19:40:11 $GIVE_PLAYER_PRIORITY:  

 {"playerId":2} 
 Player 2 19:40:11 $ACTION_MASSAGE_REMOVE:  

 {"id":12} 
 Player 2 19:40:11 $ACTION_MASSAGE_ADD:  

 {"massage":{"_id":13,"_text":"Wait For Response From Player 1 "},"childOfId":10} 
 Player 2 19:40:11 $GIVE_PLAYER_PRIORITY:  

 {"playerId":1} 
 Player 2 19:40:11 $GET_REACTION:  

 {"playerId":1,"activePlayerId":2} 
 Player 2 19:40:11 $ACTION_MASSAGE_REMOVE:  

 {"id":13} 
 Player 2 19:40:11 $ACTION_MASSAGE_REMOVE:  

 {"id":11} 
 Player 2 19:40:11 $ACTION_MASSAGE_ADD:  

 {"massage":{"_id":14,"_text":"Resolve DeclareAttack 2 "}} 
 Player 2 19:40:11 $ADD_RESOLVING_STACK_EFFECT:  

 {"stackEffect":{"entityId":2,"creatorCardId":310,"attackingPlayerCardId":310,"idOfCardBeingAttacked":277,"stackEffectType":4}} 
 Player 2 19:40:11 $ACTIVATE_PARTICLE_EFFECT:  

 {"cardId":277,"particleType":5} 
 Player 2 19:40:11 $UPDATE_PASSIVE_DATA:  

 {"passiveData":{"passiveEvent":"PLAYER_DECLARE_ATTACK","args":[],"result":null,"preventMethod":false,"methodScopeId":310,"scopeIsPlayer":true,"index":3,"originStackId":2},"isAfterActivation":true,"index":3} 
 Player 2 19:40:12 $UPDATE_STACK_EFFECT:  

 {"stackEffect":{"entityId":2,"creatorCardId":310,"attackingPlayerCardId":310,"idOfCardBeingAttacked":277,"stackEffectType":4}} 
 Player 2 19:40:12 $REMOVE_RESOLVING_STACK_EFFECT:  

 {"stackEffectId":2} 
 Player 2 19:40:12 $SET_STACK_ICON:  

 {"iconIndex":1} 
 Player 2 19:40:12 $SHOW_STACK_EFFECT:  

 {"effectId":2} 
 Player 2 19:40:14 $REMOVE_SE_VIS_PREV:  

 {"stackEffectId":2} 
 Player 2 19:40:14 $ACTION_MASSAGE_ADD:  

 {"massage":{"_id":15,"_text":"Remove After Resolve DeclareAttack 2  "}} 
 Player 2 19:40:14 $UPDATE_STACK_LABLE:  

 {"stackText":"Empty Stack"} 
 Player 2 19:40:14 $REMOVE_FROM_STACK:  

 {"stackEffect":{"entityId":2,"creatorCardId":310,"attackingPlayerCardId":310,"idOfCardBeingAttacked":277,"stackEffectType":4}} 
 Player 2 19:40:15 $ACTION_MASSAGE_ADD:  

 {"massage":{"_id":16,"_text":"Response Remove After Resolve DeclareAttack 2"},"childOfId":15} 
 Player 2 19:40:15 $ACTION_MASSAGE_ADD:  

 {"massage":{"_id":17,"_text":"Wait For Response From Player 1 "},"childOfId":15} 
 Player 2 19:40:15 $GIVE_PLAYER_PRIORITY:  

 {"playerId":1} 
 Player 2 19:40:15 $GET_REACTION:  

 {"playerId":1,"activePlayerId":2} 
 Player 2 19:40:15 $ACTION_MASSAGE_REMOVE:  

 {"id":17} 
 Player 2 19:40:15 $ACTION_MASSAGE_ADD:  

 {"massage":{"_id":18,"_text":"Wait For Response From Player 2 "},"childOfId":15} 
 Player 2 19:40:15 $GIVE_PLAYER_PRIORITY:  

 {"playerId":2} 
 Player 2 19:40:15 $ACTION_MASSAGE_REMOVE:  

 {"id":18} 
 Player 2 19:40:15 $ACTION_MASSAGE_REMOVE:  

 {"id":16} 
 Player 2 19:40:15 $ACTION_MASSAGE_ADD:  

 {"massage":{"_id":19,"_text":"Stack Was Emptied "}} 
 Player 2 19:40:15 $UPDATE_STACK_LABLE:  

 {"stackText":"Empty Stack"} 
 Player 2 19:40:15 $CLEAR_SE_VIS:  
 Player 2 19:40:56 $NEXT_STACK_ID:  
 Player 2 19:40:56 $UPDATE_STACK_LABLE:  

 {"stackText":" \n1:Player 2 is rolling against Holy Mulligan<Monster>"} 
 Player 2 19:40:56 $ADD_TO_STACK:  

 {"stackEffect":{"entityId":3,"creatorCardId":310,"rollingPlayerCardId":310,"stackEffectType":2,"attackedMonsterCardId":277}} 
 Player 2 19:40:56 $ADD_SE_VIS_PREV:  

 {"stackEffect":{"entityId":3,"creatorCardId":310,"rollingPlayerCardId":310,"stackEffectType":2,"attackedMonsterCardId":277}} 
 Player 2 19:40:56 $SET_STACK_ICON:  

 {"iconIndex":0} 
 Player 2 19:40:56 $SHOW_STACK_EFFECT:  

 {"effectId":3} 
 Player 2 19:40:59 $ACTION_MASSAGE_ADD:  

 {"massage":{"_id":20,"_text":"Add AttackRoll 3 "}} 
 Player 2 19:40:59 $ROLL_DICE:  

 {"playerId":2} 
 Player 2 19:41:02 $ROLL_DICE_ENDED:  

 {"playerId":2,"numberRolled":3} 
 Player 2 19:41:02 $UPDATE_STACK_VIS:  

 {"stackId":3,"text":"player rolled 3 vs Holy Mulligan<Monster>"} 
 Player 2 19:41:02 $SHOW_DICE_ROLL:  

 {"stackId":3} 
 Player 2 19:41:05 $UPDATE_STACK_LABLE:  

 {"stackText":" \n1:Player 2 rolled 3 vs Holy Mulligan<Monster>"} 
 Player 2 19:41:05 $GIVE_PLAYER_PRIORITY:  

 {"playerId":2} 
 Player 2 19:41:05 $UPDATE_STACK_EFFECT:  

 {"stackEffect":{"entityId":3,"creatorCardId":310,"numberRolled":3,"rollingPlayerCardId":310,"stackEffectType":2,"attackedMonsterCardId":277}} 
 Player 2 19:41:05 $ACTION_MASSAGE_ADD:  

 {"massage":{"_id":21,"_text":"Response Adding AttackRoll 3"},"childOfId":20} 
 Player 2 19:41:05 $ACTION_MASSAGE_ADD:  

 {"massage":{"_id":22,"_text":"Wait For Response From Player 2 "},"childOfId":20} 
 Player 2 19:41:05 $GIVE_PLAYER_PRIORITY:  

 {"playerId":2} 
 Player 2 19:41:05 $ACTION_MASSAGE_REMOVE:  

 {"id":22} 
 Player 2 19:41:05 $ACTION_MASSAGE_ADD:  

 {"massage":{"_id":23,"_text":"Wait For Response From Player 1 "},"childOfId":20} 
 Player 2 19:41:05 $GIVE_PLAYER_PRIORITY:  

 {"playerId":1} 
 Player 2 19:41:05 $GET_REACTION:  

 {"playerId":1,"activePlayerId":2} 
 Player 2 19:41:05 $ACTION_MASSAGE_REMOVE:  

 {"id":23} 
 Player 2 19:41:05 $ACTION_MASSAGE_REMOVE:  

 {"id":21} 
 Player 2 19:41:05 $ACTION_MASSAGE_ADD:  

 {"massage":{"_id":24,"_text":"Resolve AttackRoll 3 "}} 
 Player 2 19:41:05 $UPDATE_STACK_LABLE:  

 {"stackText":" \n1:Player 2 rolled 3 vs Holy Mulligan<Monster>"} 
 Player 2 19:41:05 $ADD_RESOLVING_STACK_EFFECT:  

 {"stackEffect":{"entityId":3,"creatorCardId":310,"numberRolled":3,"rollingPlayerCardId":310,"stackEffectType":2,"attackedMonsterCardId":277}} 
 Player 2 19:41:05 $ACTION_MASSAGE_ADD:  

 {"massage":{"_id":25,"_text":"Added 0 to original roll"}} 
 Player 2 19:41:05 $NEXT_STACK_ID:  
 Player 2 19:41:05 $GIVE_PLAYER_PRIORITY:  

 {"playerId":2} 
 Player 2 19:41:05 $UPDATE_STACK_LABLE:  

 {"stackText":" \n1:Azazel combat damage to Holy Mulligan \n2:Player 2 rolled 3 vs Holy Mulligan<Monster>"} 
 Player 2 19:41:05 $ADD_SE_VIS_PREV:  

 {"stackEffect":{"entityId":4,"creatorCardId":310,"entityToDoDamageCardId":310,"entityToTakeDamageCardId":277,"isMonsterDoDamage":false,"isMonsterTakeDamage":true,"isPlayerDoDamage":false,"stackEffectType":3,"numberRolled":3}} 
 Player 2 19:41:05 $SET_STACK_ICON:  

 {"iconIndex":0} 
 Player 2 19:41:05 $SHOW_STACK_EFFECT:  

 {"effectId":4} 
 Player 2 19:41:08 $CLEAR_SE_VIS:  
 Player 2 19:41:08 $UPDATE_STACK_LABLE:  

 {"stackText":" \n1:Azazel combat damage to Holy Mulligan \n2:Player 2 rolled 3 vs Holy Mulligan<Monster>"} 
 Player 2 19:41:08 $ADD_SE_VIS_PREV:  

 {"stackEffect":{"entityId":4,"creatorCardId":310,"entityToDoDamageCardId":310,"entityToTakeDamageCardId":277,"isMonsterDoDamage":false,"isMonsterTakeDamage":true,"isPlayerDoDamage":false,"stackEffectType":3,"numberRolled":3}} 
 Player 2 19:41:08 $ADD_SE_VIS_PREV:  

 {"stackEffect":{"entityId":3,"creatorCardId":310,"numberRolled":3,"rollingPlayerCardId":310,"stackEffectType":2,"attackedMonsterCardId":277}} 
 Player 2 19:41:08 $REPLACE_STACK:  

 {"currentStack":[{"entityId":4,"creatorCardId":310,"entityToDoDamageCardId":310,"entityToTakeDamageCardId":277,"isMonsterDoDamage":false,"isMonsterTakeDamage":true,"isPlayerDoDamage":false,"stackEffectType":3,"numberRolled":3},{"entityId":3,"creatorCardId":310,"numberRolled":3,"rollingPlayerCardId":310,"stackEffectType":2,"attackedMonsterCardId":277}]} 
 Player 2 19:41:08 $UPDATE_PASSIVE_DATA:  

 {"passiveData":{"passiveEvent":"PLAYER_ROLL_DICE","args":[{"type":2,"number":3},{"type":2,"number":2},{"type":2,"number":3}],"result":null,"preventMethod":false,"methodScopeId":310,"scopeIsPlayer":true,"index":4,"originStackId":3},"isAfterActivation":true,"index":4} 
 Player 2 19:41:08 $UPDATE_STACK_EFFECT:  

 {"stackEffect":{"entityId":3,"creatorCardId":310,"numberRolled":3,"rollingPlayerCardId":310,"stackEffectType":2,"attackedMonsterCardId":277}} 
 Player 2 19:41:08 $REMOVE_RESOLVING_STACK_EFFECT:  

 {"stackEffectId":3} 
 Player 2 19:41:08 $SET_STACK_ICON:  

 {"iconIndex":1} 
 Player 2 19:41:08 $SHOW_STACK_EFFECT:  

 {"effectId":3} 
 Player 2 19:41:11 $REMOVE_SE_VIS_PREV:  

 {"stackEffectId":3} 
 Player 2 19:41:11 $ACTION_MASSAGE_ADD:  

 {"massage":{"_id":26,"_text":"Remove After Resolve AttackRoll 3  "}} 
 Player 2 19:41:11 $UPDATE_STACK_LABLE:  

 {"stackText":" \n1:Azazel combat damage to Holy Mulligan"} 
 Player 2 19:41:11 $REMOVE_FROM_STACK:  

 {"stackEffect":{"entityId":3,"creatorCardId":310,"numberRolled":3,"rollingPlayerCardId":310,"stackEffectType":2,"attackedMonsterCardId":277}} 
 Player 2 19:41:11 $ACTION_MASSAGE_ADD:  

 {"massage":{"_id":27,"_text":"Response Remove After Resolve AttackRoll 3"},"childOfId":26} 
 Player 2 19:41:11 $ACTION_MASSAGE_ADD:  

 {"massage":{"_id":28,"_text":"Wait For Response From Player 2 "},"childOfId":26} 
 Player 2 19:41:11 $GIVE_PLAYER_PRIORITY:  

 {"playerId":2} 
 Player 2 19:41:11 $ACTION_MASSAGE_REMOVE:  

 {"id":28} 
 Player 2 19:41:11 $ACTION_MASSAGE_ADD:  

 {"massage":{"_id":29,"_text":"Wait For Response From Player 1 "},"childOfId":26} 
 Player 2 19:41:11 $GIVE_PLAYER_PRIORITY:  

 {"playerId":1} 
 Player 2 19:41:11 $GET_REACTION:  

 {"playerId":1,"activePlayerId":2} 
 Player 2 19:41:12 $ACTION_MASSAGE_REMOVE:  

 {"id":29} 
 Player 2 19:41:12 $ACTION_MASSAGE_REMOVE:  

 {"id":27} 
 Player 2 19:41:12 $ACTION_MASSAGE_ADD:  

 {"massage":{"_id":30,"_text":"Resolve CombatDamage 4 "}} 
 Player 2 19:41:12 $UPDATE_STACK_LABLE:  

 {"stackText":" \n1:Azazel combat damage to Holy Mulligan"} 
 Player 2 19:41:12 $ADD_RESOLVING_STACK_EFFECT:  

 {"stackEffect":{"entityId":4,"creatorCardId":310,"entityToDoDamageCardId":310,"entityToTakeDamageCardId":277,"isMonsterDoDamage":false,"isMonsterTakeDamage":true,"isPlayerDoDamage":false,"stackEffectType":3,"numberRolled":3}} 
 Player 2 19:41:12 $UPDATE_STACK_VIS:  

 {"stackId":4,"text":"Azazel will deal 1 combat damage to Holy Mulligan"} 
 Player 2 19:41:12 $MONSTER_GET_DAMAGED:  

 {"cardId":277,"hpLeft":0,"damageDealerId":310} 
 Player 2 19:41:12 $NEXT_STACK_ID:  
 Player 2 19:41:12 $GIVE_PLAYER_PRIORITY:  

 {"playerId":2} 
 Player 2 19:41:12 $UPDATE_STACK_LABLE:  

 {"stackText":" \n1:Azazel combat damage to Holy Mulligan \n2:[object Object] killed by Azazel"} 
 Player 2 19:41:12 $ADD_SE_VIS_PREV:  

 {"stackEffect":{"entityId":5,"creatorCardId":310,"monsterToDieCardId":277,"stackEffectType":5,"killerId":310}} 
 Player 2 19:41:12 $SET_STACK_ICON:  

 {"iconIndex":0} 
 Player 2 19:41:12 $SHOW_STACK_EFFECT:  

 {"effectId":5} 
 Player 2 19:41:15 $CLEAR_SE_VIS:  
 Player 2 19:41:15 $UPDATE_STACK_LABLE:  

 {"stackText":" \n1:Azazel combat damage to Holy Mulligan \n2:[object Object] killed by Azazel"} 
 Player 2 19:41:15 $ADD_SE_VIS_PREV:  

 {"stackEffect":{"entityId":4,"creatorCardId":310,"entityToDoDamageCardId":310,"entityToTakeDamageCardId":277,"isMonsterDoDamage":false,"isMonsterTakeDamage":true,"isPlayerDoDamage":false,"stackEffectType":3,"numberRolled":3}} 
 Player 2 19:41:15 $ADD_SE_VIS_PREV:  

 {"stackEffect":{"entityId":5,"creatorCardId":310,"monsterToDieCardId":277,"stackEffectType":5,"killerId":310}} 
 Player 2 19:41:15 $REPLACE_STACK:  

 {"currentStack":[{"entityId":4,"creatorCardId":310,"entityToDoDamageCardId":310,"entityToTakeDamageCardId":277,"isMonsterDoDamage":false,"isMonsterTakeDamage":true,"isPlayerDoDamage":false,"stackEffectType":3,"numberRolled":3},{"entityId":5,"creatorCardId":310,"monsterToDieCardId":277,"stackEffectType":5,"killerId":310}]} 
 Player 2 19:41:15 $UPDATE_PASSIVE_DATA:  

 {"passiveData":{"passiveEvent":"MONSTER_GET_HIT","args":[{"type":2,"number":1},{"type":0,"number":310},{"type":2}],"result":null,"preventMethod":false,"methodScopeId":277,"scopeIsPlayer":false,"index":5,"originStackId":-1},"isAfterActivation":true,"index":5} 
 Player 2 19:41:15 $UPDATE_PASSIVE_DATA:  

 {"passiveData":{"passiveEvent":"PLAYER_COMBAT_DAMAGE_GIVEN","args":[{"type":2,"number":1},{"type":2,"number":3},{"type":0,"number":310},{"type":0,"number":277}],"result":null,"preventMethod":false,"methodScopeId":310,"scopeIsPlayer":true,"index":6,"originStackId":4},"isAfterActivation":true,"index":6} 
 Player 2 19:41:15 $UPDATE_STACK_EFFECT:  

 {"stackEffect":{"entityId":4,"creatorCardId":310,"entityToDoDamageCardId":310,"entityToTakeDamageCardId":277,"isMonsterDoDamage":false,"isMonsterTakeDamage":true,"isPlayerDoDamage":false,"stackEffectType":3,"numberRolled":3}} 
 Player 2 19:41:15 $REMOVE_RESOLVING_STACK_EFFECT:  

 {"stackEffectId":4} 
 Player 2 19:41:15 $SET_STACK_ICON:  

 {"iconIndex":1} 
 Player 2 19:41:15 $SHOW_STACK_EFFECT:  

 {"effectId":4} 
 Player 2 19:41:18 $REMOVE_SE_VIS_PREV:  

 {"stackEffectId":4} 
 Player 2 19:41:18 $ACTION_MASSAGE_ADD:  

 {"massage":{"_id":31,"_text":"Remove After Resolve CombatDamage 4  "}} 
 Player 2 19:41:18 $UPDATE_STACK_LABLE:  

 {"stackText":" \n1:[object Object] killed by Azazel"} 
 Player 2 19:41:18 $REMOVE_FROM_STACK:  

 {"stackEffect":{"entityId":4,"creatorCardId":310,"entityToDoDamageCardId":310,"entityToTakeDamageCardId":277,"isMonsterDoDamage":false,"isMonsterTakeDamage":true,"isPlayerDoDamage":false,"stackEffectType":3,"numberRolled":3}} 
 Player 2 19:41:18 $ACTION_MASSAGE_ADD:  

 {"massage":{"_id":32,"_text":"Response Remove After Resolve CombatDamage 4"},"childOfId":31} 
 Player 2 19:41:18 $ACTION_MASSAGE_ADD:  

 {"massage":{"_id":33,"_text":"Wait For Response From Player 2 "},"childOfId":31} 
 Player 2 19:41:18 $GIVE_PLAYER_PRIORITY:  

 {"playerId":2} 
 Player 2 19:41:18 $ACTION_MASSAGE_REMOVE:  

 {"id":33} 
 Player 2 19:41:18 $ACTION_MASSAGE_ADD:  

 {"massage":{"_id":34,"_text":"Wait For Response From Player 1 "},"childOfId":31} 
 Player 2 19:41:18 $GIVE_PLAYER_PRIORITY:  

 {"playerId":1} 
 Player 2 19:41:18 $GET_REACTION:  

 {"playerId":1,"activePlayerId":2} 
 Player 2 19:41:18 $ACTION_MASSAGE_REMOVE:  

 {"id":34} 
 Player 2 19:41:18 $ACTION_MASSAGE_REMOVE:  

 {"id":32} 
 Player 2 19:41:18 $ACTION_MASSAGE_ADD:  

 {"massage":{"_id":35,"_text":"Resolve MonsterDeath 5 "}} 
 Player 2 19:41:18 $UPDATE_STACK_LABLE:  

 {"stackText":" \n1:[object Object] killed by Azazel"} 
 Player 2 19:41:18 $ADD_RESOLVING_STACK_EFFECT:  

 {"stackEffect":{"entityId":5,"creatorCardId":310,"monsterToDieCardId":277,"stackEffectType":5,"killerId":310}} 
 Player 2 19:41:18 $DISABLE_PARTICLE_EFFECT:  

 {"cardId":277,"particleType":5} 
 Player 2 19:41:18 $CANCEL_ATTACK:  
 Player 2 19:41:18 $NEXT_STACK_ID:  
 Player 2 19:41:18 $UPDATE_PASSIVE_DATA:  

 {"passiveData":{"passiveEvent":"MONSTER_IS_KILLED","args":[{"type":2}],"result":null,"preventMethod":false,"methodScopeId":277,"scopeIsPlayer":false,"index":1,"originStackId":6},"isAfterActivation":false,"index":1} 
 Player 2 19:41:18 $NEXT_STACK_ID:  
 Player 2 19:41:18 $UPDATE_STACK_LABLE:  

 {"stackText":" \n1:Player 2 get Holy Mulligan<Monster> reward \n2:[object Object] killed by Azazel"} 
 Player 2 19:41:18 $UPDATE_STACK_LABLE:  

 {"stackText":" \n1:Player 2 get Holy Mulligan<Monster> reward \n2:[object Object] killed by Azazel \n3:Activate Holy Mulligan effect ChainEffects<ChainEffects>"} 
 Player 2 19:41:18 $ADD_TO_STACK:  

 {"stackEffect":{"effectCollectedData":null,"entityId":7,"creatorCardId":310,"hasLockingStackEffect":false,"cardActivatorId":2,"cardWithEffectId":277,"effectToDo":{"effectName":"ChainEffects","cardEffectNum":0,"cardPlayerId":2,"cardId":277,"effctType":0},"isAfterActivation":false,"index":1,"hasDataBeenCollectedYet":false,"stackEffectType":14}} 
 Player 2 19:41:19 $ADD_SE_VIS_PREV:  

 {"stackEffect":{"effectCollectedData":null,"entityId":7,"creatorCardId":310,"hasLockingStackEffect":false,"cardActivatorId":2,"cardWithEffectId":277,"effectToDo":{"effectName":"ChainEffects","cardEffectNum":0,"cardPlayerId":2,"cardId":277,"effctType":0},"isAfterActivation":false,"index":1,"hasDataBeenCollectedYet":false,"stackEffectType":14}} 
 Player 2 19:41:19 $SET_STACK_ICON:  

 {"iconIndex":0} 
 Player 2 19:41:19 $SHOW_STACK_EFFECT:  

 {"effectId":7} 
 Player 2 19:41:21 $ACTION_MASSAGE_ADD:  

 {"massage":{"_id":36,"_text":"Add ActivatePassiveEffect 7 "}} 
 Player 2 19:41:21 $UPDATE_STACK_LABLE:  

 {"stackText":" \n1:Player 2 get Holy Mulligan<Monster> reward \n2:[object Object] killed by Azazel \n3:Activate Holy Mulligan effect ChainEffects<ChainEffects>"} 
 Player 2 19:41:21 $UPDATE_STACK_EFFECT:  

 {"stackEffect":{"effectCollectedData":{"effectTargets":[],"chainEffectsData":[],"methodArgs":[],"isPassive":true,"terminateOriginal":false,"effectCardOwner":277,"effectCardPlayer":277},"entityId":7,"creatorCardId":310,"hasLockingStackEffect":false,"cardActivatorId":2,"cardWithEffectId":277,"effectToDo":{"effectName":"ChainEffects","cardEffectNum":0,"cardPlayerId":2,"cardId":277,"effctType":0},"isAfterActivation":false,"index":1,"hasDataBeenCollectedYet":true,"stackEffectType":14}} 
 Player 2 19:41:21 $ACTION_MASSAGE_ADD:  

 {"massage":{"_id":37,"_text":"Response Adding ActivatePassiveEffect 7"},"childOfId":36} 
 Player 2 19:41:21 $ACTION_MASSAGE_ADD:  

 {"massage":{"_id":38,"_text":"Wait For Response From Player 1 "},"childOfId":36} 
 Player 2 19:41:21 $GIVE_PLAYER_PRIORITY:  

 {"playerId":1} 
 Player 2 19:41:21 $GET_REACTION:  

 {"playerId":1,"activePlayerId":2} 
 Player 2 19:41:21 $ACTION_MASSAGE_REMOVE:  

 {"id":38} 
 Player 2 19:41:22 $ACTION_MASSAGE_ADD:  

 {"massage":{"_id":39,"_text":"Wait For Response From Player 2 "},"childOfId":36} 
 Player 2 19:41:22 $GIVE_PLAYER_PRIORITY:  

 {"playerId":2} 
 Player 2 19:41:22 $ACTION_MASSAGE_REMOVE:  

 {"id":39} 
 Player 2 19:41:22 $ACTION_MASSAGE_REMOVE:  

 {"id":37} 
 Player 2 19:41:22 $ACTION_MASSAGE_ADD:  

 {"massage":{"_id":40,"_text":"Resolve ActivatePassiveEffect 7 "}} 
 Player 2 19:41:22 $UPDATE_STACK_LABLE:  

 {"stackText":" \n1:Player 2 get Holy Mulligan<Monster> reward \n2:[object Object] killed by Azazel \n3:Activate Holy Mulligan effect ChainEffects<ChainEffects>"} 
 Player 2 19:41:22 $ADD_RESOLVING_STACK_EFFECT:  

 {"stackEffect":{"effectCollectedData":{"effectTargets":[],"chainEffectsData":[],"methodArgs":[],"isPassive":true,"terminateOriginal":false,"effectCardOwner":277,"effectCardPlayer":277},"entityId":7,"creatorCardId":310,"hasLockingStackEffect":false,"cardActivatorId":2,"cardWithEffectId":277,"effectToDo":{"effectName":"ChainEffects","cardEffectNum":0,"cardPlayerId":2,"cardId":277,"effctType":0},"isAfterActivation":false,"index":1,"hasDataBeenCollectedYet":true,"stackEffectType":14}} 
 Player 2 19:41:22 $ACTIVATE_PARTICLE_EFFECT:  

 {"cardId":277,"particleType":6} 
 Player 2 19:41:24 $DISABLE_PARTICLE_EFFECT:  

 {"cardId":277,"particleType":6} 
 Player 2 19:41:24 $NEW_MONSTER_PLACE:  
 Player 2 19:41:24 $NEXT_STACK_ID:  
 Player 2 19:41:24 $UPDATE_STACK_LABLE:  

 {"stackText":" \n1:Player 2 get Holy Mulligan<Monster> reward \n2:[object Object] killed by Azazel \n3:Activate Holy Mulligan effect ChainEffects<ChainEffects>"} 
 Player 2 19:41:24 $UPDATE_STACK_LABLE:  

 {"stackText":" \n1:Player 2 get Holy Mulligan<Monster> reward \n2:[object Object] killed by Azazel \n3:Activate Holy Mulligan effect ChainEffects<ChainEffects> \n4:Refill holder3 slot"} 
 Player 2 19:41:24 $ADD_TO_STACK:  

 {"stackEffect":{"entityId":8,"creatorCardId":310,"slotType":2,"slotToFillId":3,"stackEffectType":10}} 
 Player 2 19:41:24 $ADD_SE_VIS_PREV:  

 {"stackEffect":{"entityId":8,"creatorCardId":310,"slotType":2,"slotToFillId":3,"stackEffectType":10}} 
 Player 2 19:41:24 $SET_STACK_ICON:  

 {"iconIndex":0} 
 Player 2 19:41:24 $SHOW_STACK_EFFECT:  

 {"effectId":8} 
 Player 2 19:41:27 $ACTION_MASSAGE_ADD:  

 {"massage":{"_id":41,"_text":"Add RefillEmptySlot 8 "}} 
 Player 2 19:41:27 $GIVE_PLAYER_PRIORITY:  

 {"playerId":2} 
 Player 2 19:41:27 $UPDATE_STACK_LABLE:  

 {"stackText":" \n1:Player 2 get Holy Mulligan<Monster> reward \n2:[object Object] killed by Azazel \n3:Activate Holy Mulligan effect ChainEffects<ChainEffects> \n4:Refill holder3 slot"} 
 Player 2 19:41:27 $UPDATE_STACK_EFFECT:  

 {"stackEffect":{"entityId":8,"creatorCardId":310,"slotType":2,"slotToFillId":3,"stackEffectType":10}} 
 Player 2 19:41:27 $ACTION_MASSAGE_ADD:  

 {"massage":{"_id":42,"_text":"Response Adding RefillEmptySlot 8"},"childOfId":41} 
 Player 2 19:41:27 $ACTION_MASSAGE_ADD:  

 {"massage":{"_id":43,"_text":"Wait For Response From Player 2 "},"childOfId":41} 
 Player 2 19:41:27 $GIVE_PLAYER_PRIORITY:  

 {"playerId":2} 
 Player 2 19:41:27 $ACTION_MASSAGE_REMOVE:  

 {"id":43} 
 Player 2 19:41:27 $ACTION_MASSAGE_ADD:  

 {"massage":{"_id":44,"_text":"Wait For Response From Player 1 "},"childOfId":41} 
 Player 2 19:41:27 $GIVE_PLAYER_PRIORITY:  

 {"playerId":1} 
 Player 2 19:41:27 $GET_REACTION:  

 {"playerId":1,"activePlayerId":2} 
 Player 2 19:41:27 $ACTION_MASSAGE_REMOVE:  

 {"id":44} 
 Player 2 19:41:27 $ACTION_MASSAGE_REMOVE:  

 {"id":42} 
 Player 2 19:41:27 $ACTION_MASSAGE_ADD:  

 {"massage":{"_id":45,"_text":"Resolve RefillEmptySlot 8 "}} 
 Player 2 19:41:27 $UPDATE_STACK_LABLE:  

 {"stackText":" \n1:Player 2 get Holy Mulligan<Monster> reward \n2:[object Object] killed by Azazel \n3:Activate Holy Mulligan effect ChainEffects<ChainEffects> \n4:Refill holder3 slot"} 
 Player 2 19:41:27 $ADD_RESOLVING_STACK_EFFECT:  

 {"stackEffect":{"entityId":8,"creatorCardId":310,"slotType":2,"slotToFillId":3,"stackEffectType":10}} 
 Player 2 19:41:27 $DRAW_CARD:  

 {"deckType":2} 
 Player 2 19:41:27 $FLIP_CARD:  

 {"cardId":239} 
 Player 2 19:41:27 $ADD_MONSTER:  

 {"monsterPlaceId":3,"monsterId":239} 
 Player 2 19:41:27 $NEW_MONSTER_ON_PLACE:  

 {"cardId":239,"monsterPlaceId":3} 
 Player 2 19:41:27 $REMOVE_RESOLVING_STACK_EFFECT:  

 {"stackEffectId":8} 
 Player 2 19:41:27 $SET_STACK_ICON:  

 {"iconIndex":1} 
 Player 2 19:41:27 $SHOW_STACK_EFFECT:  

 {"effectId":8} 
 Player 2 19:41:30 $REMOVE_SE_VIS_PREV:  

 {"stackEffectId":8} 
 Player 2 19:41:30 $ACTION_MASSAGE_ADD:  

 {"massage":{"_id":46,"_text":"Remove After Resolve RefillEmptySlot 8  "}} 
 Player 2 19:41:30 $UPDATE_STACK_LABLE:  

 {"stackText":" \n1:Player 2 get Holy Mulligan<Monster> reward \n2:[object Object] killed by Azazel \n3:Activate Holy Mulligan effect ChainEffects<ChainEffects>"} 
 Player 2 19:41:30 $REMOVE_FROM_STACK:  

 {"stackEffect":{"entityId":8,"creatorCardId":310,"slotType":2,"slotToFillId":3,"stackEffectType":10}} 
 Player 2 19:41:30 $ACTION_MASSAGE_ADD:  

 {"massage":{"_id":47,"_text":"Response Remove After Resolve RefillEmptySlot 8"},"childOfId":46} 
 Player 2 19:41:30 $ACTION_MASSAGE_ADD:  

 {"massage":{"_id":48,"_text":"Wait For Response From Player 1 "},"childOfId":46} 
 Player 2 19:41:30 $GIVE_PLAYER_PRIORITY:  

 {"playerId":1} 
 Player 2 19:41:30 $GET_REACTION:  

 {"playerId":1,"activePlayerId":2} 
 Player 2 19:41:30 $ACTION_MASSAGE_REMOVE:  

 {"id":48} 
 Player 2 19:41:30 $ACTION_MASSAGE_ADD:  

 {"massage":{"_id":49,"_text":"Wait For Response From Player 2 "},"childOfId":46} 
 Player 2 19:41:31 $GIVE_PLAYER_PRIORITY:  

 {"playerId":2} 
 Player 2 19:41:31 $ACTION_MASSAGE_REMOVE:  

 {"id":49} 
 Player 2 19:41:31 $ACTION_MASSAGE_REMOVE:  

 {"id":47} 
 Player 2 19:41:31 $ACTION_MASSAGE_ADD:  

 {"massage":{"_id":50,"_text":"Resolve ActivatePassiveEffect 7 "}} 
 Player 2 19:41:31 $NEW_MONSTER_PLACE:  
 Player 2 19:41:31 $NEXT_STACK_ID:  
 Player 2 19:41:31 $UPDATE_STACK_LABLE:  

 {"stackText":" \n1:Player 2 get Holy Mulligan<Monster> reward \n2:[object Object] killed by Azazel \n3:Activate Holy Mulligan effect ChainEffects<ChainEffects>"} 
 Player 2 19:41:31 $UPDATE_STACK_LABLE:  

 {"stackText":" \n1:Player 2 get Holy Mulligan<Monster> reward \n2:[object Object] killed by Azazel \n3:Activate Holy Mulligan effect ChainEffects<ChainEffects> \n4:Refill holder4 slot"} 
 Player 2 19:41:31 $ADD_TO_STACK:  

 {"stackEffect":{"entityId":9,"creatorCardId":310,"slotType":2,"slotToFillId":4,"stackEffectType":10}} 
 Player 2 19:41:31 $ADD_SE_VIS_PREV:  

 {"stackEffect":{"entityId":9,"creatorCardId":310,"slotType":2,"slotToFillId":4,"stackEffectType":10}} 
 Player 2 19:41:31 $SET_STACK_ICON:  

 {"iconIndex":0} 
 Player 2 19:41:31 $SHOW_STACK_EFFECT:  

 {"effectId":9} 
 Player 2 19:41:34 $ACTION_MASSAGE_ADD:  

 {"massage":{"_id":51,"_text":"Add RefillEmptySlot 9 "}} 
 Player 2 19:41:34 $GIVE_PLAYER_PRIORITY:  

 {"playerId":2} 
 Player 2 19:41:34 $UPDATE_STACK_LABLE:  

 {"stackText":" \n1:Player 2 get Holy Mulligan<Monster> reward \n2:[object Object] killed by Azazel \n3:Activate Holy Mulligan effect ChainEffects<ChainEffects> \n4:Refill holder4 slot"} 
 Player 2 19:41:34 $UPDATE_STACK_EFFECT:  

 {"stackEffect":{"entityId":9,"creatorCardId":310,"slotType":2,"slotToFillId":4,"stackEffectType":10}} 
 Player 2 19:41:34 $ACTION_MASSAGE_ADD:  

 {"massage":{"_id":52,"_text":"Response Adding RefillEmptySlot 9"},"childOfId":51} 
 Player 2 19:41:34 $ACTION_MASSAGE_ADD:  

 {"massage":{"_id":53,"_text":"Wait For Response From Player 2 "},"childOfId":51} 
 Player 2 19:41:34 $GIVE_PLAYER_PRIORITY:  

 {"playerId":2} 
 Player 2 19:41:34 $ACTION_MASSAGE_REMOVE:  

 {"id":53} 
 Player 2 19:41:34 $ACTION_MASSAGE_ADD:  

 {"massage":{"_id":54,"_text":"Wait For Response From Player 1 "},"childOfId":51} 
 Player 2 19:41:34 $GIVE_PLAYER_PRIORITY:  

 {"playerId":1} 
 Player 2 19:41:34 $GET_REACTION:  

 {"playerId":1,"activePlayerId":2} 
 Player 2 19:41:34 $ACTION_MASSAGE_REMOVE:  

 {"id":54} 
 Player 2 19:41:34 $ACTION_MASSAGE_REMOVE:  

 {"id":52} 
 Player 2 19:41:34 $ACTION_MASSAGE_ADD:  

 {"massage":{"_id":55,"_text":"Resolve RefillEmptySlot 9 "}} 
 Player 2 19:41:34 $UPDATE_STACK_LABLE:  

 {"stackText":" \n1:Player 2 get Holy Mulligan<Monster> reward \n2:[object Object] killed by Azazel \n3:Activate Holy Mulligan effect ChainEffects<ChainEffects> \n4:Refill holder4 slot"} 
 Player 2 19:41:34 $ADD_RESOLVING_STACK_EFFECT:  

 {"stackEffect":{"entityId":9,"creatorCardId":310,"slotType":2,"slotToFillId":4,"stackEffectType":10}} 
 Player 2 19:41:34 $DRAW_CARD:  

 {"deckType":2} 
 Player 2 19:41:34 $FLIP_CARD:  

 {"cardId":300} 
 Player 2 19:41:34 $REGISTER_PASSIVE_ITEM:  

 {"cardId":300} 
 Player 2 19:41:34 $ADD_MONSTER:  

 {"monsterPlaceId":4,"monsterId":300} 
 Player 2 19:41:34 $NEW_MONSTER_ON_PLACE:  

 {"cardId":300,"monsterPlaceId":4} 
 Player 2 19:41:34 $REMOVE_RESOLVING_STACK_EFFECT:  

 {"stackEffectId":9} 
 Player 2 19:41:34 $SET_STACK_ICON:  

 {"iconIndex":1} 
 Player 2 19:41:34 $SHOW_STACK_EFFECT:  

 {"effectId":9} 
 Player 2 19:41:37 $REMOVE_SE_VIS_PREV:  

 {"stackEffectId":9} 
 Player 2 19:41:37 $ACTION_MASSAGE_ADD:  

 {"massage":{"_id":56,"_text":"Remove After Resolve RefillEmptySlot 9  "}} 
 Player 2 19:41:37 $UPDATE_STACK_LABLE:  

 {"stackText":" \n1:Player 2 get Holy Mulligan<Monster> reward \n2:[object Object] killed by Azazel \n3:Activate Holy Mulligan effect ChainEffects<ChainEffects>"} 
 Player 2 19:41:37 $REMOVE_FROM_STACK:  

 {"stackEffect":{"entityId":9,"creatorCardId":310,"slotType":2,"slotToFillId":4,"stackEffectType":10}} 
 Player 2 19:41:37 $ACTION_MASSAGE_ADD:  

 {"massage":{"_id":57,"_text":"Response Remove After Resolve RefillEmptySlot 9"},"childOfId":56} 
 Player 2 19:41:37 $ACTION_MASSAGE_ADD:  

 {"massage":{"_id":58,"_text":"Wait For Response From Player 1 "},"childOfId":56} 
 Player 2 19:41:37 $GIVE_PLAYER_PRIORITY:  

 {"playerId":1} 
 Player 2 19:41:37 $GET_REACTION:  

 {"playerId":1,"activePlayerId":2} 
 Player 2 19:41:37 $ACTION_MASSAGE_REMOVE:  

 {"id":58} 
 Player 2 19:41:37 $ACTION_MASSAGE_ADD:  

 {"massage":{"_id":59,"_text":"Wait For Response From Player 2 "},"childOfId":56} 
 Player 2 19:41:37 $GIVE_PLAYER_PRIORITY:  

 {"playerId":2} 
 Player 2 19:41:37 $ACTION_MASSAGE_REMOVE:  

 {"id":59} 
 Player 2 19:41:37 $ACTION_MASSAGE_REMOVE:  

 {"id":57} 
 Player 2 19:41:37 $ACTION_MASSAGE_ADD:  

 {"massage":{"_id":60,"_text":"Resolve ActivatePassiveEffect 7 "}} 
 Player 2 19:41:37 $UPDATE_PASSIVE_DATA:  

 {"passiveData":{"passiveEvent":"MONSTER_IS_KILLED","args":[{"type":2}],"result":null,"preventMethod":false,"methodScopeId":277,"scopeIsPlayer":false,"index":1,"originStackId":6},"isAfterActivation":false,"index":1} 
 Player 2 19:41:37 $UPDATE_STACK_LABLE:  

 {"stackText":" \n1:Player 2 get Holy Mulligan<Monster> reward \n2:[object Object] killed by Azazel \n3:Activate Holy Mulligan effect ChainEffects<ChainEffects>"} 
 Player 2 19:41:37 $UPDATE_STACK_EFFECT:  

 {"stackEffect":{"effectCollectedData":{"effectTargets":[],"chainEffectsData":[],"methodArgs":[],"isPassive":true,"terminateOriginal":false,"effectCardOwner":277,"effectCardPlayer":277},"entityId":7,"creatorCardId":310,"hasLockingStackEffect":false,"cardActivatorId":2,"cardWithEffectId":277,"isAfterActivation":false,"index":1,"hasDataBeenCollectedYet":true,"stackEffectType":14}} 
 Player 2 19:41:38 $REMOVE_RESOLVING_STACK_EFFECT:  

 {"stackEffectId":7} 
 Player 2 19:41:38 $SET_STACK_ICON:  

 {"iconIndex":1} 
 Player 2 19:41:38 $SHOW_STACK_EFFECT:  

 {"effectId":7} 
 Player 2 19:41:40 $REMOVE_SE_VIS_PREV:  

 {"stackEffectId":7} 
 Player 2 19:41:40 $ACTION_MASSAGE_ADD:  

 {"massage":{"_id":61,"_text":"Remove After Resolve ActivatePassiveEffect 7  "}} 
 Player 2 19:41:40 $UPDATE_STACK_LABLE:  

 {"stackText":" \n1:Player 2 get Holy Mulligan<Monster> reward \n2:[object Object] killed by Azazel"} 
 Player 2 19:41:40 $REMOVE_FROM_STACK:  

 {"stackEffect":{"effectCollectedData":{"effectTargets":[],"chainEffectsData":[],"methodArgs":[],"isPassive":true,"terminateOriginal":false,"effectCardOwner":277,"effectCardPlayer":277},"entityId":7,"creatorCardId":310,"hasLockingStackEffect":false,"cardActivatorId":2,"cardWithEffectId":277,"isAfterActivation":false,"index":1,"hasDataBeenCollectedYet":true,"stackEffectType":14}} 
 Player 2 19:41:40 $ACTION_MASSAGE_ADD:  

 {"massage":{"_id":62,"_text":"Response Remove After Resolve ActivatePassiveEffect 7"},"childOfId":61} 
 Player 2 19:41:40 $ACTION_MASSAGE_ADD:  

 {"massage":{"_id":63,"_text":"Wait For Response From Player 2 "},"childOfId":61} 
 Player 2 19:41:40 $GIVE_PLAYER_PRIORITY:  

 {"playerId":2} 
 Player 2 19:41:41 $ACTION_MASSAGE_REMOVE:  

 {"id":63} 
 Player 2 19:41:41 $ACTION_MASSAGE_ADD:  

 {"massage":{"_id":64,"_text":"Wait For Response From Player 1 "},"childOfId":61} 
 Player 2 19:41:41 $GIVE_PLAYER_PRIORITY:  

 {"playerId":1} 
 Player 2 19:41:41 $GET_REACTION:  

 {"playerId":1,"activePlayerId":2} 
 Player 2 19:41:41 $ACTION_MASSAGE_REMOVE:  

 {"id":64} 
 Player 2 19:41:41 $ACTION_MASSAGE_REMOVE:  

 {"id":62} 
 Player 2 19:41:41 $ACTION_MASSAGE_ADD:  

 {"massage":{"_id":65,"_text":"Resolve MonsterDeath 5 "}} 
 Player 2 19:41:41 $GIVE_PLAYER_PRIORITY:  

 {"playerId":2} 
 Player 2 19:41:41 $UPDATE_STACK_LABLE:  

 {"stackText":" \n1:Player 2 get Holy Mulligan<Monster> reward \n2:[object Object] killed by Azazel"} 
 Player 2 19:41:41 $ADD_SE_VIS_PREV:  

 {"stackEffect":{"entityId":6,"creatorCardId":310,"monsterCardWithRewardId":277,"playerCardIdToReward":310,"stackEffectType":7}} 
 Player 2 19:41:41 $SET_STACK_ICON:  

 {"iconIndex":0} 
 Player 2 19:41:41 $SHOW_STACK_EFFECT:  

 {"effectId":6} 
 Player 2 19:41:44 $CLEAR_SE_VIS:  
 Player 2 19:41:44 $UPDATE_STACK_LABLE:  

 {"stackText":" \n1:Player 2 get Holy Mulligan<Monster> reward \n2:[object Object] killed by Azazel"} 
 Player 2 19:41:44 $ADD_SE_VIS_PREV:  

 {"stackEffect":{"entityId":6,"creatorCardId":310,"monsterCardWithRewardId":277,"playerCardIdToReward":310,"stackEffectType":7}} 
 Player 2 19:41:44 $ADD_SE_VIS_PREV:  

 {"stackEffect":{"entityId":5,"creatorCardId":310,"monsterToDieCardId":277,"stackEffectType":5,"killerId":310}} 
 Player 2 19:41:44 $REPLACE_STACK:  

 {"currentStack":[{"entityId":6,"creatorCardId":310,"monsterCardWithRewardId":277,"playerCardIdToReward":310,"stackEffectType":7},{"entityId":5,"creatorCardId":310,"monsterToDieCardId":277,"stackEffectType":5,"killerId":310}]} 
 Player 2 19:41:44 $UPDATE_STACK_EFFECT:  

 {"stackEffect":{"entityId":5,"creatorCardId":310,"monsterToDieCardId":277,"stackEffectType":5,"killerId":310}} 
 Player 2 19:41:44 $REMOVE_RESOLVING_STACK_EFFECT:  

 {"stackEffectId":5} 
 Player 2 19:41:44 $SET_STACK_ICON:  

 {"iconIndex":1} 
 Player 2 19:41:44 $SHOW_STACK_EFFECT:  

 {"effectId":5} 
 Player 2 19:41:47 $REMOVE_SE_VIS_PREV:  

 {"stackEffectId":5} 
 Player 2 19:41:47 $ACTION_MASSAGE_ADD:  

 {"massage":{"_id":66,"_text":"Remove After Resolve MonsterDeath 5  "}} 
 Player 2 19:41:47 $UPDATE_STACK_LABLE:  

 {"stackText":" \n1:Player 2 get Holy Mulligan<Monster> reward"} 
 Player 2 19:41:47 $REMOVE_FROM_STACK:  

 {"stackEffect":{"entityId":5,"creatorCardId":310,"monsterToDieCardId":277,"stackEffectType":5,"killerId":310}} 
 Player 2 19:41:47 $ACTION_MASSAGE_ADD:  

 {"massage":{"_id":67,"_text":"Response Remove After Resolve MonsterDeath 5"},"childOfId":66} 
 Player 2 19:41:47 $ACTION_MASSAGE_ADD:  

 {"massage":{"_id":68,"_text":"Wait For Response From Player 2 "},"childOfId":66} 
 Player 2 19:41:47 $GIVE_PLAYER_PRIORITY:  

 {"playerId":2} 
 Player 2 19:41:47 $ACTION_MASSAGE_REMOVE:  

 {"id":68} 
 Player 2 19:41:47 $ACTION_MASSAGE_ADD:  

 {"massage":{"_id":69,"_text":"Wait For Response From Player 1 "},"childOfId":66} 
 Player 2 19:41:47 $GIVE_PLAYER_PRIORITY:  

 {"playerId":1} 
 Player 2 19:41:47 $GET_REACTION:  

 {"playerId":1,"activePlayerId":2} 
 Player 2 19:41:47 $ACTION_MASSAGE_REMOVE:  

 {"id":69} 
 Player 2 19:41:47 $ACTION_MASSAGE_REMOVE:  

 {"id":67} 
 Player 2 19:41:47 $ACTION_MASSAGE_ADD:  

 {"massage":{"_id":70,"_text":"Resolve MonsterRewardStackEffect 6 "}} 
 Player 2 19:41:47 $UPDATE_STACK_LABLE:  

 {"stackText":" \n1:Player 2 get Holy Mulligan<Monster> reward"} 
 Player 2 19:41:47 $ADD_RESOLVING_STACK_EFFECT:  

 {"stackEffect":{"entityId":6,"creatorCardId":310,"monsterCardWithRewardId":277,"playerCardIdToReward":310,"stackEffectType":7}} 
 Player 2 19:41:47 $SET_MONEY:  

 {"playerId":2,"numOfCoins":6} 
 Player 2 19:41:47 $UPDATE_PASSIVE_DATA:  

 {"passiveData":{"passiveEvent":"PLAYER_CHANGE_MONEY","args":[{"type":2,"number":3}],"result":null,"preventMethod":false,"methodScopeId":310,"scopeIsPlayer":true,"index":7,"originStackId":-1},"isAfterActivation":true,"index":7} 
 Player 2 19:41:47 $UPDATE_PASSIVE_DATA:  

 {"passiveData":{"passiveEvent":"MONSTER_IS_KILLED","args":[],"result":null,"preventMethod":false,"methodScopeId":277,"scopeIsPlayer":false,"index":8,"originStackId":6},"isAfterActivation":true,"index":8} 
 Player 2 19:41:47 $UPDATE_STACK_LABLE:  

 {"stackText":"Empty Stack"} 
 Player 2 19:41:47 $REMOVE_RESOLVING_STACK_EFFECT:  

 {"stackEffectId":6} 
 Player 2 19:41:48 $REMOVE_SE_VIS_PREV:  

 {"stackEffectId":6} 
 Player 2 19:41:48 $ACTION_MASSAGE_ADD:  

 {"massage":{"_id":71,"_text":"Fizzle MonsterRewardStackEffect 6"}} 
 Player 2 19:41:48 $FIZZLE_STACK_EFFECT:  

 {"entityId":6} 
 Player 2 19:41:48 $CLEAR_SE_VIS:  
 Player 2 19:41:48 $MOVE_CARD:  

 {"moveIndex":8,"cardId":277,"placeID":331,"flipIfFlipped":true,"playerId":2,"placeType":"Card"} 
 Player 2 19:41:48 $CLEAR_SE_VIS:  
 Player 2 19:41:48 $MOVE_CARD_TO_PILE:  

 {"type":2,"cardId":277} 
 Player 2 19:41:48 $REMOVE_FROM_PASSIVE_MANAGER:  

 {"cardId":277} 
 Player 2 19:41:48 $REMOVE_MONSTER:  

 {"holderId":1,"monsterId":277} 
 Player 2 19:41:48 $NEXT_STACK_ID:  
 Player 2 19:41:48 $UPDATE_STACK_LABLE:  

 {"stackText":" \n1:Refill holder1 slot"} 
 Player 2 19:41:48 $ADD_TO_STACK:  

 {"stackEffect":{"entityId":10,"creatorCardId":310,"slotType":2,"slotToFillId":1,"stackEffectType":10}} 
 Player 2 19:41:48 $ADD_SE_VIS_PREV:  

 {"stackEffect":{"entityId":10,"creatorCardId":310,"slotType":2,"slotToFillId":1,"stackEffectType":10}} 
 Player 2 19:41:48 $SET_STACK_ICON:  

 {"iconIndex":0} 
 Player 2 19:41:48 $SHOW_STACK_EFFECT:  

 {"effectId":10} 
 Player 2 19:41:51 $ACTION_MASSAGE_ADD:  

 {"massage":{"_id":72,"_text":"Add RefillEmptySlot 10 "}} 
 Player 2 19:41:51 $GIVE_PLAYER_PRIORITY:  

 {"playerId":2} 
 Player 2 19:41:51 $UPDATE_STACK_EFFECT:  

 {"stackEffect":{"entityId":10,"creatorCardId":310,"slotType":2,"slotToFillId":1,"stackEffectType":10}} 
 Player 2 19:41:51 $ACTION_MASSAGE_ADD:  

 {"massage":{"_id":73,"_text":"Response Adding RefillEmptySlot 10"},"childOfId":72} 
 Player 2 19:41:51 $ACTION_MASSAGE_ADD:  

 {"massage":{"_id":74,"_text":"Wait For Response From Player 2 "},"childOfId":72} 
 Player 2 19:41:51 $GIVE_PLAYER_PRIORITY:  

 {"playerId":2} 
 Player 2 19:41:51 $ACTION_MASSAGE_REMOVE:  

 {"id":74} 
 Player 2 19:41:51 $ACTION_MASSAGE_ADD:  

 {"massage":{"_id":75,"_text":"Wait For Response From Player 1 "},"childOfId":72} 
 Player 2 19:41:51 $GIVE_PLAYER_PRIORITY:  

 {"playerId":1} 
 Player 2 19:41:51 $GET_REACTION:  

 {"playerId":1,"activePlayerId":2} 
 Player 2 19:41:51 $ACTION_MASSAGE_REMOVE:  

 {"id":75} 
 Player 2 19:41:51 $ACTION_MASSAGE_REMOVE:  

 {"id":73} 
 Player 2 19:41:51 $ACTION_MASSAGE_ADD:  

 {"massage":{"_id":76,"_text":"Resolve RefillEmptySlot 10 "}} 
 Player 2 19:41:51 $ADD_RESOLVING_STACK_EFFECT:  

 {"stackEffect":{"entityId":10,"creatorCardId":310,"slotType":2,"slotToFillId":1,"stackEffectType":10}} 
 Player 2 19:41:51 $DRAW_CARD:  

 {"deckType":2} 
 Player 2 19:41:51 $FLIP_CARD:  

 {"cardId":272} 
 Player 2 19:41:52 $REGISTER_PASSIVE_ITEM:  

 {"cardId":272} 
 Player 2 19:41:52 $ADD_MONSTER:  

 {"monsterPlaceId":1,"monsterId":272} 
 Player 2 19:41:52 $NEW_MONSTER_ON_PLACE:  

 {"cardId":272,"monsterPlaceId":1} 
 Player 2 19:41:52 $REMOVE_RESOLVING_STACK_EFFECT:  

 {"stackEffectId":10} 
 Player 2 19:41:52 $SET_STACK_ICON:  

 {"iconIndex":1} 
 Player 2 19:41:52 $SHOW_STACK_EFFECT:  

 {"effectId":10} 
 Player 2 19:41:54 $REMOVE_SE_VIS_PREV:  

 {"stackEffectId":10} 
 Player 2 19:41:54 $ACTION_MASSAGE_ADD:  

 {"massage":{"_id":77,"_text":"Remove After Resolve RefillEmptySlot 10  "}} 
 Player 2 19:41:54 $UPDATE_STACK_LABLE:  

 {"stackText":"Empty Stack"} 
 Player 2 19:41:54 $REMOVE_FROM_STACK:  

 {"stackEffect":{"entityId":10,"creatorCardId":310,"slotType":2,"slotToFillId":1,"stackEffectType":10}} 
 Player 2 19:41:55 $ACTION_MASSAGE_ADD:  

 {"massage":{"_id":78,"_text":"Response Remove After Resolve RefillEmptySlot 10"},"childOfId":77} 
 Player 2 19:41:55 $ACTION_MASSAGE_ADD:  

 {"massage":{"_id":79,"_text":"Wait For Response From Player 1 "},"childOfId":77} 
 Player 2 19:41:55 $GIVE_PLAYER_PRIORITY:  

 {"playerId":1} 
 Player 2 19:41:55 $GET_REACTION:  

 {"playerId":1,"activePlayerId":2} 
 Player 2 19:41:55 $ACTION_MASSAGE_REMOVE:  

 {"id":79} 
 Player 2 19:41:55 $ACTION_MASSAGE_ADD:  

 {"massage":{"_id":80,"_text":"Wait For Response From Player 2 "},"childOfId":77} 
 Player 2 19:41:55 $GIVE_PLAYER_PRIORITY:  

 {"playerId":2} 
 Player 2 19:41:55 $ACTION_MASSAGE_REMOVE:  

 {"id":80} 
 Player 2 19:41:55 $ACTION_MASSAGE_REMOVE:  

 {"id":78} 
 Player 2 19:41:55 $ACTION_MASSAGE_ADD:  

 {"massage":{"_id":81,"_text":"Stack Was Emptied "}} 
 Player 2 19:41:55 $UPDATE_STACK_LABLE:  

 {"stackText":"Empty Stack"} 
 Player 2 19:41:55 $CLEAR_SE_VIS:  
 Player 2 19:41:55 $REMOVE_RESOLVING_STACK_EFFECT:  

 {"stackEffectId":6} 
 Player 2 19:41:55 $ACTION_MASSAGE_ADD:  

 {"massage":{"_id":82,"_text":"Stack Was Emptied "}} 
 Player 2 19:41:55 $CLEAR_SE_VIS:  
 Player 2 19:42:17 $NEXT_STACK_ID:  
 Player 2 19:42:17 $UPDATE_STACK_LABLE:  

 {"stackText":" \n1:Player 2  declared attack on Holy Bony"} 
 Player 2 19:42:17 $ADD_TO_STACK:  

 {"stackEffect":{"entityId":11,"creatorCardId":310,"attackingPlayerCardId":310,"idOfCardBeingAttacked":272,"stackEffectType":4}} 
 Player 2 19:42:17 $ADD_SE_VIS_PREV:  

 {"stackEffect":{"entityId":11,"creatorCardId":310,"attackingPlayerCardId":310,"idOfCardBeingAttacked":272,"stackEffectType":4}} 
 Player 2 19:42:17 $SET_STACK_ICON:  

 {"iconIndex":0} 
 Player 2 19:42:17 $SHOW_STACK_EFFECT:  

 {"effectId":11} 
 Player 2 19:42:20 $ACTION_MASSAGE_ADD:  

 {"massage":{"_id":83,"_text":"Add DeclareAttack 11 "}} 
 Player 2 19:42:20 $GIVE_PLAYER_PRIORITY:  

 {"playerId":2} 
 Player 2 19:42:20 $UPDATE_STACK_EFFECT:  

 {"stackEffect":{"entityId":11,"creatorCardId":310,"attackingPlayerCardId":310,"idOfCardBeingAttacked":272,"stackEffectType":4}} 
 Player 2 19:42:20 $ACTION_MASSAGE_ADD:  

 {"massage":{"_id":84,"_text":"Response Adding DeclareAttack 11"},"childOfId":83} 
 Player 2 19:42:20 $ACTION_MASSAGE_ADD:  

 {"massage":{"_id":85,"_text":"Wait For Response From Player 2 "},"childOfId":83} 
 Player 2 19:42:20 $GIVE_PLAYER_PRIORITY:  

 {"playerId":2} 
 Player 2 19:42:20 $ACTION_MASSAGE_REMOVE:  

 {"id":85} 
 Player 2 19:42:20 $ACTION_MASSAGE_ADD:  

 {"massage":{"_id":86,"_text":"Wait For Response From Player 1 "},"childOfId":83} 
 Player 2 19:42:20 $GIVE_PLAYER_PRIORITY:  

 {"playerId":1} 
 Player 2 19:42:20 $GET_REACTION:  

 {"playerId":1,"activePlayerId":2} 
 Player 2 19:42:20 $ACTION_MASSAGE_REMOVE:  

 {"id":86} 
 Player 2 19:42:20 $ACTION_MASSAGE_REMOVE:  

 {"id":84} 
 Player 2 19:42:20 $ACTION_MASSAGE_ADD:  

 {"massage":{"_id":87,"_text":"Resolve DeclareAttack 11 "}} 
 Player 2 19:42:20 $ADD_RESOLVING_STACK_EFFECT:  

 {"stackEffect":{"entityId":11,"creatorCardId":310,"attackingPlayerCardId":310,"idOfCardBeingAttacked":272,"stackEffectType":4}} 
 Player 2 19:42:20 $ACTIVATE_PARTICLE_EFFECT:  

 {"cardId":272,"particleType":5} 
 Player 2 19:42:20 $UPDATE_PASSIVE_DATA:  

 {"passiveData":{"passiveEvent":"PLAYER_DECLARE_ATTACK","args":[],"result":null,"preventMethod":false,"methodScopeId":310,"scopeIsPlayer":true,"index":9,"originStackId":11},"isAfterActivation":true,"index":9} 
 Player 2 19:42:20 $UPDATE_STACK_EFFECT:  

 {"stackEffect":{"entityId":11,"creatorCardId":310,"attackingPlayerCardId":310,"idOfCardBeingAttacked":272,"stackEffectType":4}} 
 Player 2 19:42:20 $REMOVE_RESOLVING_STACK_EFFECT:  

 {"stackEffectId":11} 
 Player 2 19:42:20 $SET_STACK_ICON:  

 {"iconIndex":1} 
 Player 2 19:42:20 $SHOW_STACK_EFFECT:  

 {"effectId":11} 
 Player 2 19:42:23 $REMOVE_SE_VIS_PREV:  

 {"stackEffectId":11} 
 Player 2 19:42:23 $ACTION_MASSAGE_ADD:  

 {"massage":{"_id":88,"_text":"Remove After Resolve DeclareAttack 11  "}} 
 Player 2 19:42:23 $UPDATE_STACK_LABLE:  

 {"stackText":"Empty Stack"} 
 Player 2 19:42:23 $REMOVE_FROM_STACK:  

 {"stackEffect":{"entityId":11,"creatorCardId":310,"attackingPlayerCardId":310,"idOfCardBeingAttacked":272,"stackEffectType":4}} 
 Player 2 19:42:23 $ACTION_MASSAGE_ADD:  

 {"massage":{"_id":89,"_text":"Response Remove After Resolve DeclareAttack 11"},"childOfId":88} 
 Player 2 19:42:23 $ACTION_MASSAGE_ADD:  

 {"massage":{"_id":90,"_text":"Wait For Response From Player 1 "},"childOfId":88} 
 Player 2 19:42:23 $GIVE_PLAYER_PRIORITY:  

 {"playerId":1} 
 Player 2 19:42:23 $GET_REACTION:  

 {"playerId":1,"activePlayerId":2} 
 Player 2 19:42:23 $ACTION_MASSAGE_REMOVE:  

 {"id":90} 
 Player 2 19:42:23 $ACTION_MASSAGE_ADD:  

 {"massage":{"_id":91,"_text":"Wait For Response From Player 2 "},"childOfId":88} 
 Player 2 19:42:23 $GIVE_PLAYER_PRIORITY:  

 {"playerId":2} 
 Player 2 19:42:23 $ACTION_MASSAGE_REMOVE:  

 {"id":91} 
 Player 2 19:42:23 $ACTION_MASSAGE_REMOVE:  

 {"id":89} 
 Player 2 19:42:23 $ACTION_MASSAGE_ADD:  

 {"massage":{"_id":92,"_text":"Stack Was Emptied "}} 
 Player 2 19:42:23 $UPDATE_STACK_LABLE:  

 {"stackText":"Empty Stack"} 
 Player 2 19:42:24 $CLEAR_SE_VIS:  
 Player 2 19:42:40 $MATCH: 