{"version":3,"sources":["injectors/IModuleInjector.ts"],"names":[],"mappings":";;;AAEA,gDAA+C;AAyC/C;;GAEG;AACH;IAA0E,qDAAe;IACrF,mCAAY,IAAY;eACpB,kBAAM,mBAAmB,EAAE,IAAI,CAAC;IACpC,CAAC;IAE0B,2CAAiB,GAAxB;QACI,OAAO,EAAC,MAAM,EAAC,2BAA2B,EAAC,QAAQ,EAAC,EAAC,aAAa,EAAC,CAAC,MAAM,CAAC,EAAC,EAAC,CAAC;IAClF,CAAC;IACN,gCAAC;AAAD,CARnB,AAQoB,CARsD,2BAAY,GAQlE;AARP,8DAAyB;AAUtC;;GAEG;AACU,QAAA,mBAAmB,GAAG,IAAI,yBAAyB,CAAkB,EAAE,CAAC,CAAC","file":"../../injectors/IModuleInjector.js","sourcesContent":["import { Type } from '../types';\r\nimport { IContainer } from '../IContainer';\r\nimport { Registration } from '../Registration';\r\n\r\n/**\r\n *  InjectorResult\r\n *\r\n * @export\r\n * @interface InjectorResult\r\n */\r\nexport interface InjectorResult {\r\n    injected: Type<any>[];\r\n    next?: Type<any>[];\r\n}\r\n\r\n/**\r\n * module injector.\r\n *\r\n * @export\r\n * @interface IModuleInjector\r\n */\r\nexport interface IModuleInjector {\r\n    /**\r\n     * inject module to container.\r\n     *\r\n     * @param {IContainer} container\r\n     * @param {Type<any>[]} modules\r\n     * @returns {Type<any>[]}\r\n     * @memberof IModuleInjector\r\n     */\r\n    inject(container: IContainer, modules: Type<any>[]): Promise<InjectorResult>;\r\n\r\n    /**\r\n     * sync inject module.\r\n     *\r\n     * @param {IContainer} container\r\n     * @param {Type<any>[]} modules\r\n     * @returns {InjectorResult}\r\n     * @memberof IModuleInjector\r\n     */\r\n    syncInject(container: IContainer, modules: Type<any>[]): InjectorResult;\r\n}\r\n\r\n/**\r\n *  inject module injector token.\r\n */\r\nexport class InjectModuleInjectorToken<T extends IModuleInjector> extends Registration<T> {\r\n    constructor(desc: string) {\r\n        super('DI_ModuleInjector', desc)\r\n    }\r\n\n                        static getClassAnnations():any  {\n                            return {\"name\":\"InjectModuleInjectorToken\",\"params\":{\"constructor\":[\"desc\"]}};\n                        }\n                   }\r\n\r\n/**\r\n * async module injector token.\r\n */\r\nexport const ModuleInjectorToken = new InjectModuleInjectorToken<IModuleInjector>('');\r\n"]}