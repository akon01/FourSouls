{"version":3,"sources":["core/factories/MethodDecoratorFactory.ts"],"names":[],"mappings":";;AAAA,4BAA0B;AAG1B,yDAAuF;AACvF,mDAAgD;AAEhD,uCAAsC;AA+BtC;;;;;;;;;GASG;AACH,SAAgB,qBAAqB,CACjC,IAAY,EACZ,OAAyB,EACzB,eAAoC;IAEpC,IAAI,aAAa,GAAG,CAAC,IAAkB,EAAE,EAAE;QACvC,IAAI,OAAO,EAAE;YACT,OAAO,CAAC,IAAI,CAAC,CAAC;SACjB;QAED,IAAI,CAAC,IAAI,CAAI;YACT,KAAK,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,eAAO,CAAC,GAAG,CAAC;YAC5B,WAAW,EAAE,CAAC,QAAQ,EAAE,GAAG,EAAE,EAAE;gBAC3B,QAAQ,CAAC,SAAS,GAAG,GAAG,CAAC;YAC7B,CAAC;SACJ,CAAC,CAAC;IACP,CAAC,CAAA;IAED,IAAI,SAAS,GAAG,kCAAe,CAAI,IAAI,EAAE,aAAa,EAAE,eAAe,CAAC,CAAC;IACzE,SAAS,CAAC,aAAa,GAAG,6BAAa,CAAC,MAAM,CAAC;IAC/C,OAAO,SAAS,CAAC;AACrB,CAAC;AArBD,sDAqBC","file":"../../../core/factories/MethodDecoratorFactory.js","sourcesContent":["import 'reflect-metadata';\r\nimport { MethodMetadata } from '../metadatas';\r\nimport { ParamProviders } from '../../providers';\r\nimport { createDecorator, MetadataAdapter, MetadataExtends } from './DecoratorFactory';\r\nimport { DecoratorType } from './DecoratorType';\r\nimport { ArgsIterator } from './ArgsIterator';\r\nimport { isArray } from '../../utils';\r\n\r\n\r\n/**\r\n * Method decorator.\r\n *\r\n * @export\r\n * @interface IMethodDecorator\r\n */\r\nexport interface IMethodDecorator<T extends MethodMetadata> {\r\n    /**\r\n     * create method decorator with providers.\r\n     *\r\n     * @param  {ParamProviders[]} [providers]\r\n     */\r\n    (providers?: ParamProviders[]): MethodDecorator;\r\n    /**\r\n     * create method decorator with metadata map.\r\n     * @param {T} [metadata]\r\n     */\r\n    (metadata?: T): MethodDecorator;\r\n    /**\r\n     * create method decorator.\r\n     * @param {Object} target\r\n     * @param {(string | symbol)} propertyKey\r\n     * @param {TypedPropertyDescriptor<any>} descriptor\r\n     */\r\n    (target: Object, propertyKey: string | symbol, descriptor: TypedPropertyDescriptor<any>): void;\r\n}\r\n\r\n\r\n/**\r\n * create method decorator.\r\n *\r\n * @export\r\n * @template T metadata type.\r\n * @param {string} name decorator name.\r\n * @param {MetadataAdapter} [adapter]  metadata adapter\r\n * @param {MetadataExtends<T>} [metadataExtends] add extents for metadata.\r\n * @returns\r\n */\r\nexport function createMethodDecorator<T extends MethodMetadata>(\r\n    name: string,\r\n    adapter?: MetadataAdapter,\r\n    metadataExtends?: MetadataExtends<T>): IMethodDecorator<T> {\r\n\r\n    let methodAdapter = (args: ArgsIterator) => {\r\n        if (adapter) {\r\n            adapter(args);\r\n        }\r\n\r\n        args.next<T>({\r\n            match: (arg) => isArray(arg),\r\n            setMetadata: (metadata, arg) => {\r\n                metadata.providers = arg;\r\n            }\r\n        });\r\n    }\r\n\r\n    let decorator = createDecorator<T>(name, methodAdapter, metadataExtends);\r\n    decorator.decoratorType = DecoratorType.Method;\r\n    return decorator;\r\n}\r\n"]}