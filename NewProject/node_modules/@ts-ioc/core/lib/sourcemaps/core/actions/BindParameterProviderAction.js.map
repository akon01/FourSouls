{"version":3,"sources":["core/actions/BindParameterProviderAction.ts"],"names":[],"mappings":";;;AAAA,qDAAoD;AAEpD,6CAA4C;AAC5C,0CAA0E;AAI1E,qCAAsC;AAatC;;;;;;GAMG;AACH;IAAiD,uDAAe;IAE5D;eACI,kBAAM,yBAAW,CAAC,sBAAsB,CAAC;IAC7C,CAAC;IAES,6CAAO,GAAjB,UAAkB,SAAqB,EAAE,IAAqC;QAC1E,IAAI,IAAI,CAAC,cAAc,IAAI,IAAI,CAAC,cAAc,KAAK,SAAS,EAAE;YAC1D,OAAO;SACV;QACD,IAAI,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC;QAC3B,IAAI,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;QACnC,IAAI,SAAS,GAAG,SAAS,CAAC,YAAY,EAAE,CAAC;QAEzC,IAAI,MAAM,GAAG,SAAS,CAAC,mBAAmB,CAAC,IAAI,EAAE,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,yBAAW,CAAC,sBAAsB,CAAC,IAAI,gCAAoB,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,EAAlG,CAAkG,CAAC,CAAC;QAE7J,IAAI,SAAS,GAAqB,EAAE,CAAC;QACrC,MAAM,CAAC,OAAO,CAAC,UAAA,IAAI;YACf,IAAI,UAAU,GAAG,gCAAoB,CAAiB,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;YACvE,IAAI,SAAS,GAAG,UAAU,CAAC,WAAW,CAAC,CAAC;YACxC,IAAI,SAAS,IAAI,eAAO,CAAC,SAAS,CAAC,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE;gBACzD,SAAS,CAAC,OAAO,CAAC,UAAA,IAAI;oBAClB,IAAI,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE;wBAC7C,SAAS,GAAG,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;qBAChD;gBACL,CAAC,CAAC,CAAC;aACN;QACL,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;IAChC,CAAC;IAE0B,6CAAiB,GAAxB;QACI,OAAO,EAAC,MAAM,EAAC,6BAA6B,EAAC,QAAQ,EAAC,EAAC,aAAa,EAAC,EAAE,EAAC,SAAS,EAAC,CAAC,WAAW,EAAC,MAAM,CAAC,EAAC,EAAC,CAAC;IAC7G,CAAC;IACN,kCAAC;AAAD,CAlCnB,AAkCoB,CAlC6B,iCAAe,GAkC5C;AAlCP,kEAA2B","file":"../../../core/actions/BindParameterProviderAction.js","sourcesContent":["import { ActionComposite } from './ActionComposite';\r\nimport { ActionData } from '../ActionData';\r\nimport { CoreActions } from './CoreActions';\r\nimport { getOwnMethodMetadata, hasOwnMethodMetadata } from '../factories';\r\nimport { MethodMetadata } from '../metadatas';\r\nimport { IContainer } from '../../IContainer';\r\nimport { ParamProviders } from '../../providers';\r\nimport { isArray } from '../../utils';\r\n\r\n/**\r\n * bind parameter provider action data.\r\n *\r\n * @export\r\n * @interface BindParameterProviderActionData\r\n * @extends {ActionData<ParamProviders[]>}\r\n */\r\nexport interface BindParameterProviderActionData extends ActionData<ParamProviders[]> {\r\n\r\n}\r\n\r\n/**\r\n * bind parameters action.\r\n *\r\n * @export\r\n * @class BindParameterProviderAction\r\n * @extends {ActionComposite}\r\n */\r\nexport class BindParameterProviderAction extends ActionComposite {\r\n\r\n    constructor() {\r\n        super(CoreActions.bindParameterProviders)\r\n    }\r\n\r\n    protected working(container: IContainer, data: BindParameterProviderActionData) {\r\n        if (data.raiseContainer && data.raiseContainer !== container) {\r\n            return;\r\n        }\r\n        let type = data.targetType;\r\n        let propertyKey = data.propertyKey;\r\n        let lifeScope = container.getLifeScope();\r\n\r\n        let matchs = lifeScope.getMethodDecorators(type, surm => surm.actions.includes(CoreActions.bindParameterProviders) && hasOwnMethodMetadata(surm.name, type));\r\n\r\n        let providers: ParamProviders[] = [];\r\n        matchs.forEach(surm => {\r\n            let methodmtas = getOwnMethodMetadata<MethodMetadata>(surm.name, type);\r\n            let metadatas = methodmtas[propertyKey];\r\n            if (metadatas && isArray(metadatas) && metadatas.length > 0) {\r\n                metadatas.forEach(meta => {\r\n                    if (meta.providers && meta.providers.length > 0) {\r\n                        providers = providers.concat(meta.providers);\r\n                    }\r\n                });\r\n            }\r\n        });\r\n        data.execResult = providers;\r\n    }\r\n\n                        static getClassAnnations():any  {\n                            return {\"name\":\"BindParameterProviderAction\",\"params\":{\"constructor\":[],\"working\":[\"container\",\"data\"]}};\n                        }\n                   }\r\n\r\n"]}