{"version":3,"sources":["core/decorators/Component.ts"],"names":[],"mappings":";;AAAA,0CAAqE;AAqBrE;;;;GAIG;AACU,QAAA,SAAS,GAAwB,gCAAoB,CAAqB,WAAW,CAAC,CAAC","file":"../../../core/decorators/Component.js","sourcesContent":["import { createClassDecorator, IClassDecorator } from '../factories';\r\nimport { InjectableMetadata } from '../metadatas';\r\n\r\n/**\r\n * Component decorator\r\n *\r\n * @export\r\n * @interface IInjectableDecorator\r\n * @extends {IClassDecorator<InjectableMetadata>}\r\n */\r\nexport interface IComponentDecorator extends IClassDecorator<InjectableMetadata> {\r\n    /**\r\n     * Component decorator, define for class. use to define the class. it can setting provider to some token, singleton or not. it will execute  [`ComponentLifecycle`]\r\n     *\r\n     * @Component\r\n     *\r\n     * @param {InjectableMetadata} [metadata] metadata map.\r\n     */\r\n    (metadata?: InjectableMetadata): ClassDecorator;\r\n}\r\n\r\n/**\r\n * Component decorator, define for class. use to define the class. it can setting provider to some token, singleton or not. it will execute  [`ComponentLifecycle`]\r\n *\r\n * @Component\r\n */\r\nexport const Component: IComponentDecorator = createClassDecorator<InjectableMetadata>('Component');\r\n\r\n"]}