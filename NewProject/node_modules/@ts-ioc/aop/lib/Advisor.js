"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var core_1 = require("@ts-ioc/core");
var Advice_1 = require("./decorators/Advice");
var NonePointcut_1 = require("./decorators/NonePointcut");
var IAdvisor_1 = require("./IAdvisor");
/**
 * for global aop advisor.
 *
 * @export
 * @class Advisor
 */
var Advisor = /** @class */ (function () {
    function Advisor() {
        this.aspects = new Map();
        this.aspectIocs = new Map();
        this.advices = new Map();
    }
    /**
     * set advices.
     *
     * @param {string} key
     * @param {Advices} advices
     * @memberof Advisor
     */
    Advisor.prototype.setAdvices = function (key, advices) {
        if (!this.advices.has(key)) {
            this.advices.set(key, advices);
        }
    };
    /**
     * get advices.
     *
     * @param {string} key
     * @returns
     * @memberof Advisor
     */
    Advisor.prototype.getAdvices = function (key) {
        if (!this.advices.has(key)) {
            return null;
        }
        return this.advices.get(key);
    };
    /**
     * has register advices or not.
     *
     * @param {Type<any>} targetType
     * @returns {boolean}
     * @memberof Advisor
     */
    Advisor.prototype.hasRegisterAdvices = function (targetType) {
        var _this = this;
        var methods = core_1.lang.keys(Object.getOwnPropertyDescriptors(targetType.prototype));
        var className = core_1.lang.getClassName(targetType);
        return methods.some(function (m) { return _this.advices.has(className + "." + m); });
    };
    /**
     * add aspect.
     *
     * @param {Type<any>} aspect
     * @param {IContainer} raiseContainer
     * @memberof Advisor
     */
    Advisor.prototype.add = function (aspect, raiseContainer) {
        if (!this.aspects.has(aspect)) {
            var metas = core_1.getOwnMethodMetadata(Advice_1.Advice, aspect);
            this.aspects.set(aspect, metas);
            this.aspectIocs.set(aspect, raiseContainer);
        }
    };
    Advisor.prototype.getContainer = function (aspect, defaultContainer) {
        if (this.aspectIocs.has(aspect)) {
            return this.aspectIocs.get(aspect) || defaultContainer;
        }
        return defaultContainer;
    };
    /**
     * resolve aspect.
     *
     * @template T
     * @param {Type<T>} aspect
     * @param {...ParamProviders[]} providers
     * @returns {T}
     * @memberof Advisor
     */
    Advisor.prototype.resolve = function (aspect) {
        var providers = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            providers[_i - 1] = arguments[_i];
        }
        var _a;
        if (this.aspectIocs.has(aspect)) {
            return (_a = this.aspectIocs.get(aspect)).resolve.apply(_a, [aspect].concat(providers));
        }
        return null;
    };
    Advisor.getClassAnnations = function () {
        return { "name": "Advisor", "params": { "constructor": [], "setAdvices": ["key", "advices"], "getAdvices": ["key"], "hasRegisterAdvices": ["targetType"], "add": ["aspect", "raiseContainer"], "getContainer": ["aspect", "defaultContainer"], "resolve": ["aspect", "providers"] } };
    };
    Advisor = tslib_1.__decorate([
        NonePointcut_1.NonePointcut(),
        core_1.Singleton(IAdvisor_1.AdvisorToken),
        tslib_1.__metadata("design:paramtypes", [])
    ], Advisor);
    return Advisor;
}());
exports.Advisor = Advisor;

//# sourceMappingURL=sourcemaps/Advisor.js.map
