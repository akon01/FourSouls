"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("reflect-metadata");
const DecoratorFactory_1 = require("./DecoratorFactory");
const DecoratorType_1 = require("./DecoratorType");
const utils_1 = require("../../utils");
/**
 * create parameter or property decorator
 *
 * @export
 * @template T
 * @param {string} name
 * @param {MetadataAdapter} [adapter]  metadata adapter
 * @param {MetadataExtends<T>} [metadataExtends] add extents for metadata.
 * @returns {IParamPropDecorator<T>}
 */
function createParamPropDecorator(name, adapter, metadataExtends) {
    let paramPropAdapter = ((args) => {
        if (adapter) {
            adapter(args);
        }
        args.next({
            isMetadata: (arg) => utils_1.isProvideMetadata(arg, 'index'),
            match: (arg) => utils_1.isToken(arg),
            setMetadata: (metadata, arg) => {
                metadata.provider = arg;
            }
        });
        // args.next<T>({
        //     match: (arg) => isString(arg),
        //     setMetadata: (metadata, arg) => {
        //         metadata.alias = arg;
        //     }
        // });
    });
    let decorator = DecoratorFactory_1.createDecorator(name, paramPropAdapter, metadataExtends);
    decorator.decoratorType = DecoratorType_1.DecoratorType.Property | DecoratorType_1.DecoratorType.Parameter;
    return decorator;
}
exports.createParamPropDecorator = createParamPropDecorator;

//# sourceMappingURL=../../sourcemaps/core/factories/ParamPropDecoratorFactory.js.map
