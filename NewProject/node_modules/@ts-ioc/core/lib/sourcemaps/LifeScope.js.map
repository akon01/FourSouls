{"version":3,"sources":["LifeScope.ts"],"names":[],"mappings":";;AAGA,6CAA4C;AAgC5C;;;GAGG;AACU,QAAA,cAAc,GAAG,IAAI,yBAAW,CAAY,cAAc,CAAC,CAAC","file":"../LifeScope.js","sourcesContent":["import { MethodMetadata, ActionComponent, ActionData, DecoratorType } from './core';\r\nimport { Type, Express } from './types';\r\nimport { IParameter } from './IParameter';\r\nimport { InjectToken } from './InjectToken';\r\n\r\n/**\r\n * Decorator summary.\r\n *\r\n * @export\r\n * @interface DecorSummary\r\n */\r\nexport interface DecorSummary {\r\n    /**\r\n     * decorator name.\r\n     *\r\n     * @type {string}\r\n     * @memberof DecorSummary\r\n     */\r\n    name: string;\r\n    /**\r\n     * decorator types.\r\n     *\r\n     * @type {string}\r\n     * @memberof DecorSummary\r\n     */\r\n    types: string;\r\n    /**\r\n     * decorator registed actions.\r\n     *\r\n     * @type {string[]}\r\n     * @memberof DecorSummary\r\n     */\r\n    actions: string[];\r\n}\r\n\r\n/**\r\n * life scope interface symbol.\r\n * it is a symbol id, you can register yourself MethodAccessor for this.\r\n */\r\nexport const LifeScopeToken = new InjectToken<LifeScope>('DI_LifeScope');\r\n\r\n/**\r\n * life scope of decorator.\r\n *\r\n * @export\r\n * @interface LifeScope\r\n */\r\nexport interface LifeScope {\r\n    /**\r\n     * execute the action work.\r\n     *\r\n     * @template T\r\n     * @param {ActionData<T>} data execute data;\r\n     * @param {string} names execute action name.\r\n     * @memberof ActionComponent\r\n     */\r\n    execute<T>(data: ActionData<T>, ...names: string[]);\r\n\r\n    /**\r\n     * execute the action work route with parent container.\r\n     *\r\n     * @template T\r\n     * @param {ActionData<T>} data\r\n     * @param {...string[]} names\r\n     * @memberof LifeScope\r\n     */\r\n    routeExecute<T>(data: ActionData<T>, ...names: string[]);\r\n\r\n    /**\r\n     * register action.\r\n     *\r\n     * @param {ActionComponent} action the action.\r\n     * @param {...string[]} express the path  of action point to add the action.\r\n     * @returns {this}\r\n     * @memberof LifeScope\r\n     */\r\n    addAction(action: ActionComponent, ...nodepaths: string[]): this;\r\n\r\n    /**\r\n     * register decorator.\r\n     *\r\n     * @param {Function} decorator decorator\r\n     * @param {...string[]} actions action names.\r\n     * @returns {this}\r\n     * @memberof LifeScope\r\n     */\r\n    registerDecorator(decorator: Function, ...actions: string[]): this;\r\n\r\n    /**\r\n     * register decorator.\r\n     *\r\n     * @param {Function} decorator decorator\r\n     * @param {DecoratorType} type  custom set decorator type.\r\n     * @param {...string[]} actions action names.\r\n     * @returns {this}\r\n     * @memberof LifeScope\r\n     */\r\n    registerCustomDecorator(decorator: Function, type: DecoratorType, ...actions: string[]): this;\r\n\r\n    /**\r\n     * filter match decorators.\r\n     *\r\n     * @param {Express<DecorSummary, boolean>} express\r\n     * @returns {DecorSummary[]}\r\n     * @memberof LifeScope\r\n     */\r\n    filerDecorators(express: Express<DecorSummary, boolean>): DecorSummary[];\r\n\r\n    /**\r\n     * has decorator.\r\n     *\r\n     * @param {(Type<any> | any)} target\r\n     * @param {DecoratorType} dtype\r\n     * @param {Express<DecorSummary, boolean>} [match]\r\n     * @returns {boolean}\r\n     * @memberof LifeScope\r\n     */\r\n    hasDecorator(target: Type<any> | any, dtype: DecoratorType, match?: Express<DecorSummary, boolean>): boolean;\r\n\r\n    /**\r\n     * get class decorators\r\n     *\r\n     * @param {Type<any>} type\r\n     * @param {Express<DecorSummary, boolean>} [match]\r\n     * @returns {DecorSummary[]}\r\n     * @memberof LifeScope\r\n     */\r\n    getClassDecorators(type: Type<any>, match?: Express<DecorSummary, boolean>): DecorSummary[];\r\n\r\n    /**\r\n     * get method decorators\r\n     *\r\n     * @param {Type<any>} type\r\n     * @param {Express<DecorSummary, boolean>} [match]\r\n     * @returns {DecorSummary[]}\r\n     * @memberof LifeScope\r\n     */\r\n    getMethodDecorators(type: Type<any>, match?: Express<DecorSummary, boolean>): DecorSummary[];\r\n\r\n    /**\r\n     * get property decorators\r\n     *\r\n     * @param {Type<any>} type\r\n     * @param {Express<DecorSummary, boolean>} [match]\r\n     * @returns {DecorSummary[]}\r\n     * @memberof LifeScope\r\n     */\r\n    getPropertyDecorators(type: Type<any>, match?: Express<DecorSummary, boolean>): DecorSummary[];\r\n\r\n    /**\r\n     * get parameter decorators\r\n     *\r\n     * @param {Type<any>} type\r\n     * @param {string} propertyKey\r\n     * @param {Express<DecorSummary, boolean>} [match]\r\n     * @returns {DecorSummary[]}\r\n     * @memberof LifeScope\r\n     */\r\n    getParameterDecorators(target: any, propertyKey: string, match?: Express<DecorSummary, boolean>): DecorSummary[];\r\n\r\n\r\n    /**\r\n     * get decorator type.\r\n     *\r\n     * @param {*} decorator\r\n     * @returns {DecoratorType}\r\n     * @memberof LifeScope\r\n     */\r\n    getDecoratorType(decorator: any): DecoratorType;\r\n\r\n    /**\r\n     * is vaildate dependence type or not. dependence type must with class decorator.\r\n     *\r\n     * @template T\r\n     * @param {any} target\r\n     * @returns {boolean}\r\n     * @memberof LifeScope\r\n     */\r\n    isVaildDependence<T>(target: any): boolean;\r\n\r\n    /**\r\n     * is singleton or not.\r\n     *\r\n     * @template T\r\n     * @param {Type<T>} type\r\n     * @returns {boolean}\r\n     * @memberof LifeScope\r\n     */\r\n    isSingletonType<T>(type: Type<T>): boolean;\r\n\r\n    /**\r\n     * get action by name.\r\n     *\r\n     * @param {string} name\r\n     * @returns {ActionComponent}\r\n     * @memberof LifeScope\r\n     */\r\n    getAtionByName(name: string): ActionComponent;\r\n\r\n    /**\r\n     * get class action.\r\n     *\r\n     * @returns {ActionComponent}\r\n     * @memberof LifeScope\r\n     */\r\n    getClassAction(): ActionComponent;\r\n\r\n    /**\r\n     * get method action.\r\n     *\r\n     * @returns {ActionComponent}\r\n     * @memberof LifeScope\r\n     */\r\n    getMethodAction(): ActionComponent;\r\n\r\n    /**\r\n     * get propert action.\r\n     *\r\n     * @returns {ActionComponent}\r\n     * @memberof LifeScope\r\n     */\r\n    getPropertyAction(): ActionComponent;\r\n\r\n    /**\r\n     * get parameter action.\r\n     *\r\n     * @returns {ActionComponent}\r\n     * @memberof LifeScope\r\n     */\r\n    getParameterAction(): ActionComponent;\r\n\r\n    /**\r\n     * get paramerter names.\r\n     *\r\n     * @template T\r\n     * @param {Type<T>} type\r\n     * @param {string} propertyKey\r\n     * @returns {string[]}\r\n     * @memberof LifeScope\r\n     */\r\n    getParamerterNames<T>(type: Type<T>, propertyKey: string): string[];\r\n\r\n    /**\r\n     * get constructor parameters metadata.\r\n     *\r\n     * @template T\r\n     * @param {Type<T>} type\r\n     * @returns {IParameter[]}\r\n     * @memberof IContainer\r\n     */\r\n    getConstructorParameters<T>(type: Type<T>): IParameter[];\r\n\r\n    /**\r\n     * get method params metadata.\r\n     *\r\n     * @template T\r\n     * @param {Type<T>} type\r\n     * @param {T} instance\r\n     * @param {string} propertyKey\r\n     * @returns {IParameter[]}\r\n     * @memberof IContainer\r\n     */\r\n    getMethodParameters<T>(type: Type<T>, instance: T, propertyKey: string): IParameter[];\r\n\r\n\r\n    /**\r\n     * get method metadatas\r\n     *\r\n     * @template T\r\n     * @param {Type<T>} type\r\n     * @param {(string | symbol)} propertyKey\r\n     * @returns {MethodMetadata[]}\r\n     * @memberof LifeScope\r\n     */\r\n    getMethodMetadatas<T>(type: Type<T>, propertyKey: string | symbol): MethodMetadata[];\r\n\r\n    /**\r\n     * convert decorator type to action name.\r\n     *\r\n     * @param {DecoratorType} type\r\n     * @returns {string}\r\n     * @memberof LifeScope\r\n     */\r\n    toActionName(type: DecoratorType): string;\r\n}\r\n"]}