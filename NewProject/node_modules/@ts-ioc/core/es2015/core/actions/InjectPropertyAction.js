"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const IContainer_1 = require("../../IContainer");
const CoreActions_1 = require("./CoreActions");
const ActionComposite_1 = require("./ActionComposite");
const InjectReference_1 = require("../../InjectReference");
const providers_1 = require("../../providers");
/**
 * inject property value action, to inject property value for resolve instance.
 *
 * @export
 * @class SetPropAction
 * @extends {ActionComposite}
 */
class InjectPropertyAction extends ActionComposite_1.ActionComposite {
    constructor() {
        super(CoreActions_1.CoreActions.injectProperty);
    }
    working(container, data) {
        if (!data.execResult) {
            this.parent.find(act => act.name === CoreActions_1.CoreActions.bindPropertyType).execute(container, data);
        }
        if (data.target && data.execResult && data.execResult.length) {
            let providerMap = data.providerMap;
            data.injecteds = data.injecteds || {};
            data.execResult.forEach((prop, idx) => {
                if (prop && !data.injecteds[prop.propertyKey]) {
                    let token = prop.provider ? container.getToken(prop.provider, prop.alias) : prop.type;
                    let pdrMap = container.get(new InjectReference_1.InjectReference(providers_1.ProviderMap, data.targetType));
                    if (token === IContainer_1.ContainerToken) {
                        Object.defineProperty(data.target, prop.propertyKey, { enumerable: false, writable: true });
                    }
                    if (pdrMap && pdrMap.has(token)) {
                        data.target[prop.propertyKey] = pdrMap.resolve(token, providerMap);
                        data.injecteds[prop.propertyKey] = true;
                    }
                    else if (providerMap && providerMap.has(token)) {
                        data.target[prop.propertyKey] = providerMap.resolve(token, providerMap);
                        data.injecteds[prop.propertyKey] = true;
                    }
                    else if (container.has(token)) {
                        data.target[prop.propertyKey] = container.resolve(token, providerMap);
                        data.injecteds[prop.propertyKey] = true;
                    }
                }
            });
        }
    }
    static getClassAnnations() {
        return { "name": "InjectPropertyAction", "params": { "constructor": [], "working": ["container", "data"] } };
    }
}
exports.InjectPropertyAction = InjectPropertyAction;

//# sourceMappingURL=../../sourcemaps/core/actions/InjectPropertyAction.js.map
