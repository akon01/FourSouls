{"version":3,"sources":["core/MetaAccessor.ts"],"names":[],"mappings":"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","file":"../../core/MetaAccessor.js","sourcesContent":["import { Token, Type, Express } from '../types';\r\nimport { IContainer } from '../IContainer';\r\nimport { isClass, isToken, lang } from '../utils';\r\nimport { IMetaAccessor, IAnnotationMetadata } from './IMetaAccessor';\r\nimport { getClassDecorators, getTypeMetadata } from './factories';\r\n\r\n\r\n/**\r\n * class metadata accessor.\r\n *\r\n * @export\r\n * @class MetaAccessor\r\n * @implements {IMetaAccessor<any>}\r\n */\r\nexport class MetaAccessor implements IMetaAccessor<any> {\r\n\r\n    constructor() {\r\n    }\r\n\r\n    getDecorators(type: Type<any>): string[] {\r\n        return getClassDecorators(type);\r\n    }\r\n\r\n    /**\r\n     * get metadata config of target type. via decorators in order.\r\n     *\r\n     * @param {Token<any>} token\r\n     * @param {IContainer} container\r\n     * @param {IAnnotationMetadata<any>} [extConfig]\r\n     * @param {Express<string, boolean>} [decorFilter]\r\n     * @returns {IAnnotationMetadata<any>}\r\n     * @memberof MetaAccessor\r\n     */\r\n    getMetadata(token: Token<any>, container: IContainer, extConfig?: IAnnotationMetadata<any>, decorFilter?: Express<string, boolean>): IAnnotationMetadata<any> {\r\n        let type = isClass(token) ? token : container.getTokenImpl(token);\r\n        let cfg;\r\n        if (isClass(type)) {\r\n            let decors = this.getDecorators(type);\r\n            if (decorFilter) {\r\n                decors = decors.filter(decorFilter);\r\n            }\r\n            let classmeta = {};\r\n            decors.forEach(decor => {\r\n                let metas = getTypeMetadata<IAnnotationMetadata<any>>(decor, type);\r\n                if (metas && metas.length) {\r\n                    metas.forEach(meta => {\r\n                        if (meta) {\r\n                            classmeta = lang.assign({}, classmeta, meta);\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n            cfg = classmeta;\r\n        }\r\n        if (cfg) {\r\n            return lang.assign({}, cfg, extConfig || {});\r\n        } else {\r\n            return extConfig || {};\r\n        }\r\n    }\r\n\r\n    /**\r\n     * find metadata accessor.\r\n     *\r\n     * @param {Token<any>} token\r\n     * @param {IContainer} container\r\n     * @param {Express<IAnnotationMetadata<any>, boolean>} filter\r\n     * @param {Express<string, boolean>} [decorFilter]\r\n     * @returns {IAnnotationMetadata<any>}\r\n     * @memberof MetaAccessor\r\n     */\r\n    find(token: Token<any>, container: IContainer, filter: Express<IAnnotationMetadata<any>, boolean>, decorFilter?: Express<string, boolean>): IAnnotationMetadata<any> {\r\n        let type = isClass(token) ? token : container.getTokenImpl(token);\r\n        let metadata = null;\r\n        if (isClass(type)) {\r\n            let decors = this.getDecorators(type);\r\n            if (decorFilter) {\r\n                decors = decors.filter(decorFilter);\r\n            }\r\n            decors.some(decor => {\r\n                let metas = getTypeMetadata<IAnnotationMetadata<any>>(decor, type);\r\n                if (metas && metas.length) {\r\n                    return metas.some(meta => {\r\n                        if (meta && filter(meta)) {\r\n                            metadata = meta;\r\n                        }\r\n                        return !!metadata;\r\n                    });\r\n                }\r\n                return false;\r\n            });\r\n        }\r\n        return metadata;\r\n    }\r\n\r\n    /**\r\n     * filter metadata accessor.\r\n     *\r\n     * @param {Token<any>} token\r\n     * @param {IContainer} container\r\n     * @param {Express<IAnnotationMetadata<any>, boolean>} filter\r\n     * @param {Express<string, boolean>} [decorFilter]\r\n     * @returns {IAnnotationMetadata<any>[]}\r\n     * @memberof MetaAccessor\r\n     */\r\n    filter(token: Token<any>, container: IContainer, filter: Express<IAnnotationMetadata<any>, boolean>, decorFilter?: Express<string, boolean>): IAnnotationMetadata<any>[] {\r\n        let type = isClass(token) ? token : container.getTokenImpl(token);\r\n        let metadatas = [];\r\n        if (isClass(type)) {\r\n            let decors = this.getDecorators(type);\r\n            if (decorFilter) {\r\n                decors = decors.filter(decorFilter);\r\n            }\r\n            decors.forEach(decor => {\r\n                let metas = getTypeMetadata<IAnnotationMetadata<any>>(decor, type);\r\n                if (metas && metas.length) {\r\n                    metas.filter(meta => meta && filter(meta)).forEach(meta => {\r\n                        metadatas.push(meta);\r\n                    });\r\n                }\r\n            });\r\n        }\r\n        return metadatas;\r\n    }\r\n\r\n    /**\r\n     * get token of metadata config.\r\n     *\r\n     * @param {IAnnotationMetadata<any>} config\r\n     * @param {IContainer} [container] vaild token in container or not.\r\n     * @returns {Token<any>}\r\n     * @memberof MetadataManager\r\n     */\r\n    getToken(config: IAnnotationMetadata<any>, container?: IContainer): Token<any> {\r\n        let token = this.getTokenInConfig(config);\r\n        if (this.validateToken(token, container)) {\r\n            return token;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * get module boot token from module configure.\r\n     *\r\n     * @param {IAnnotationMetadata<any>} config\r\n     * @param {IContainer} [container]  vaild container.\r\n     * @returns {Token<any>}\r\n     * @memberof ModuelValidate\r\n     */\r\n    getBootToken(config: IAnnotationMetadata<any>, container?: IContainer): Token<any> {\r\n        let token = this.getBootTokenInConfig(config);\r\n        if (this.validateToken(token, container)) {\r\n            return token\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    protected validateToken(token: Token<any>, container?: IContainer): boolean {\r\n        return isToken(token);\r\n    }\r\n\r\n    protected getTokenInConfig(config: IAnnotationMetadata<any>): Token<any> {\r\n        return config.token || config.type;\r\n    }\r\n\r\n    protected getBootTokenInConfig(config: IAnnotationMetadata<any>) {\r\n        return config.bootstrap;\r\n    }\r\n\r\n\n                        static getClassAnnations():any  {\n                            return {\"name\":\"MetaAccessor\",\"params\":{\"constructor\":[],\"getDecorators\":[\"type\"],\"getMetadata\":[\"token\",\"container\",\"extConfig\",\"decorFilter\"],\"find\":[\"token\",\"container\",\"filter\",\"decorFilter\"],\"filter\":[\"token\",\"container\",\"filter\",\"decorFilter\"],\"getToken\":[\"config\",\"container\"],\"getBootToken\":[\"config\",\"container\"],\"validateToken\":[\"token\",\"container\"],\"getTokenInConfig\":[\"config\"],\"getBootTokenInConfig\":[\"config\"]}};\n                        }\n                   }\r\n"]}