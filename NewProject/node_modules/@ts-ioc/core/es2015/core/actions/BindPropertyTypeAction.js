"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ActionComposite_1 = require("./ActionComposite");
const CoreActions_1 = require("./CoreActions");
const factories_1 = require("../factories");
/**
 * bind property type action. to get the property autowride token of Type calss.
 *
 * @export
 * @class SetPropAction
 * @extends {ActionComposite}
 */
class BindPropertyTypeAction extends ActionComposite_1.ActionComposite {
    constructor() {
        super(CoreActions_1.CoreActions.bindPropertyType);
    }
    working(container, data) {
        if (data.raiseContainer && data.raiseContainer !== container) {
            return;
        }
        let type = data.targetType;
        let lifeScope = container.getLifeScope();
        let matchs = lifeScope.getPropertyDecorators(type, surm => surm.actions.includes(CoreActions_1.CoreActions.bindPropertyType));
        let list = [];
        matchs.forEach(surm => {
            let propMetadata = factories_1.getPropertyMetadata(surm.name, type);
            for (let n in propMetadata) {
                list = list.concat(propMetadata[n]);
            }
            list = list.filter(n => !!n);
            list.forEach(prop => {
                if (lifeScope.isVaildDependence(prop.provider)) {
                    if (!container.has(prop.provider, prop.alias)) {
                        container.register(container.getToken(prop.provider, prop.alias));
                    }
                }
                if (lifeScope.isVaildDependence(prop.type)) {
                    if (!container.has(prop.type)) {
                        container.register(prop.type);
                    }
                }
            });
        });
        data.execResult = list;
    }
    static getClassAnnations() {
        return { "name": "BindPropertyTypeAction", "params": { "constructor": [], "working": ["container", "data"] } };
    }
}
exports.BindPropertyTypeAction = BindPropertyTypeAction;

//# sourceMappingURL=../../sourcemaps/core/actions/BindPropertyTypeAction.js.map
