{"version":3,"sources":["core/factories/MethodPropParamDecoratorFactory.ts"],"names":[],"mappings":";;AACA,uDAAuF;AACvF,iDAAgD;AAuBhD;;;;;;;;;GASG;AACH,SAAgB,8BAA8B,CAC1C,IAAY,EACZ,OAAyB,EACzB,eAAoC;IAEpC,IAAI,SAAS,GAAG,kCAAe,CAAI,IAAI,EAAE,OAAO,EAAE,eAAe,CAAC,CAAC;IACnE,SAAS,CAAC,aAAa,GAAG,6BAAa,CAAC,MAAM,GAAG,6BAAa,CAAC,QAAQ,GAAG,6BAAa,CAAC,SAAS,CAAC;IAClG,OAAO,SAAS,CAAC;AACrB,CAAC;AARD,wEAQC","file":"../../../core/factories/MethodPropParamDecoratorFactory.js","sourcesContent":["import { TypeMetadata } from '../metadatas';\r\nimport { createDecorator, MetadataAdapter, MetadataExtends } from './DecoratorFactory';\r\nimport { DecoratorType } from './DecoratorType';\r\n\r\n\r\n\r\nexport type MethodPropParamDecorator = (target: Object, propertyKey: string | symbol, descriptor?: number | TypedPropertyDescriptor<any>) => void;\r\n/**\r\n * method, property or parameter decorator.\r\n *\r\n * @export\r\n * @interface IMethodPropParamDecorator\r\n */\r\nexport interface IMethodPropParamDecorator<T extends TypeMetadata> {\r\n    /**\r\n     * define method, property or parameter decorator with metadata map.\r\n     * @param {T} [metadata] metadata map\r\n     */\r\n    (metadata?: T): MethodPropParamDecorator;\r\n    /**\r\n     * define method, property or parameter decorator.\r\n     */\r\n    (target: object, propertyKey: string | symbol, descriptor?: number | TypedPropertyDescriptor<any>): void;\r\n}\r\n\r\n/**\r\n * create method, property or parameter decorator.\r\n *\r\n * @export\r\n * @template T\r\n * @param {string} name\r\n * @param {MetadataAdapter} [adapter]  metadata adapter\r\n * @param {MetadataExtends<T>} [metadataExtends] add extents for metadata.\r\n * @returns {IMethodPropParamDecorator<T>}\r\n */\r\nexport function createMethodPropParamDecorator<T extends TypeMetadata>(\r\n    name: string,\r\n    adapter?: MetadataAdapter,\r\n    metadataExtends?: MetadataExtends<T>): IMethodPropParamDecorator<T> {\r\n\r\n    let decorator = createDecorator<T>(name, adapter, metadataExtends);\r\n    decorator.decoratorType = DecoratorType.Method | DecoratorType.Property | DecoratorType.Parameter;\r\n    return decorator;\r\n}\r\n\r\n"]}