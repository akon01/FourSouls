{"version":3,"sources":["actions/InvokeBeforeConstructorAction.ts"],"names":[],"mappings":";;AAAA,uCAAuG;AACvG,0CAA2C;AAC3C,6CAA0C;AAE1C,8CAAsE;AACtE,kEAA+D;AAa/D;;;;;;GAMG;AACH,MAAa,6BAA8B,SAAQ,sBAAe;IAE9D;QACI,KAAK,CAAC,uBAAU,CAAC,YAAY,CAAC,CAAC;IACnC,CAAC;IAES,OAAO,CAAC,SAAqB,EAAE,IAAuC;QAC5E,2BAA2B;QAC3B,IAAI,CAAC,2CAAoB,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE;YACxC,OAAO;SACV;QAED,IAAI,OAAO,GAAG,SAAS,CAAC,GAAG,CAAC,uBAAY,CAAC,CAAC;QAC1C,IAAI,SAAS,GAAG,WAAI,CAAC,YAAY,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACnD,IAAI,OAAO,GAAG,OAAO,CAAC,UAAU,CAAC,SAAS,GAAG,cAAc,CAAC,CAAC;QAC7D,IAAI,CAAC,OAAO,EAAE;YACV,OAAO;SACV;QAED,IAAI,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;QACjC,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;QAEzB,IAAI,SAAS,GAAG,SAAS,CAAC,OAAO,CAAC,sBAAS,EAAE,eAAQ,CAAC,MAAM,CAAC,SAAS,EAAc;YAChF,IAAI,EAAE,aAAa;YACnB,KAAK,EAAE,2BAAc,CAAC,MAAM;YAC5B,QAAQ,EAAE,SAAS,GAAG,cAAc;YACpC,MAAM,EAAE,MAAM;YACd,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,MAAM,EAAE,IAAI,CAAC,MAAM;YACnB,UAAU,EAAE,UAAU;SACzB,CAAC,CAAC,CAAC;QACJ,IAAI,SAAS,GAAqB,CAAC,eAAQ,CAAC,MAAM,CAAC,sBAAS,EAAE,SAAS,CAAC,CAAC,CAAC;QAE1E,IAAI,IAAI,CAAC,WAAW,EAAE;YAClB,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;SACpC;QAED,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;YAC7B,OAAO,CAAC,YAAY,CAAC,OAAO,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC,UAAU,CAAC,OAAO,CAAC,UAAU,EAAE,OAAO,CAAC,MAAM,CAAC,WAAW,EAAE,IAAI,EAAE,GAAG,SAAS,CAAC,CAAC,CAAC,gFAAgF;QACxN,CAAC,CAAC,CAAC;QAEH,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;YAC7B,OAAO,CAAC,YAAY,CAAC,OAAO,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC,UAAU,CAAC,OAAO,CAAC,UAAU,EAAE,OAAO,CAAC,MAAM,CAAC,WAAW,EAAE,IAAI,EAAE,GAAG,SAAS,CAAC,CAAC;QACvI,CAAC,CAAC,CAAC;IAEP,CAAC;IAEmB,MAAM,CAAC,iBAAiB;QACpB,OAAO,EAAC,MAAM,EAAC,+BAA+B,EAAC,QAAQ,EAAC,EAAC,aAAa,EAAC,EAAE,EAAC,SAAS,EAAC,CAAC,WAAW,EAAC,MAAM,CAAC,EAAC,EAAC,CAAC;IAC/G,CAAC;CACL;AAlDpB,sEAkDoB","file":"../../actions/InvokeBeforeConstructorAction.js","sourcesContent":["import { IContainer, ActionData, ActionComposite, Provider, ParamProviders, lang } from '@ts-ioc/core';\r\nimport { AdvisorToken } from '../IAdvisor';\r\nimport { AopActions } from './AopActions';\r\nimport { AdviceMetadata } from '../metadatas'\r\nimport { Joinpoint, JoinpointState, IJoinpoint } from '../joinpoints';\r\nimport { isValideAspectTarget } from '../isValideAspectTarget';\r\n\r\n/**\r\n * action data for invoke before constructor action.\r\n *\r\n * @export\r\n * @interface InvokeBeforeConstructorActionData\r\n * @extends {ActionData<AdviceMetadata>}\r\n */\r\nexport interface InvokeBeforeConstructorActionData extends ActionData<AdviceMetadata> {\r\n\r\n}\r\n\r\n/**\r\n * actions invoke before constructor.\r\n *\r\n * @export\r\n * @class InvokeBeforeConstructorAction\r\n * @extends {ActionComposite}\r\n */\r\nexport class InvokeBeforeConstructorAction extends ActionComposite {\r\n\r\n    constructor() {\r\n        super(AopActions.registAspect);\r\n    }\r\n\r\n    protected working(container: IContainer, data: InvokeBeforeConstructorActionData) {\r\n        // aspect class do nothing.\r\n        if (!isValideAspectTarget(data.targetType)) {\r\n            return;\r\n        }\r\n\r\n        let advisor = container.get(AdvisorToken);\r\n        let className = lang.getClassName(data.targetType);\r\n        let advices = advisor.getAdvices(className + '.constructor');\r\n        if (!advices) {\r\n            return;\r\n        }\r\n\r\n        let targetType = data.targetType;\r\n        let target = data.target;\r\n\r\n        let joinPoint = container.resolve(Joinpoint, Provider.create('options', <IJoinpoint>{\r\n            name: 'constructor',\r\n            state: JoinpointState.Before,\r\n            fullName: className + '.constructor',\r\n            target: target,\r\n            args: data.args,\r\n            params: data.params,\r\n            targetType: targetType\r\n        }));\r\n        let providers: ParamProviders[] = [Provider.create(Joinpoint, joinPoint)];\r\n\r\n        if (data.providerMap) {\r\n            providers.push(data.providerMap);\r\n        }\r\n\r\n        advices.Before.forEach(advicer => {\r\n            advisor.getContainer(advicer.aspectType, container).syncInvoke(advicer.aspectType, advicer.advice.propertyKey, null, ...providers); // new Joinpoint(joinPoint) // container.resolve(Joinpoint, { json: joinPoint })\r\n        });\r\n\r\n        advices.Around.forEach(advicer => {\r\n            advisor.getContainer(advicer.aspectType, container).syncInvoke(advicer.aspectType, advicer.advice.propertyKey, null, ...providers);\r\n        });\r\n\r\n    }\r\n\n                        static getClassAnnations():any  {\n                            return {\"name\":\"InvokeBeforeConstructorAction\",\"params\":{\"constructor\":[],\"working\":[\"container\",\"data\"]}};\n                        }\n                   }\r\n"]}