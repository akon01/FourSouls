import { Type, Modules, LoadType, PathModules } from '../types';
import { IModuleLoader } from './IModuleLoader';
/**
 * default module loader.
 *
 * @export
 * @class DefaultModuleLoader
 * @implements {IModuleLoader}
 */
export declare class DefaultModuleLoader implements IModuleLoader {
    constructor();
    private _loader;
    getLoader(): (modulepath: string) => Promise<Modules[]>;
    /**
     * load module.
     *
     * @param {...LoadType[]} modules
     * @returns {Promise<Modules[]>}
     * @memberof DefaultModuleLoader
     */
    load(modules: LoadType[]): Promise<Modules[]>;
    /**
     * load types from module.
     *
     * @param {...LoadType[]} modules
     * @returns {Promise<Type<any>[]>}
     * @memberof IContainerBuilder
     */
    loadTypes(modules: LoadType[]): Promise<Type<any>[][]>;
    /**
     * get all class type in modules.
     *
     * @param {Modules[]} modules
     * @param {...Express<Type<any>, boolean>[]} filters
     * @returns {Type<any>[]}
     * @memberof DefaultModuleLoader
     */
    getTypes(modules: Modules[]): Type<any>[][];
    protected loadFile(files: string | string[], basePath?: string): Promise<Modules[]>;
    protected isFile(str: string): boolean;
    protected loadModule(moduleName: string): Promise<Modules[]>;
    protected loadPathModule(pmd: PathModules): Promise<Modules[]>;
    protected createLoader(): (modulepath: string) => Promise<Modules[]>;
    protected getContentTypes(regModule: Modules): Type<any>[];
    static getClassAnnations(): any;
}
