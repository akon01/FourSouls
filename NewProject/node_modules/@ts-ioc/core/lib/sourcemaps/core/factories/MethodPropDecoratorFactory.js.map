{"version":3,"sources":["core/factories/MethodPropDecoratorFactory.ts"],"names":[],"mappings":";;AACA,uDAAuF;AACvF,iDAAgD;AAoBhD;;;;;;;;;GASG;AACH,SAAgB,yBAAyB,CACrC,IAAY,EACZ,OAAyB,EACzB,eAAoC;IACpC,IAAI,SAAS,GAAG,kCAAe,CAAI,IAAI,EAAE,OAAO,EAAE,eAAe,CAAC,CAAC;IACnE,SAAS,CAAC,aAAa,GAAG,6BAAa,CAAC,MAAM,GAAG,6BAAa,CAAC,QAAQ,CAAC;IACxE,OAAO,SAAS,CAAC;AACrB,CAAC;AAPD,8DAOC","file":"../../../core/factories/MethodPropDecoratorFactory.js","sourcesContent":["import { MethodPropMetadata } from '../metadatas';\r\nimport { createDecorator, MetadataAdapter, MetadataExtends } from './DecoratorFactory';\r\nimport { DecoratorType } from './DecoratorType';\r\n\r\n\r\n\r\nexport type MethodPropDecorator = (target: Object, propertyKey: string | symbol, descriptor?: TypedPropertyDescriptor<any>) => void;\r\n/**\r\n * method and Property decorator.\r\n *\r\n * @export\r\n * @interface IMethodPropDecorator\r\n */\r\nexport interface IMethodPropDecorator<T extends MethodPropMetadata> {\r\n    /**\r\n     * create method decorator with metadata map.\r\n     * @param {T} [metadata]\r\n     */\r\n    (metadata?: T): MethodPropDecorator;\r\n    (target: object, propertyKey: string | symbol, descriptor?: TypedPropertyDescriptor<any>): void;\r\n}\r\n\r\n/**\r\n * create method or property decorator\r\n *\r\n * @export\r\n * @template T\r\n * @param {string} name\r\n * @param {MetadataAdapter} [adapter]  metadata adapter\r\n * @param {MetadataExtends<T>} [metadataExtends] add extents for metadata.\r\n * @returns {IMethodPropDecorator<T>}\r\n */\r\nexport function createMethodPropDecorator<T extends MethodPropMetadata>(\r\n    name: string,\r\n    adapter?: MetadataAdapter,\r\n    metadataExtends?: MetadataExtends<T>): IMethodPropDecorator<T> {\r\n    let decorator = createDecorator<T>(name, adapter, metadataExtends);\r\n    decorator.decoratorType = DecoratorType.Method | DecoratorType.Property;\r\n    return decorator;\r\n}\r\n\r\n"]}