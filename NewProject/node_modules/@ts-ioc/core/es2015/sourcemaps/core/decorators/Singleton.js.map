{"version":3,"sources":["core/decorators/Singleton.ts"],"names":[],"mappings":";;AAAA,4CAAoE;AAkCpE;;;;GAIG;AACU,QAAA,SAAS,GAAwB,gCAAoB,CAAgB,WAAW,EAAE,IAAI,EAAE,CAAC,QAAQ,EAAE,EAAE;IAC9G,QAAQ,CAAC,SAAS,GAAG,IAAI,CAAC;IAC1B,OAAO,QAAQ,CAAC;AACpB,CAAC,CAAwB,CAAC","file":"../../../core/decorators/Singleton.js","sourcesContent":["import { createClassDecorator, ITypeDecorator } from '../factories';\r\nimport { ClassMetadata } from '../metadatas';\r\nimport { Registration } from '../../Registration';\r\n\r\n/**\r\n * Singleton decorator, for class. use to define the class is singleton.\r\n *\r\n * @Singleton\r\n *\r\n * @export\r\n * @interface ISingletonDecorator\r\n * @extends {IClassDecorator<ClassMetadata>}\r\n */\r\nexport interface ISingletonDecorator extends ITypeDecorator<ClassMetadata> {\r\n    /**\r\n     * Singleton decorator, for class. use to define the class is singleton.\r\n     *\r\n     * @Singleton\r\n     *\r\n     * @param {(Registration<any> | symbol | string)} provide define this class provider for provide.\r\n     * @param {string} [alias] define this class provider with alias for provide.\r\n     */\r\n    (provide: Registration<any> | symbol | string, alias?: string): ClassDecorator;\r\n\r\n    /**\r\n     * Singleton decorator, for class. use to define the class is singleton.\r\n     *\r\n     * @Singleton\r\n     *\r\n     * @param {ClassMetadata} [metadata] metadata map.\r\n     */\r\n    (metadata?: ClassMetadata): ClassDecorator;\r\n}\r\n\r\n/**\r\n * Singleton decorator, for class. use to define the class is singleton.\r\n *\r\n * @Singleton\r\n */\r\nexport const Singleton: ISingletonDecorator = createClassDecorator<ClassMetadata>('Singleton', null, (metadata) => {\r\n    metadata.singleton = true;\r\n    return metadata;\r\n}) as ISingletonDecorator;\r\n\r\n"]}