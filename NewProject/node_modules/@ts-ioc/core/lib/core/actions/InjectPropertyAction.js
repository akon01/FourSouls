"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var IContainer_1 = require("../../IContainer");
var CoreActions_1 = require("./CoreActions");
var ActionComposite_1 = require("./ActionComposite");
var InjectReference_1 = require("../../InjectReference");
var providers_1 = require("../../providers");
/**
 * inject property value action, to inject property value for resolve instance.
 *
 * @export
 * @class SetPropAction
 * @extends {ActionComposite}
 */
var InjectPropertyAction = /** @class */ (function (_super) {
    tslib_1.__extends(InjectPropertyAction, _super);
    function InjectPropertyAction() {
        return _super.call(this, CoreActions_1.CoreActions.injectProperty) || this;
    }
    InjectPropertyAction.prototype.working = function (container, data) {
        if (!data.execResult) {
            this.parent.find(function (act) { return act.name === CoreActions_1.CoreActions.bindPropertyType; }).execute(container, data);
        }
        if (data.target && data.execResult && data.execResult.length) {
            var providerMap_1 = data.providerMap;
            data.injecteds = data.injecteds || {};
            data.execResult.forEach(function (prop, idx) {
                if (prop && !data.injecteds[prop.propertyKey]) {
                    var token = prop.provider ? container.getToken(prop.provider, prop.alias) : prop.type;
                    var pdrMap = container.get(new InjectReference_1.InjectReference(providers_1.ProviderMap, data.targetType));
                    if (token === IContainer_1.ContainerToken) {
                        Object.defineProperty(data.target, prop.propertyKey, { enumerable: false, writable: true });
                    }
                    if (pdrMap && pdrMap.has(token)) {
                        data.target[prop.propertyKey] = pdrMap.resolve(token, providerMap_1);
                        data.injecteds[prop.propertyKey] = true;
                    }
                    else if (providerMap_1 && providerMap_1.has(token)) {
                        data.target[prop.propertyKey] = providerMap_1.resolve(token, providerMap_1);
                        data.injecteds[prop.propertyKey] = true;
                    }
                    else if (container.has(token)) {
                        data.target[prop.propertyKey] = container.resolve(token, providerMap_1);
                        data.injecteds[prop.propertyKey] = true;
                    }
                }
            });
        }
    };
    InjectPropertyAction.getClassAnnations = function () {
        return { "name": "InjectPropertyAction", "params": { "constructor": [], "working": ["container", "data"] } };
    };
    return InjectPropertyAction;
}(ActionComposite_1.ActionComposite));
exports.InjectPropertyAction = InjectPropertyAction;

//# sourceMappingURL=../../sourcemaps/core/actions/InjectPropertyAction.js.map
