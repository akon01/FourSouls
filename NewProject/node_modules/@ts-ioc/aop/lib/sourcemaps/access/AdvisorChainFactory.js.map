{"version":3,"sources":["access/AdvisorChainFactory.ts"],"names":[],"mappings":";;;AAAA,qCAAoH;AACpH,4CAA0D;AAE1D,+DAAwF;AACxF,iDAAmE;AACnE,2DAA0D;AAC1D,wCAAqD;AAErD;;;;;;GAMG;AAGH;IAEI,6BAA4C,SAAqB,EAAgC,OAAiB,EAAU,OAAgB;QAAhG,cAAS,GAAT,SAAS,CAAY;QAAgC,YAAO,GAAP,OAAO,CAAU;QAAU,YAAO,GAAP,OAAO,CAAS;IAE5I,CAAC;IAED,yCAAW,GAAX,UAAY,UAAkB;QAC1B,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;IAChE,CAAC;IAED,wCAAU,GAAV,UAAW,SAAoB,EAAE,KAAqB,EAAE,eAAqB;QACzE,SAAS,CAAC,KAAK,GAAG,KAAK,CAAC;QACxB,SAAS,CAAC,SAAS,GAAG,SAAS,CAAC;QAChC,SAAS,CAAC,QAAQ,GAAG,SAAS,CAAC;QAE/B,QAAQ,KAAK,EAAE;YACX,KAAK,2BAAc,CAAC,MAAM;gBACtB,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;gBACvB,MAAM;YACV,KAAK,2BAAc,CAAC,QAAQ;gBACxB,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;gBACzB,MAAM;YAEV,KAAK,2BAAc,CAAC,KAAK;gBACrB,SAAS,CAAC,SAAS,GAAG,eAAe,CAAC;gBACtC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;gBACtB,MAAM;YAEV,KAAK,2BAAc,CAAC,aAAa;gBAC7B,SAAS,CAAC,QAAQ,GAAG,eAAe,CAAC;gBACrC,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;gBAC9B,MAAM;YAEV,KAAK,2BAAc,CAAC,cAAc;gBAC9B,SAAS,CAAC,SAAS,GAAG,eAAe,CAAC;gBACtC,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;gBAC/B,MAAM;SACb;IACL,CAAC;IAED,oCAAM,GAAN,UAAO,SAAoB;QAA3B,iBAgBC;QAfG,IAAI,OAAO,GAAG,WAAI,CAAC,MAAM,CAAC,EAAE,EAAE,SAAS,CAAC,CAAC;QACzC,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC;aACrB,OAAO,CAAC,UAAA,OAAO;YACZ,KAAI,CAAC,YAAY,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QACxC,CAAC,CAAC,CAAC;QAEP,IAAI,CAAC,kBAAW,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YAC5B,SAAS,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;SACjC;QAED,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC;aACrB,OAAO,CAAC,UAAA,OAAO;YACZ,KAAI,CAAC,YAAY,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QACxC,CAAC,CAAC,CAAC;IAEX,CAAC;IAED,sCAAQ,GAAR,UAAS,SAAoB;QAA7B,iBAUC;QATG,IAAI,OAAO,GAAG,WAAI,CAAC,MAAM,CAAC,EAAE,EAAE,SAAS,CAAC,CAAC;QACzC,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC;aACvB,OAAO,CAAC,UAAA,OAAO;YACZ,KAAI,CAAC,YAAY,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QACxC,CAAC,CAAC,CAAC;QAEP,IAAI,CAAC,kBAAW,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YAC5B,SAAS,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;SACjC;IACL,CAAC;IAED,mCAAK,GAAL,UAAM,SAAoB;QAA1B,iBAYC;QAXG,IAAI,OAAO,GAAG,WAAI,CAAC,MAAM,CAAC,EAAE,EAAE,SAAS,CAAC,CAAC;QACzC,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC;aACrB,OAAO,CAAC,UAAA,OAAO;YACZ,KAAI,CAAC,YAAY,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QACxC,CAAC,CAAC,CAAC;QAEP,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC;aACpB,OAAO,CAAC,UAAA,OAAO;YACZ,KAAI,CAAC,YAAY,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QACxC,CAAC,CAAC,CAAC;IAEX,CAAC;IAED,2CAAa,GAAb,UAAc,SAAoB;QAAlC,iBAWC;QAVG,IAAI,OAAO,GAAG,WAAI,CAAC,MAAM,CAAC,EAAE,EAAE,SAAS,CAAC,CAAC;QACzC,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC;aACrB,OAAO,CAAC,UAAA,OAAO;YACZ,KAAI,CAAC,YAAY,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QACxC,CAAC,CAAC,CAAC;QAEP,IAAI,CAAC,WAAW,CAAC,eAAe,CAAC;aAC5B,OAAO,CAAC,UAAA,OAAO;YACZ,KAAI,CAAC,YAAY,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QACxC,CAAC,CAAC,CAAC;IACX,CAAC;IAED,4CAAc,GAAd,UAAe,SAAoB;QAAnC,iBA0BC;QAzBG,IAAI,OAAO,GAAG,WAAI,CAAC,MAAM,CAAC,EAAE,EAAE,SAAS,CAAC,CAAC;QACzC,IAAI,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAgB,iCAAiB,EAAE,EAAE,SAAS,EAAE,OAAO,EAAE,CAAC,CAAC;QAChG,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC;aACrB,OAAO,CAAC,UAAA,OAAO;YACZ,QAAQ,CAAC,IAAI,CAAC,UAAC,EAAE;gBACb,OAAO,KAAI,CAAC,YAAY,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC;YAC1C,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;QAEP,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC;aAC7B,OAAO,CAAC,UAAA,OAAO;YACZ,QAAQ,CAAC,IAAI,CAAC,UAAA,EAAE;gBACZ,OAAO,KAAI,CAAC,YAAY,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC;YAC1C,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;QAEP,QAAQ,CAAC,IAAI,CAAC,UAAC,EAAE;YACb,IAAI,CAAC,kBAAW,CAAC,EAAE,CAAC,SAAS,CAAC,EAAE;gBAC5B,SAAS,CAAC,SAAS,GAAG,EAAE,CAAC,SAAS,CAAC;aACtC;YACD,OAAO,SAAS,CAAC;QACrB,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,OAAO,EAAE,CAAC;IAEvB,CAAC;IAED,0CAAY,GAAZ,UAAa,SAAoB,EAAE,OAAgB;QAAnD,iBAkDC;;QAjDG,IAAI,SAAS,GAAG,EAAE,CAAC;QAEnB,SAAS,CAAC,IAAI,CAAC,eAAQ,CAAC,aAAa,CAAC,sBAAS,EAAE,SAAS,EAAE,UAAC,IAAI,EAAE,QAAQ;YACvE,IAAI,CAAC,gBAAgB,GAAG,QAAQ,CAAC,OAAO,CAAC,KAAI,CAAC,SAAS,CAAC,CAAC;QAC7D,CAAC,CAAC,CAAC,CAAC;QAEJ,IAAI,QAAQ,GAAQ,OAAO,CAAC,MAAM,CAAC;QAEnC,IAAI,CAAC,kBAAW,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,QAAQ,CAAC,IAAI,EAAE;YAC/C,SAAS,CAAC,IAAI,CAAC,eAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,EAAE,SAAS,CAAC,IAAI,CAAC,CAAC,CAAA;SACjE;QAED,IAAI,QAAQ,CAAC,iBAAiB,EAAE;YAC5B,SAAS,CAAC,IAAI,CAAC,eAAQ,CAAC,MAAM,CAC1B,QAAQ,CAAC,iBAAiB,EAC1B;gBACI,IAAI,IAAI,GAAG,SAAS,CAAC;gBACrB,IAAI,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;gBACnC,OAAO,CAAC,WAAW,IAAI,SAAS,CAAC,aAAa,EAAE;oBAC5C,IAAI,GAAG,SAAS,CAAC,aAAa,CAAC;oBAC/B,IAAI,IAAI,IAAI,IAAI,CAAC,WAAW,EAAE;wBAC1B,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;wBAC/B,MAAM;qBACT;iBACJ;gBAED,IAAI,cAAO,CAAC,WAAW,CAAC,EAAE;oBACtB,IAAI,QAAQ,CAAC,cAAc,EAAE;wBACzB,IAAI,GAAC,GAAW,QAAQ,CAAC,cAAc,CAAC;wBACxC,GAAC,GAAG,IAAI,CAAC,IAAI,CAAC,GAAC,CAAC,CAAC,CAAC,CAAC,GAAC,CAAC,CAAC,CAAC,MAAI,GAAG,CAAC;wBAC/B,OAAO,WAAW,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,SAAS,KAAK,GAAC,EAAjB,CAAiB,CAAC,CAAC;qBACrD;oBACD,OAAO,WAAW,CAAC;iBACtB;qBAAM;oBACH,OAAO,EAAE,CAAC;iBACb;YACL,CAAC,CACJ,CAAC,CAAC;SACN;QAED,IAAI,CAAC,kBAAW,CAAC,SAAS,CAAC,SAAS,CAAC,IAAI,QAAQ,CAAC,SAAS,EAAE;YACzD,SAAS,CAAC,IAAI,CAAC,eAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,SAAS,EAAE,SAAS,CAAC,SAAS,CAAC,CAAC,CAAA;SAC3E;QAED,IAAI,CAAC,kBAAW,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,QAAQ,CAAC,QAAQ,EAAE;YACvD,SAAS,CAAC,IAAI,CAAC,eAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,EAAE,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC;SAC1E;QAED,OAAO,CAAA,KAAA,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,OAAO,CAAC,UAAU,EAAE,IAAI,CAAC,SAAS,CAAC,CAAA,CAAC,UAAU,YAAC,OAAO,CAAC,UAAU,EAAE,OAAO,CAAC,MAAM,CAAC,WAAW,EAAE,IAAI,SAAK,SAAS,GAAE;IACxJ,CAAC;IAE0B,qCAAiB,GAAxB;QACI,OAAO,EAAC,MAAM,EAAC,qBAAqB,EAAC,QAAQ,EAAC,EAAC,aAAa,EAAC,CAAC,WAAW,EAAC,SAAS,EAAC,SAAS,CAAC,EAAC,aAAa,EAAC,CAAC,YAAY,CAAC,EAAC,YAAY,EAAC,CAAC,WAAW,EAAC,OAAO,EAAC,iBAAiB,CAAC,EAAC,QAAQ,EAAC,CAAC,WAAW,CAAC,EAAC,UAAU,EAAC,CAAC,WAAW,CAAC,EAAC,OAAO,EAAC,CAAC,WAAW,CAAC,EAAC,eAAe,EAAC,CAAC,WAAW,CAAC,EAAC,gBAAgB,EAAC,CAAC,WAAW,CAAC,EAAC,cAAc,EAAC,CAAC,WAAW,EAAC,SAAS,CAAC,EAAC,EAAC,CAAC;IACjW,CAAC;IAnLZ,mBAAmB;QAF/B,2BAAY,EAAE;QACd,iBAAU,CAAC,+CAAwB,CAAC;QAGpB,mBAAA,aAAM,CAAC,qBAAc,CAAC,CAAA,EAAiC,mBAAA,aAAM,CAAC,uBAAY,CAAC,CAAA;;OAF/E,mBAAmB,CAoLZ;IAAD,0BAAC;CApLpB,AAoLoB,IAAA;AApLP,kDAAmB","file":"../../access/AdvisorChainFactory.js","sourcesContent":["import { IContainer, Provider, Injectable, Inject, isUndefined, isArray, lang, ContainerToken } from '@ts-ioc/core';\r\nimport { Joinpoint, JoinpointState } from '../joinpoints';\r\nimport { Advicer, Advices } from '../advices';\r\nimport { IAdvisorChainFactory, AdvisorChainFactoryToken } from './IAdvisorChainFactory';\r\nimport { IAdvisorChain, AdvisorChainToken } from './IAdvisorChain';\r\nimport { NonePointcut } from '../decorators/NonePointcut';\r\nimport { IAdvisor, AdvisorToken } from '../IAdvisor';\r\n\r\n/**\r\n * advisor chain factory.\r\n *\r\n * @export\r\n * @class AdvisorChainFactory\r\n * @implements {IAdvisorChainFactory}\r\n */\r\n@NonePointcut()\r\n@Injectable(AdvisorChainFactoryToken)\r\nexport class AdvisorChainFactory implements IAdvisorChainFactory {\r\n\r\n    constructor(@Inject(ContainerToken) private container: IContainer, @Inject(AdvisorToken) private advisor: IAdvisor, private advices: Advices) {\r\n\r\n    }\r\n\r\n    getAdvicers(adviceType: string): Advicer[] {\r\n        return (adviceType ? this.advices[adviceType] : null) || [];\r\n    }\r\n\r\n    invoaction(joinPoint: Joinpoint, state: JoinpointState, valueOrthrowing?: any): void {\r\n        joinPoint.state = state;\r\n        joinPoint.returning = undefined;\r\n        joinPoint.throwing = undefined;\r\n\r\n        switch (state) {\r\n            case JoinpointState.Before:\r\n                this.before(joinPoint);\r\n                break;\r\n            case JoinpointState.Pointcut:\r\n                this.pointcut(joinPoint);\r\n                break;\r\n\r\n            case JoinpointState.After:\r\n                joinPoint.returning = valueOrthrowing;\r\n                this.after(joinPoint);\r\n                break;\r\n\r\n            case JoinpointState.AfterThrowing:\r\n                joinPoint.throwing = valueOrthrowing;\r\n                this.afterThrowing(joinPoint);\r\n                break;\r\n\r\n            case JoinpointState.AfterReturning:\r\n                joinPoint.returning = valueOrthrowing;\r\n                this.afterReturning(joinPoint);\r\n                break;\r\n        }\r\n    }\r\n\r\n    before(joinPoint: Joinpoint) {\r\n        let cloneJp = lang.assign({}, joinPoint);\r\n        this.getAdvicers('Around')\r\n            .forEach(advicer => {\r\n                this.invokeAdvice(cloneJp, advicer);\r\n            });\r\n\r\n        if (!isUndefined(cloneJp.args)) {\r\n            joinPoint.args = cloneJp.args;\r\n        }\r\n\r\n        this.getAdvicers('Before')\r\n            .forEach(advicer => {\r\n                this.invokeAdvice(cloneJp, advicer);\r\n            });\r\n\r\n    }\r\n\r\n    pointcut(joinPoint: Joinpoint) {\r\n        let cloneJp = lang.assign({}, joinPoint);\r\n        this.getAdvicers('Pointcut')\r\n            .forEach(advicer => {\r\n                this.invokeAdvice(cloneJp, advicer);\r\n            });\r\n\r\n        if (!isUndefined(cloneJp.args)) {\r\n            joinPoint.args = cloneJp.args;\r\n        }\r\n    }\r\n\r\n    after(joinPoint: Joinpoint) {\r\n        let cloneJp = lang.assign({}, joinPoint);\r\n        this.getAdvicers('Around')\r\n            .forEach(advicer => {\r\n                this.invokeAdvice(cloneJp, advicer);\r\n            });\r\n\r\n        this.getAdvicers('After')\r\n            .forEach(advicer => {\r\n                this.invokeAdvice(cloneJp, advicer);\r\n            });\r\n\r\n    }\r\n\r\n    afterThrowing(joinPoint: Joinpoint) {\r\n        let cloneJp = lang.assign({}, joinPoint);\r\n        this.getAdvicers('Around')\r\n            .forEach(advicer => {\r\n                this.invokeAdvice(cloneJp, advicer);\r\n            });\r\n\r\n        this.getAdvicers('AfterThrowing')\r\n            .forEach(advicer => {\r\n                this.invokeAdvice(cloneJp, advicer);\r\n            });\r\n    }\r\n\r\n    afterReturning(joinPoint: Joinpoint) {\r\n        let cloneJp = lang.assign({}, joinPoint);\r\n        let advChain = this.container.resolve<IAdvisorChain>(AdvisorChainToken, { joinPoint: cloneJp });\r\n        this.getAdvicers('Around')\r\n            .forEach(advicer => {\r\n                advChain.next((jp) => {\r\n                    return this.invokeAdvice(jp, advicer);\r\n                });\r\n            });\r\n\r\n        this.getAdvicers('AfterReturning')\r\n            .forEach(advicer => {\r\n                advChain.next(jp => {\r\n                    return this.invokeAdvice(jp, advicer);\r\n                });\r\n            });\r\n\r\n        advChain.next((jp) => {\r\n            if (!isUndefined(jp.returning)) {\r\n                joinPoint.returning = jp.returning;\r\n            }\r\n            return joinPoint;\r\n        });\r\n\r\n        advChain.process();\r\n\r\n    }\r\n\r\n    invokeAdvice(joinPoint: Joinpoint, advicer: Advicer) {\r\n        let providers = [];\r\n\r\n        providers.push(Provider.createExtends(Joinpoint, joinPoint, (inst, provider) => {\r\n            inst._cache_JoinPoint = provider.resolve(this.container);\r\n        }));\r\n\r\n        let metadata: any = advicer.advice;\r\n\r\n        if (!isUndefined(joinPoint.args) && metadata.args) {\r\n            providers.push(Provider.create(metadata.args, joinPoint.args))\r\n        }\r\n\r\n        if (metadata.annotationArgName) {\r\n            providers.push(Provider.create(\r\n                metadata.annotationArgName,\r\n                () => {\r\n                    let curj = joinPoint;\r\n                    let annotations = curj.annotations;\r\n                    while (!annotations && joinPoint.provJoinpoint) {\r\n                        curj = joinPoint.provJoinpoint;\r\n                        if (curj && curj.annotations) {\r\n                            annotations = curj.annotations;\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                    if (isArray(annotations)) {\r\n                        if (metadata.annotationName) {\r\n                            let d: string = metadata.annotationName;\r\n                            d = /^@/.test(d) ? d : `@${d}`;\r\n                            return annotations.filter(a => a.decorator === d);\r\n                        }\r\n                        return annotations;\r\n                    } else {\r\n                        return [];\r\n                    }\r\n                }\r\n            ));\r\n        }\r\n\r\n        if (!isUndefined(joinPoint.returning) && metadata.returning) {\r\n            providers.push(Provider.create(metadata.returning, joinPoint.returning))\r\n        }\r\n\r\n        if (!isUndefined(joinPoint.throwing) && metadata.throwing) {\r\n            providers.push(Provider.create(metadata.throwing, joinPoint.throwing));\r\n        }\r\n\r\n        return this.advisor.getContainer(advicer.aspectType, this.container).syncInvoke(advicer.aspectType, advicer.advice.propertyKey, null, ...providers);\r\n    }\r\n\n                        static getClassAnnations():any  {\n                            return {\"name\":\"AdvisorChainFactory\",\"params\":{\"constructor\":[\"container\",\"advisor\",\"advices\"],\"getAdvicers\":[\"adviceType\"],\"invoaction\":[\"joinPoint\",\"state\",\"valueOrthrowing\"],\"before\":[\"joinPoint\"],\"pointcut\":[\"joinPoint\"],\"after\":[\"joinPoint\"],\"afterThrowing\":[\"joinPoint\"],\"afterReturning\":[\"joinPoint\"],\"invokeAdvice\":[\"joinPoint\",\"advicer\"]}};\n                        }\n                   }\r\n"]}