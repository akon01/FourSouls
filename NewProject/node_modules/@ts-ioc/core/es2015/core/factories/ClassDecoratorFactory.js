"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("reflect-metadata");
const DecoratorFactory_1 = require("./DecoratorFactory");
const DecoratorType_1 = require("./DecoratorType");
const Registration_1 = require("../../Registration");
const utils_1 = require("../../utils");
/**
 * create class decorator
 *
 * @export
 * @template T metadata type.
 * @param {string} name decorator name.
 * @param {MetadataAdapter} [adapter]  metadata adapter
 * @param {MetadataExtends<T>} [metadataExtends] add extents for metadata.
 * @returns {*}
 */
function createClassDecorator(name, adapter, metadataExtends) {
    let classAdapter = ((args) => {
        if (adapter) {
            adapter(args);
        }
        args.next({
            match: (arg) => arg && (utils_1.isSymbol(arg) || utils_1.isString(arg) || (utils_1.isObject(arg) && arg instanceof Registration_1.Registration)),
            setMetadata: (metadata, arg) => {
                metadata.provide = arg;
            }
        });
        args.next({
            match: (arg) => utils_1.isString(arg),
            setMetadata: (metadata, arg) => {
                metadata.alias = arg;
            }
        });
        args.next({
            match: (arg) => utils_1.isBoolean(arg) || utils_1.isNumber(arg) || utils_1.isToken(arg),
            setMetadata: (metadata, arg) => {
                if (utils_1.isBoolean(arg)) {
                    metadata.singleton = arg;
                }
                else if (utils_1.isNumber(arg)) {
                    metadata.expires = arg;
                }
                else if (utils_1.isToken(arg)) {
                    metadata.refs = { target: arg, provide: metadata.provide || metadata.type, alias: metadata.alias };
                }
            }
        });
        args.next({
            match: (arg) => utils_1.isToken(arg),
            setMetadata: (metadata, arg) => {
                metadata.expires = arg;
            }
        });
    });
    let decorator = DecoratorFactory_1.createDecorator(name, classAdapter, metadataExtends);
    decorator.decoratorType = DecoratorType_1.DecoratorType.Class;
    return decorator;
}
exports.createClassDecorator = createClassDecorator;

//# sourceMappingURL=../../sourcemaps/core/factories/ClassDecoratorFactory.js.map
